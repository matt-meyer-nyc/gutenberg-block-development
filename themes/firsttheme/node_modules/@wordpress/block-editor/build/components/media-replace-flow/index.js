"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _i18n = require("@wordpress/i18n");

var _a11y = require("@wordpress/a11y");

var _components = require("@wordpress/components");

var _keycodes = require("@wordpress/keycodes");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _icons = require("@wordpress/icons");

var _mediaUpload = _interopRequireDefault(require("../media-upload"));

var _check = _interopRequireDefault(require("../media-upload/check"));

var _linkEditor = _interopRequireDefault(require("../url-popover/link-editor"));

var _linkViewer = _interopRequireDefault(require("../url-popover/link-viewer"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var MediaReplaceFlow = function MediaReplaceFlow(_ref) {
  var mediaURL = _ref.mediaURL,
      mediaId = _ref.mediaId,
      allowedTypes = _ref.allowedTypes,
      accept = _ref.accept,
      onSelect = _ref.onSelect,
      onSelectURL = _ref.onSelectURL,
      onError = _ref.onError,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? (0, _i18n.__)('Replace') : _ref$name;

  var _useState = (0, _element.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      showURLInput = _useState2[0],
      setShowURLInput = _useState2[1];

  var _useState3 = (0, _element.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      showEditURLInput = _useState4[0],
      setShowEditURLInput = _useState4[1];

  var _useState5 = (0, _element.useState)(mediaURL),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      mediaURLValue = _useState6[0],
      setMediaURLValue = _useState6[1];

  var mediaUpload = (0, _data.useSelect)(function (select) {
    return select('core/block-editor').getSettings().mediaUpload;
  }, []);
  var editMediaButtonRef = (0, _element.createRef)();

  var stopPropagation = function stopPropagation(event) {
    event.stopPropagation();
  };

  var stopPropagationRelevantKeys = function stopPropagationRelevantKeys(event) {
    if ([_keycodes.LEFT, _keycodes.DOWN, _keycodes.RIGHT, _keycodes.UP, _keycodes.BACKSPACE, _keycodes.ENTER].indexOf(event.keyCode) > -1) {
      // Stop the key event from propagating up to ObserveTyping.startTypingInTextField.
      event.stopPropagation();
    }
  };

  var selectMedia = function selectMedia(media) {
    onSelect(media);
    setMediaURLValue(media.url);
    (0, _a11y.speak)((0, _i18n.__)('The media file has been replaced'));
  };

  var selectURL = function selectURL(newURL) {
    onSelectURL(newURL);
    setShowEditURLInput(false);
  };

  var uploadFiles = function uploadFiles(event, closeDropdown) {
    var files = event.target.files;

    var setMedia = function setMedia(_ref2) {
      var _ref3 = (0, _slicedToArray2.default)(_ref2, 1),
          media = _ref3[0];

      selectMedia(media);
      closeDropdown();
    };

    mediaUpload({
      allowedTypes: allowedTypes,
      filesList: files,
      onFileChange: setMedia,
      onError: onError
    });
  };

  var openOnArrowDown = function openOnArrowDown(event) {
    if (event.keyCode === _keycodes.DOWN) {
      event.preventDefault();
      event.stopPropagation();
      event.target.click();
    }
  };

  var urlInputUIContent;

  if (showEditURLInput) {
    urlInputUIContent = (0, _element.createElement)(_linkEditor.default, {
      onKeyDown: stopPropagationRelevantKeys,
      onKeyPress: stopPropagation,
      value: mediaURLValue,
      isFullWidthInput: true,
      hasInputBorder: true,
      onChangeInputValue: function onChangeInputValue(url) {
        return setMediaURLValue(url);
      },
      onSubmit: function onSubmit(event) {
        event.preventDefault();
        selectURL(mediaURLValue);
        editMediaButtonRef.current.focus();
      }
    });
  } else {
    urlInputUIContent = (0, _element.createElement)(_linkViewer.default, {
      isFullWidth: true,
      className: "block-editor-media-replace-flow__link-viewer",
      url: mediaURLValue,
      onEditLinkClick: function onEditLinkClick() {
        return setShowEditURLInput(!showEditURLInput);
      }
    });
  }

  return (0, _element.createElement)(_components.Dropdown, {
    contentClassName: "block-editor-media-replace-flow__options",
    renderToggle: function renderToggle(_ref4) {
      var isOpen = _ref4.isOpen,
          onToggle = _ref4.onToggle;
      return (0, _element.createElement)(_components.ToolbarGroup, {
        className: "media-replace-flow"
      }, (0, _element.createElement)(_components.Button, {
        ref: editMediaButtonRef,
        "aria-expanded": isOpen,
        onClick: onToggle,
        onKeyDown: openOnArrowDown
      }, name, (0, _element.createElement)("span", {
        className: "block-editor-media-replace-flow__indicator"
      })));
    },
    renderContent: function renderContent(_ref5) {
      var onClose = _ref5.onClose;
      return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.NavigableMenu, null, (0, _element.createElement)(_mediaUpload.default, {
        value: mediaId,
        onSelect: function onSelect(media) {
          return selectMedia(media);
        },
        allowedTypes: allowedTypes,
        render: function render(_ref6) {
          var open = _ref6.open;
          return (0, _element.createElement)(_components.MenuItem, {
            icon: "admin-media",
            onClick: open
          }, (0, _i18n.__)('Open Media Library'));
        }
      }), (0, _element.createElement)(_check.default, null, (0, _element.createElement)(_components.FormFileUpload, {
        onChange: function onChange(event) {
          uploadFiles(event, onClose);
        },
        accept: accept,
        render: function render(_ref7) {
          var openFileDialog = _ref7.openFileDialog;
          return (0, _element.createElement)(_components.MenuItem, {
            icon: _icons.upload,
            onClick: function onClick() {
              openFileDialog();
            }
          }, (0, _i18n.__)('Upload'));
        }
      })), onSelectURL && (0, _element.createElement)(_components.MenuItem, {
        icon: _icons.link,
        onClick: function onClick() {
          return setShowURLInput(!showURLInput);
        },
        "aria-expanded": showURLInput
      }, (0, _element.createElement)("div", null, " ", (0, _i18n.__)('Insert from URL'), " "))), showURLInput && (0, _element.createElement)("div", {
        className: "block-editor-media-flow__url-input"
      }, urlInputUIContent));
    }
  });
};

var _default = (0, _compose.compose)(_components.withNotices)(MediaReplaceFlow);

exports.default = _default;
//# sourceMappingURL=index.js.map