"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BlockList = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _lodash = require("lodash");

var _reactNative = require("react-native");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _blocks = require("@wordpress/blocks");

var _components = require("@wordpress/components");

var _style = _interopRequireDefault(require("./style.scss"));

var _block = _interopRequireDefault(require("./block"));

var _blockListAppender = _interopRequireDefault(require("../block-list-appender"));

var _insertionPoint = _interopRequireDefault(require("./insertion-point"));

var _blockListFooter = _interopRequireDefault(require("../block-list-footer"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var innerToolbarHeight = 44;

var BlockList =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(BlockList, _Component);

  function BlockList() {
    var _this;

    (0, _classCallCheck2.default)(this, BlockList);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BlockList).apply(this, arguments));
    _this.renderItem = _this.renderItem.bind((0, _assertThisInitialized2.default)(_this));
    _this.renderBlockListFooter = _this.renderBlockListFooter.bind((0, _assertThisInitialized2.default)(_this));
    _this.renderDefaultBlockAppender = _this.renderDefaultBlockAppender.bind((0, _assertThisInitialized2.default)(_this));
    _this.onCaretVerticalPositionChange = _this.onCaretVerticalPositionChange.bind((0, _assertThisInitialized2.default)(_this));
    _this.scrollViewInnerRef = _this.scrollViewInnerRef.bind((0, _assertThisInitialized2.default)(_this));
    _this.addBlockToEndOfPost = _this.addBlockToEndOfPost.bind((0, _assertThisInitialized2.default)(_this));
    _this.shouldFlatListPreventAutomaticScroll = _this.shouldFlatListPreventAutomaticScroll.bind((0, _assertThisInitialized2.default)(_this));
    _this.shouldShowInnerBlockAppender = _this.shouldShowInnerBlockAppender.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(BlockList, [{
    key: "addBlockToEndOfPost",
    value: function addBlockToEndOfPost(newBlock) {
      this.props.insertBlock(newBlock, this.props.blockCount);
    }
  }, {
    key: "onCaretVerticalPositionChange",
    value: function onCaretVerticalPositionChange(targetId, caretY, previousCaretY) {
      _components.KeyboardAwareFlatList.handleCaretVerticalPositionChange(this.scrollViewRef, targetId, caretY, previousCaretY);
    }
  }, {
    key: "scrollViewInnerRef",
    value: function scrollViewInnerRef(ref) {
      this.scrollViewRef = ref;
    }
  }, {
    key: "shouldFlatListPreventAutomaticScroll",
    value: function shouldFlatListPreventAutomaticScroll() {
      return this.props.isBlockInsertionPointVisible;
    }
  }, {
    key: "renderDefaultBlockAppender",
    value: function renderDefaultBlockAppender() {
      var shouldShowInsertionPointBefore = this.props.shouldShowInsertionPointBefore;
      var willShowInsertionPoint = shouldShowInsertionPointBefore(); // call without the client_id argument since this is the appender

      return (0, _element.createElement)(_components.ReadableContentView, null, (0, _element.createElement)(_blockListAppender.default // show the default appender, anormal, when not inserting a block
      , {
        rootClientId: this.props.rootClientId,
        renderAppender: this.props.renderAppender,
        showSeparator: willShowInsertionPoint
      }));
    }
  }, {
    key: "shouldShowInnerBlockAppender",
    value: function shouldShowInnerBlockAppender() {
      var _this$props = this.props,
          blockClientIds = _this$props.blockClientIds,
          renderAppender = _this$props.renderAppender;
      return renderAppender && blockClientIds.length > 0;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          clearSelectedBlock = _this$props2.clearSelectedBlock,
          blockClientIds = _this$props2.blockClientIds,
          isFullyBordered = _this$props2.isFullyBordered,
          title = _this$props2.title,
          header = _this$props2.header,
          _this$props2$withFoot = _this$props2.withFooter,
          withFooter = _this$props2$withFoot === void 0 ? true : _this$props2$withFoot,
          isReadOnly = _this$props2.isReadOnly,
          isRootList = _this$props2.isRootList;
      return (0, _element.createElement)(_reactNative.View, {
        style: {
          flex: isRootList ? 1 : 0
        },
        onAccessibilityEscape: clearSelectedBlock
      }, (0, _element.createElement)(_components.KeyboardAwareFlatList, (0, _extends2.default)({}, _reactNative.Platform.OS === 'android' ? {
        removeClippedSubviews: false
      } : {}, {
        // Disable clipping on Android to fix focus losing. See https://github.com/wordpress-mobile/gutenberg-mobile/pull/741#issuecomment-472746541
        accessibilityLabel: "block-list",
        autoScroll: this.props.autoScroll,
        innerRef: this.scrollViewInnerRef,
        extraScrollHeight: innerToolbarHeight + 10,
        keyboardShouldPersistTaps: "always",
        scrollViewStyle: {
          flex: isRootList ? 1 : 0
        },
        data: blockClientIds,
        extraData: [isFullyBordered],
        keyExtractor: _lodash.identity,
        renderItem: this.renderItem,
        shouldPreventAutomaticScroll: this.shouldFlatListPreventAutomaticScroll,
        title: title,
        ListHeaderComponent: !isReadOnly && header,
        ListEmptyComponent: !isReadOnly && this.renderDefaultBlockAppender,
        ListFooterComponent: !isReadOnly && withFooter && this.renderBlockListFooter
      })), this.shouldShowInnerBlockAppender() && (0, _element.createElement)(_reactNative.View, {
        style: _style.default.paddingToContent
      }, (0, _element.createElement)(_blockListAppender.default, {
        rootClientId: this.props.rootClientId,
        renderAppender: this.props.renderAppender,
        showSeparator: true
      })));
    }
  }, {
    key: "renderItem",
    value: function renderItem(_ref) {
      var clientId = _ref.item;
      var _this$props3 = this.props,
          isReadOnly = _this$props3.isReadOnly,
          shouldShowInsertionPointBefore = _this$props3.shouldShowInsertionPointBefore,
          shouldShowInsertionPointAfter = _this$props3.shouldShowInsertionPointAfter;
      return (0, _element.createElement)(_components.ReadableContentView, null, (0, _element.createElement)(_reactNative.View, {
        pointerEvents: isReadOnly ? 'box-only' : 'auto'
      }, shouldShowInsertionPointBefore(clientId) && (0, _element.createElement)(_insertionPoint.default, null), (0, _element.createElement)(_block.default, {
        key: clientId,
        showTitle: false,
        clientId: clientId,
        rootClientId: this.props.rootClientId,
        onCaretVerticalPositionChange: this.onCaretVerticalPositionChange,
        isSmallScreen: !this.props.isFullyBordered
      }), !this.shouldShowInnerBlockAppender() && shouldShowInsertionPointAfter(clientId) && (0, _element.createElement)(_insertionPoint.default, null)));
    }
  }, {
    key: "renderBlockListFooter",
    value: function renderBlockListFooter() {
      var _this2 = this;

      var paragraphBlock = (0, _blocks.createBlock)('core/paragraph');
      return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
        onPress: function onPress() {
          _this2.addBlockToEndOfPost(paragraphBlock);
        }
      }, (0, _element.createElement)(_reactNative.View, {
        style: _style.default.blockListFooter
      })), (0, _element.createElement)(_blockListFooter.default.Slot, null));
    }
  }]);
  return BlockList;
}(_element.Component);

exports.BlockList = BlockList;

var _default = (0, _compose.compose)([(0, _data.withSelect)(function (select, _ref2) {
  var rootClientId = _ref2.rootClientId;

  var _select = select('core/block-editor'),
      getBlockCount = _select.getBlockCount,
      getBlockOrder = _select.getBlockOrder,
      getSelectedBlockClientId = _select.getSelectedBlockClientId,
      getBlockInsertionPoint = _select.getBlockInsertionPoint,
      isBlockInsertionPointVisible = _select.isBlockInsertionPointVisible,
      getSettings = _select.getSettings;

  var selectedBlockClientId = getSelectedBlockClientId();
  var blockClientIds = getBlockOrder(rootClientId);
  var insertionPoint = getBlockInsertionPoint();
  var blockInsertionPointIsVisible = isBlockInsertionPointVisible();

  var shouldShowInsertionPointBefore = function shouldShowInsertionPointBefore(clientId) {
    return blockInsertionPointIsVisible && insertionPoint.rootClientId === rootClientId && ( // if list is empty, show the insertion point (via the default appender)
    blockClientIds.length === 0 || // or if the insertion point is right before the denoted block
    blockClientIds[insertionPoint.index] === clientId);
  };

  var shouldShowInsertionPointAfter = function shouldShowInsertionPointAfter(clientId) {
    return blockInsertionPointIsVisible && insertionPoint.rootClientId === rootClientId && // if the insertion point is at the end of the list
    blockClientIds.length === insertionPoint.index && // and the denoted block is the last one on the list, show the indicator at the end of the block
    blockClientIds[insertionPoint.index - 1] === clientId;
  };

  var isReadOnly = getSettings().readOnly;
  return {
    blockClientIds: blockClientIds,
    blockCount: getBlockCount(rootClientId),
    isBlockInsertionPointVisible: isBlockInsertionPointVisible(),
    shouldShowInsertionPointBefore: shouldShowInsertionPointBefore,
    shouldShowInsertionPointAfter: shouldShowInsertionPointAfter,
    selectedBlockClientId: selectedBlockClientId,
    isReadOnly: isReadOnly,
    isRootList: rootClientId === undefined
  };
}), (0, _data.withDispatch)(function (dispatch) {
  var _dispatch = dispatch('core/block-editor'),
      insertBlock = _dispatch.insertBlock,
      replaceBlock = _dispatch.replaceBlock,
      clearSelectedBlock = _dispatch.clearSelectedBlock;

  return {
    clearSelectedBlock: clearSelectedBlock,
    insertBlock: insertBlock,
    replaceBlock: replaceBlock
  };
}), _compose.withPreferredColorScheme])(BlockList);

exports.default = _default;
//# sourceMappingURL=index.native.js.map