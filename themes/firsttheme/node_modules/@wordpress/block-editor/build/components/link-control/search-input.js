"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _keycodes = require("@wordpress/keycodes");

var _ = require("../");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var handleLinkControlOnKeyDown = function handleLinkControlOnKeyDown(event) {
  var keyCode = event.keyCode;

  if ([_keycodes.LEFT, _keycodes.DOWN, _keycodes.RIGHT, _keycodes.UP, _keycodes.BACKSPACE, _keycodes.ENTER].indexOf(keyCode) > -1) {
    // Stop the key event from propagating up to ObserveTyping.startTypingInTextField.
    event.stopPropagation();
  }
};

var handleLinkControlOnKeyPress = function handleLinkControlOnKeyPress(event) {
  var keyCode = event.keyCode;
  event.stopPropagation();

  if (keyCode === _keycodes.ENTER) {}
};

var LinkControlSearchInput = function LinkControlSearchInput(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange,
      onSelect = _ref.onSelect,
      renderSuggestions = _ref.renderSuggestions,
      fetchSuggestions = _ref.fetchSuggestions,
      showInitialSuggestions = _ref.showInitialSuggestions;

  var _useState = (0, _element.useState)(),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      selectedSuggestion = _useState2[0],
      setSelectedSuggestion = _useState2[1];

  var selectItemHandler = function selectItemHandler(selection, suggestion) {
    onChange(selection);
    setSelectedSuggestion(suggestion);
  };

  function selectSuggestionOrCurrentInputValue(event) {
    // Avoid default forms behavior, since it's being handled custom here.
    event.preventDefault(); // Interpret the selected value as either the selected suggestion, if
    // exists, or otherwise the current input value as entered.

    onSelect(selectedSuggestion || {
      url: value
    });
  }

  return (0, _element.createElement)("form", {
    onSubmit: selectSuggestionOrCurrentInputValue
  }, (0, _element.createElement)(_.URLInput, {
    className: "block-editor-link-control__search-input",
    value: value,
    onChange: selectItemHandler,
    onKeyDown: function onKeyDown(event) {
      if (event.keyCode === _keycodes.ENTER) {
        return;
      }

      handleLinkControlOnKeyDown(event);
    },
    onKeyPress: handleLinkControlOnKeyPress,
    placeholder: (0, _i18n.__)('Search or type url'),
    __experimentalRenderSuggestions: renderSuggestions,
    __experimentalFetchLinkSuggestions: fetchSuggestions,
    __experimentalHandleURLSuggestions: true,
    __experimentalShowInitialSuggestions: showInitialSuggestions
  }), (0, _element.createElement)("div", {
    className: "block-editor-link-control__search-actions"
  }, (0, _element.createElement)(_components.Button, {
    type: "submit",
    label: (0, _i18n.__)('Submit'),
    icon: "editor-break",
    className: "block-editor-link-control__search-submit"
  })));
};

var _default = LinkControlSearchInput;
exports.default = _default;
//# sourceMappingURL=search-input.js.map