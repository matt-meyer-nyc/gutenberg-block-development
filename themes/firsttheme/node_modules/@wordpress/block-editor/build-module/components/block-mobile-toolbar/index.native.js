import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { Keyboard, View } from 'react-native';
/**
 * WordPress dependencies
 */

import { ToolbarButton } from '@wordpress/components';
import { __, sprintf } from '@wordpress/i18n';
import { withDispatch, withSelect } from '@wordpress/data';
import { compose } from '@wordpress/compose';
import { trash } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import styles from './style.scss';
import BlockMover from '../block-mover';
import { BlockSettingsButton } from '../block-settings';

var BlockMobileToolbar = function BlockMobileToolbar(_ref) {
  var clientId = _ref.clientId,
      onDelete = _ref.onDelete,
      order = _ref.order;
  return createElement(View, {
    style: styles.toolbar
  }, createElement(BlockMover, {
    clientIds: [clientId]
  }), createElement(View, {
    style: styles.spacer
  }), createElement(BlockSettingsButton.Slot, null), createElement(ToolbarButton, {
    title: sprintf(
    /* translators: accessibility text. %s: current block position (number). */
    __('Remove block at row %s'), order + 1),
    onClick: onDelete,
    icon: trash,
    extraProps: {
      hint: __('Double tap to remove the block')
    }
  }));
};

export default compose(withSelect(function (select, _ref2) {
  var clientId = _ref2.clientId;

  var _select = select('core/block-editor'),
      getBlockIndex = _select.getBlockIndex;

  return {
    order: getBlockIndex(clientId)
  };
}), withDispatch(function (dispatch, _ref3) {
  var clientId = _ref3.clientId,
      rootClientId = _ref3.rootClientId;

  var _dispatch = dispatch('core/block-editor'),
      removeBlock = _dispatch.removeBlock;

  return {
    onDelete: function onDelete() {
      Keyboard.dismiss();
      removeBlock(clientId, rootClientId);
    }
  };
}))(BlockMobileToolbar);
//# sourceMappingURL=index.native.js.map