import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { serialize, pasteHandler } from '@wordpress/blocks';
import { documentHasSelection } from '@wordpress/dom';
import { withDispatch } from '@wordpress/data';
import { compose } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import { getPasteEventData } from '../../utils/get-paste-event-data';

function CopyHandler(_ref) {
  var children = _ref.children,
      handler = _ref.handler;
  return createElement("div", {
    onCopy: handler,
    onCut: handler,
    onPaste: handler
  }, children);
}

export default compose([withDispatch(function (dispatch, ownProps, _ref2) {
  var select = _ref2.select;

  var _select = select('core/block-editor'),
      getBlocksByClientId = _select.getBlocksByClientId,
      getSelectedBlockClientIds = _select.getSelectedBlockClientIds,
      hasMultiSelection = _select.hasMultiSelection,
      getSettings = _select.getSettings;

  var _dispatch = dispatch('core/block-editor'),
      removeBlocks = _dispatch.removeBlocks,
      replaceBlocks = _dispatch.replaceBlocks;

  var _getSettings = getSettings(),
      canUserUseUnfilteredHTML = _getSettings.__experimentalCanUserUseUnfilteredHTML;

  return {
    handler: function handler(event) {
      var selectedBlockClientIds = getSelectedBlockClientIds();

      if (selectedBlockClientIds.length === 0) {
        return;
      } // Always handle multiple selected blocks.
      // Let native copy behaviour take over in input fields.


      if (!hasMultiSelection() && documentHasSelection()) {
        return;
      }

      event.preventDefault();

      if (event.type === 'copy' || event.type === 'cut') {
        var blocks = getBlocksByClientId(selectedBlockClientIds);
        var serialized = serialize(blocks);
        event.clipboardData.setData('text/plain', serialized);
        event.clipboardData.setData('text/html', serialized);
      }

      if (event.type === 'cut') {
        removeBlocks(selectedBlockClientIds);
      } else if (event.type === 'paste') {
        var _getPasteEventData = getPasteEventData(event),
            plainText = _getPasteEventData.plainText,
            html = _getPasteEventData.html;

        var _blocks = pasteHandler({
          HTML: html,
          plainText: plainText,
          mode: 'BLOCKS',
          canUserUseUnfilteredHTML: canUserUseUnfilteredHTML
        });

        replaceBlocks(selectedBlockClientIds, _blocks);
      }
    }
  };
})])(CopyHandler);
//# sourceMappingURL=index.js.map