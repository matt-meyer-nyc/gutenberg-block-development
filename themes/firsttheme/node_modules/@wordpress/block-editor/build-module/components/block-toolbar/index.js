import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import BlockControls from '../block-controls';
import BlockFormatControls from '../block-format-controls';
import BlockSettingsMenu from '../block-settings-menu';
import BlockSwitcher from '../block-switcher';
import MultiBlocksSwitcher from '../block-switcher/multi-blocks-switcher';
import BlockMover from '../block-mover';
export default function BlockToolbar(_ref) {
  var hideDragHandle = _ref.hideDragHandle;

  var _useSelect = useSelect(function (select) {
    var _select = select('core/block-editor'),
        getBlockMode = _select.getBlockMode,
        getSelectedBlockClientIds = _select.getSelectedBlockClientIds,
        isBlockValid = _select.isBlockValid,
        getBlockRootClientId = _select.getBlockRootClientId,
        getBlockListSettings = _select.getBlockListSettings;

    var selectedBlockClientIds = getSelectedBlockClientIds();
    var blockRootClientId = getBlockRootClientId(selectedBlockClientIds[0]);

    var _ref2 = getBlockListSettings(blockRootClientId) || {},
        __experimentalMoverDirection = _ref2.__experimentalMoverDirection,
        _ref2$__experimentalU = _ref2.__experimentalUIParts,
        __experimentalUIParts = _ref2$__experimentalU === void 0 ? {} : _ref2$__experimentalU;

    return {
      blockClientIds: selectedBlockClientIds,
      rootClientId: blockRootClientId,
      isValid: selectedBlockClientIds.length === 1 ? isBlockValid(selectedBlockClientIds[0]) : null,
      mode: selectedBlockClientIds.length === 1 ? getBlockMode(selectedBlockClientIds[0]) : null,
      moverDirection: __experimentalMoverDirection,
      hasMovers: __experimentalUIParts.hasMovers
    };
  }, []),
      blockClientIds = _useSelect.blockClientIds,
      isValid = _useSelect.isValid,
      mode = _useSelect.mode,
      moverDirection = _useSelect.moverDirection,
      _useSelect$hasMovers = _useSelect.hasMovers,
      hasMovers = _useSelect$hasMovers === void 0 ? true : _useSelect$hasMovers;

  if (blockClientIds.length === 0) {
    return null;
  }

  if (blockClientIds.length > 1) {
    return createElement("div", {
      className: "block-editor-block-toolbar"
    }, hasMovers && createElement(BlockMover, {
      clientIds: blockClientIds,
      __experimentalOrientation: moverDirection,
      hideDragHandle: hideDragHandle
    }), createElement(MultiBlocksSwitcher, null), createElement(BlockSettingsMenu, {
      clientIds: blockClientIds
    }));
  }

  return createElement("div", {
    className: "block-editor-block-toolbar"
  }, hasMovers && createElement(BlockMover, {
    clientIds: blockClientIds,
    __experimentalOrientation: moverDirection,
    hideDragHandle: hideDragHandle
  }), mode === 'visual' && isValid && createElement(Fragment, null, createElement(BlockSwitcher, {
    clientIds: blockClientIds
  }), createElement(BlockControls.Slot, {
    bubblesVirtually: true,
    className: "block-editor-block-toolbar__slot"
  }), createElement(BlockFormatControls.Slot, {
    bubblesVirtually: true,
    className: "block-editor-block-toolbar__slot"
  })), createElement(BlockSettingsMenu, {
    clientIds: blockClientIds
  }));
}
//# sourceMappingURL=index.js.map