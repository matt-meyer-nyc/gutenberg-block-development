import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * WordPress dependencies
 */
import { BlockEditorProvider, BlockList } from '@wordpress/block-editor';
import { ModalHeaderBar } from '@wordpress/components';
import { usePreferredColorScheme } from '@wordpress/compose';
import { useSelect } from '@wordpress/data';
import { __ } from '@wordpress/i18n';
/**
 * External dependencies
 */

import { Modal, View, SafeAreaView } from 'react-native'; // We are replicating this here because the one in @wordpress/block-editor always
// tries to scale the preview and we would need a lot of cross platform code to handle
// sizes, when we actually want to show the preview at full width.
//
// We can make it work here first, then figure out the right way to consolidate
// both implementations

var BlockPreview = function BlockPreview(_ref) {
  var blocks = _ref.blocks;
  var currentSettings = useSelect(function (select) {
    return select('core/block-editor').getSettings();
  });

  var settings = _objectSpread({}, currentSettings, {
    readOnly: true
  });

  return createElement(BlockEditorProvider, {
    value: blocks,
    settings: settings
  }, createElement(View, {
    style: {
      flex: 1
    }
  }, createElement(BlockList, null)));
};

BlockPreview.displayName = 'BlockPreview';

var Preview = function Preview(props) {
  var template = props.template,
      onDismiss = props.onDismiss,
      onApply = props.onApply;
  var preferredColorScheme = usePreferredColorScheme();
  var containerBackgroundColor = preferredColorScheme === 'dark' ? 'black' : 'white';

  if (template === undefined) {
    return null;
  }

  var leftButton = createElement(ModalHeaderBar.CloseButton, {
    onPress: onDismiss
  });
  var rightButton = createElement(ModalHeaderBar.Button, {
    onPress: onApply,
    title: __('Apply'),
    isPrimary: true
  });
  return createElement(Modal, {
    visible: !!template,
    animationType: "slide",
    onRequestClose: onDismiss,
    supportedOrientations: ['portrait', 'landscape']
  }, createElement(SafeAreaView, {
    style: {
      flex: 1,
      backgroundColor: containerBackgroundColor
    }
  }, createElement(ModalHeaderBar, {
    leftButton: leftButton,
    rightButton: rightButton,
    title: template.name,
    subtitle: __('Template Preview')
  }), createElement(BlockPreview, {
    blocks: template.blocks
  })));
};

Preview.displayName = 'TemplatePreview';
export default Preview;
//# sourceMappingURL=preview.native.js.map