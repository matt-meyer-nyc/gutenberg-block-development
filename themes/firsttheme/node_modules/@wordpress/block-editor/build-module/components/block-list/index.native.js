import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import { identity } from 'lodash';
import { View, Platform, TouchableWithoutFeedback } from 'react-native';
/**
 * WordPress dependencies
 */

import { Component } from '@wordpress/element';
import { withDispatch, withSelect } from '@wordpress/data';
import { compose, withPreferredColorScheme } from '@wordpress/compose';
import { createBlock } from '@wordpress/blocks';
import { KeyboardAwareFlatList, ReadableContentView } from '@wordpress/components';
/**
 * Internal dependencies
 */

import styles from './style.scss';
import BlockListBlock from './block';
import BlockListAppender from '../block-list-appender';
import BlockInsertionPoint from './insertion-point';
import __experimentalBlockListFooter from '../block-list-footer';
var innerToolbarHeight = 44;
export var BlockList =
/*#__PURE__*/
function (_Component) {
  _inherits(BlockList, _Component);

  function BlockList() {
    var _this;

    _classCallCheck(this, BlockList);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BlockList).apply(this, arguments));
    _this.renderItem = _this.renderItem.bind(_assertThisInitialized(_this));
    _this.renderBlockListFooter = _this.renderBlockListFooter.bind(_assertThisInitialized(_this));
    _this.renderDefaultBlockAppender = _this.renderDefaultBlockAppender.bind(_assertThisInitialized(_this));
    _this.onCaretVerticalPositionChange = _this.onCaretVerticalPositionChange.bind(_assertThisInitialized(_this));
    _this.scrollViewInnerRef = _this.scrollViewInnerRef.bind(_assertThisInitialized(_this));
    _this.addBlockToEndOfPost = _this.addBlockToEndOfPost.bind(_assertThisInitialized(_this));
    _this.shouldFlatListPreventAutomaticScroll = _this.shouldFlatListPreventAutomaticScroll.bind(_assertThisInitialized(_this));
    _this.shouldShowInnerBlockAppender = _this.shouldShowInnerBlockAppender.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(BlockList, [{
    key: "addBlockToEndOfPost",
    value: function addBlockToEndOfPost(newBlock) {
      this.props.insertBlock(newBlock, this.props.blockCount);
    }
  }, {
    key: "onCaretVerticalPositionChange",
    value: function onCaretVerticalPositionChange(targetId, caretY, previousCaretY) {
      KeyboardAwareFlatList.handleCaretVerticalPositionChange(this.scrollViewRef, targetId, caretY, previousCaretY);
    }
  }, {
    key: "scrollViewInnerRef",
    value: function scrollViewInnerRef(ref) {
      this.scrollViewRef = ref;
    }
  }, {
    key: "shouldFlatListPreventAutomaticScroll",
    value: function shouldFlatListPreventAutomaticScroll() {
      return this.props.isBlockInsertionPointVisible;
    }
  }, {
    key: "renderDefaultBlockAppender",
    value: function renderDefaultBlockAppender() {
      var shouldShowInsertionPointBefore = this.props.shouldShowInsertionPointBefore;
      var willShowInsertionPoint = shouldShowInsertionPointBefore(); // call without the client_id argument since this is the appender

      return createElement(ReadableContentView, null, createElement(BlockListAppender // show the default appender, anormal, when not inserting a block
      , {
        rootClientId: this.props.rootClientId,
        renderAppender: this.props.renderAppender,
        showSeparator: willShowInsertionPoint
      }));
    }
  }, {
    key: "shouldShowInnerBlockAppender",
    value: function shouldShowInnerBlockAppender() {
      var _this$props = this.props,
          blockClientIds = _this$props.blockClientIds,
          renderAppender = _this$props.renderAppender;
      return renderAppender && blockClientIds.length > 0;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          clearSelectedBlock = _this$props2.clearSelectedBlock,
          blockClientIds = _this$props2.blockClientIds,
          isFullyBordered = _this$props2.isFullyBordered,
          title = _this$props2.title,
          header = _this$props2.header,
          _this$props2$withFoot = _this$props2.withFooter,
          withFooter = _this$props2$withFoot === void 0 ? true : _this$props2$withFoot,
          isReadOnly = _this$props2.isReadOnly,
          isRootList = _this$props2.isRootList;
      return createElement(View, {
        style: {
          flex: isRootList ? 1 : 0
        },
        onAccessibilityEscape: clearSelectedBlock
      }, createElement(KeyboardAwareFlatList, _extends({}, Platform.OS === 'android' ? {
        removeClippedSubviews: false
      } : {}, {
        // Disable clipping on Android to fix focus losing. See https://github.com/wordpress-mobile/gutenberg-mobile/pull/741#issuecomment-472746541
        accessibilityLabel: "block-list",
        autoScroll: this.props.autoScroll,
        innerRef: this.scrollViewInnerRef,
        extraScrollHeight: innerToolbarHeight + 10,
        keyboardShouldPersistTaps: "always",
        scrollViewStyle: {
          flex: isRootList ? 1 : 0
        },
        data: blockClientIds,
        extraData: [isFullyBordered],
        keyExtractor: identity,
        renderItem: this.renderItem,
        shouldPreventAutomaticScroll: this.shouldFlatListPreventAutomaticScroll,
        title: title,
        ListHeaderComponent: !isReadOnly && header,
        ListEmptyComponent: !isReadOnly && this.renderDefaultBlockAppender,
        ListFooterComponent: !isReadOnly && withFooter && this.renderBlockListFooter
      })), this.shouldShowInnerBlockAppender() && createElement(View, {
        style: styles.paddingToContent
      }, createElement(BlockListAppender, {
        rootClientId: this.props.rootClientId,
        renderAppender: this.props.renderAppender,
        showSeparator: true
      })));
    }
  }, {
    key: "renderItem",
    value: function renderItem(_ref) {
      var clientId = _ref.item;
      var _this$props3 = this.props,
          isReadOnly = _this$props3.isReadOnly,
          shouldShowInsertionPointBefore = _this$props3.shouldShowInsertionPointBefore,
          shouldShowInsertionPointAfter = _this$props3.shouldShowInsertionPointAfter;
      return createElement(ReadableContentView, null, createElement(View, {
        pointerEvents: isReadOnly ? 'box-only' : 'auto'
      }, shouldShowInsertionPointBefore(clientId) && createElement(BlockInsertionPoint, null), createElement(BlockListBlock, {
        key: clientId,
        showTitle: false,
        clientId: clientId,
        rootClientId: this.props.rootClientId,
        onCaretVerticalPositionChange: this.onCaretVerticalPositionChange,
        isSmallScreen: !this.props.isFullyBordered
      }), !this.shouldShowInnerBlockAppender() && shouldShowInsertionPointAfter(clientId) && createElement(BlockInsertionPoint, null)));
    }
  }, {
    key: "renderBlockListFooter",
    value: function renderBlockListFooter() {
      var _this2 = this;

      var paragraphBlock = createBlock('core/paragraph');
      return createElement(Fragment, null, createElement(TouchableWithoutFeedback, {
        onPress: function onPress() {
          _this2.addBlockToEndOfPost(paragraphBlock);
        }
      }, createElement(View, {
        style: styles.blockListFooter
      })), createElement(__experimentalBlockListFooter.Slot, null));
    }
  }]);

  return BlockList;
}(Component);
export default compose([withSelect(function (select, _ref2) {
  var rootClientId = _ref2.rootClientId;

  var _select = select('core/block-editor'),
      getBlockCount = _select.getBlockCount,
      getBlockOrder = _select.getBlockOrder,
      getSelectedBlockClientId = _select.getSelectedBlockClientId,
      getBlockInsertionPoint = _select.getBlockInsertionPoint,
      isBlockInsertionPointVisible = _select.isBlockInsertionPointVisible,
      getSettings = _select.getSettings;

  var selectedBlockClientId = getSelectedBlockClientId();
  var blockClientIds = getBlockOrder(rootClientId);
  var insertionPoint = getBlockInsertionPoint();
  var blockInsertionPointIsVisible = isBlockInsertionPointVisible();

  var shouldShowInsertionPointBefore = function shouldShowInsertionPointBefore(clientId) {
    return blockInsertionPointIsVisible && insertionPoint.rootClientId === rootClientId && ( // if list is empty, show the insertion point (via the default appender)
    blockClientIds.length === 0 || // or if the insertion point is right before the denoted block
    blockClientIds[insertionPoint.index] === clientId);
  };

  var shouldShowInsertionPointAfter = function shouldShowInsertionPointAfter(clientId) {
    return blockInsertionPointIsVisible && insertionPoint.rootClientId === rootClientId && // if the insertion point is at the end of the list
    blockClientIds.length === insertionPoint.index && // and the denoted block is the last one on the list, show the indicator at the end of the block
    blockClientIds[insertionPoint.index - 1] === clientId;
  };

  var isReadOnly = getSettings().readOnly;
  return {
    blockClientIds: blockClientIds,
    blockCount: getBlockCount(rootClientId),
    isBlockInsertionPointVisible: isBlockInsertionPointVisible(),
    shouldShowInsertionPointBefore: shouldShowInsertionPointBefore,
    shouldShowInsertionPointAfter: shouldShowInsertionPointAfter,
    selectedBlockClientId: selectedBlockClientId,
    isReadOnly: isReadOnly,
    isRootList: rootClientId === undefined
  };
}), withDispatch(function (dispatch) {
  var _dispatch = dispatch('core/block-editor'),
      insertBlock = _dispatch.insertBlock,
      replaceBlock = _dispatch.replaceBlock,
      clearSelectedBlock = _dispatch.clearSelectedBlock;

  return {
    clearSelectedBlock: clearSelectedBlock,
    insertBlock: insertBlock,
    replaceBlock: replaceBlock
  };
}), withPreferredColorScheme])(BlockList);
//# sourceMappingURL=index.native.js.map