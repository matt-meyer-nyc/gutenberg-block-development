import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { Button, Dropdown, SVG, Path } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useSelect } from '@wordpress/data';
import { useShortcut } from '@wordpress/keyboard-shortcuts';
import { useCallback } from '@wordpress/element';
/**
 * Internal dependencies
 */

import BlockNavigation from './';
var MenuIcon = createElement(SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  width: "20",
  height: "20"
}, createElement(Path, {
  d: "M5 5H3v2h2V5zm3 8h11v-2H8v2zm9-8H6v2h11V5zM7 11H5v2h2v-2zm0 8h2v-2H7v2zm3-2v2h11v-2H10z"
}));

function BlockNavigationDropdownToggle(_ref) {
  var isEnabled = _ref.isEnabled,
      onToggle = _ref.onToggle,
      isOpen = _ref.isOpen;
  useShortcut('core/edit-post/toggle-block-navigation', useCallback(onToggle, [onToggle]), {
    bindGlobal: true,
    isDisabled: !isEnabled
  });
  var shortcut = useSelect(function (select) {
    return select('core/keyboard-shortcuts').getShortcutRepresentation('core/edit-post/toggle-block-navigation');
  }, []);
  return createElement(Button, {
    icon: MenuIcon,
    "aria-expanded": isOpen,
    onClick: isEnabled ? onToggle : undefined,
    label: __('Block navigation'),
    className: "block-editor-block-navigation",
    shortcut: shortcut,
    "aria-disabled": !isEnabled
  });
}

function BlockNavigationDropdown(_ref2) {
  var isDisabled = _ref2.isDisabled;
  var hasBlocks = useSelect(function (select) {
    return !!select('core/block-editor').getBlockCount();
  }, []);
  var isEnabled = hasBlocks && !isDisabled;
  return createElement(Dropdown, {
    contentClassName: "block-editor-block-navigation__popover",
    renderToggle: function renderToggle(toggleProps) {
      return createElement(BlockNavigationDropdownToggle, _extends({}, toggleProps, {
        isEnabled: isEnabled
      }));
    },
    renderContent: function renderContent(_ref3) {
      var onClose = _ref3.onClose;
      return createElement(BlockNavigation, {
        onSelect: onClose
      });
    }
  });
}

export default BlockNavigationDropdown;
//# sourceMappingURL=dropdown.js.map