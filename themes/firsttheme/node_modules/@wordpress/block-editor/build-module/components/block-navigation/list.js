import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { isNil, map, omitBy } from 'lodash';
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { Button } from '@wordpress/components';
import { __experimentalGetBlockLabel as getBlockLabel, getBlockType } from '@wordpress/blocks';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import BlockIcon from '../block-icon';
import ButtonBlockAppender from '../button-block-appender';
export default function BlockNavigationList(_ref) {
  var blocks = _ref.blocks,
      selectedBlockClientId = _ref.selectedBlockClientId,
      selectBlock = _ref.selectBlock,
      showAppender = _ref.showAppender,
      showNestedBlocks = _ref.showNestedBlocks,
      parentBlockClientId = _ref.parentBlockClientId;
  var shouldShowAppender = showAppender && !!parentBlockClientId;
  return (
    /*
     * Disable reason: The `list` ARIA role is redundant but
     * Safari+VoiceOver won't announce the list otherwise.
     */

    /* eslint-disable jsx-a11y/no-redundant-roles */
    createElement("ul", {
      className: "block-editor-block-navigation__list",
      role: "list"
    }, map(omitBy(blocks, isNil), function (block) {
      var blockType = getBlockType(block.name);
      var isSelected = block.clientId === selectedBlockClientId;
      return createElement("li", {
        key: block.clientId
      }, createElement("div", {
        className: "block-editor-block-navigation__item"
      }, createElement(Button, {
        className: classnames('block-editor-block-navigation__item-button', {
          'is-selected': isSelected
        }),
        onClick: function onClick() {
          return selectBlock(block.clientId);
        }
      }, createElement(BlockIcon, {
        icon: blockType.icon,
        showColors: true
      }), getBlockLabel(blockType, block.attributes), isSelected && createElement("span", {
        className: "screen-reader-text"
      }, __('(selected block)')))), showNestedBlocks && !!block.innerBlocks && !!block.innerBlocks.length && createElement(BlockNavigationList, {
        blocks: block.innerBlocks,
        selectedBlockClientId: selectedBlockClientId,
        selectBlock: selectBlock,
        parentBlockClientId: block.clientId,
        showAppender: showAppender,
        showNestedBlocks: true
      }));
    }), shouldShowAppender && createElement("li", null, createElement("div", {
      className: "block-editor-block-navigation__item"
    }, createElement(ButtonBlockAppender, {
      rootClientId: parentBlockClientId,
      __experimentalSelectBlockOnInsert: false
    }))))
    /* eslint-enable jsx-a11y/no-redundant-roles */

  );
}
//# sourceMappingURL=list.js.map