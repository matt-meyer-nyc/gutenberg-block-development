{"version":3,"sources":["@wordpress/block-editor/src/utils/dom.js"],"names":["getBlockDOMNode","clientId","document","getElementById","getBlockPreviewContainerDOMNode","domNode","firstChild","isBlockFocusStop","element","classList","contains","isInSameBlock","a","b","closest","isInsideRootBlock","blockElement","innerBlocksContainer","querySelector","hasInnerBlocksContext","getBlockClientId","node","nodeType","ELEMENT_NODE","parentElement","blockNode","id","slice","length"],"mappings":"AAAA;;;;;;;;;;AAUA,OAAO,SAASA,eAAT,CAA0BC,QAA1B,EAAqC;AAC3C,SAAOC,QAAQ,CAACC,cAAT,CAAyB,WAAWF,QAApC,CAAP;AACA;AAED,OAAO,SAASG,+BAAT,CAA0CH,QAA1C,EAAqD;AAC3D,MAAMI,OAAO,GAAGL,eAAe,CAAEC,QAAF,CAA/B;;AAEA,MAAK,CAAEI,OAAP,EAAiB;AAChB;AACA;;AAED,SAAOA,OAAO,CAACC,UAAR,IAAsBD,OAA7B;AACA;AAED;;;;;;;;;AAQA,OAAO,SAASE,gBAAT,CAA2BC,OAA3B,EAAqC;AAC3C,SAAOA,OAAO,CAACC,SAAR,CAAkBC,QAAlB,CAA4B,gCAA5B,CAAP;AACA;AAED;;;;;;;;;AAQA,OAAO,SAASC,aAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA+B;AACrC,SACCD,CAAC,CAACE,OAAF,CAAW,iCAAX,MACAD,CAAC,CAACC,OAAF,CAAW,iCAAX,CAFD;AAIA;AAED;;;;;;;;;AAQA,OAAO,SAASC,iBAAT,CAA4BC,YAA5B,EAA0CR,OAA1C,EAAoD;AAC1D,MAAMS,oBAAoB,GAAGD,YAAY,CAACE,aAAb,CAC5B,kCAD4B,CAA7B;AAGA,SACCF,YAAY,CAACN,QAAb,CAAuBF,OAAvB,MACE,CAAES,oBAAF,IAA0B,CAAEA,oBAAoB,CAACP,QAArB,CAA+BF,OAA/B,CAD9B,CADD;AAIA;AAED;;;;;;;;;AAQA,OAAO,SAASW,qBAAT,CAAgCX,OAAhC,EAA0C;AAChD,SAAO,CAAC,CAAEA,OAAO,CAACU,aAAR,CAAuB,kCAAvB,CAAV;AACA;AAED;;;;;;;;AAOA,OAAO,SAASE,gBAAT,CAA2BC,IAA3B,EAAkC;AACxC,MAAKA,IAAI,CAACC,QAAL,KAAkBD,IAAI,CAACE,YAA5B,EAA2C;AAC1CF,IAAAA,IAAI,GAAGA,IAAI,CAACG,aAAZ;AACA;;AAED,MAAMC,SAAS,GAAGJ,IAAI,CAACP,OAAL,CAAc,WAAd,CAAlB;;AAEA,MAAK,CAAEW,SAAP,EAAmB;AAClB;AACA;;AAED,SAAOA,SAAS,CAACC,EAAV,CAAaC,KAAb,CAAoB,SAASC,MAA7B,CAAP;AACA","sourcesContent":["/**\n * Given a block client ID, returns the corresponding DOM node for the block,\n * if exists. As much as possible, this helper should be avoided, and used only\n * in cases where isolated behaviors need remote access to a block node.\n *\n * @param {string} clientId Block client ID.\n * @param {Element} scope an optional DOM Element to which the selector should be scoped\n *\n * @return {Element} Block DOM node.\n */\nexport function getBlockDOMNode( clientId ) {\n\treturn document.getElementById( 'block-' + clientId );\n}\n\nexport function getBlockPreviewContainerDOMNode( clientId ) {\n\tconst domNode = getBlockDOMNode( clientId );\n\n\tif ( ! domNode ) {\n\t\treturn;\n\t}\n\n\treturn domNode.firstChild || domNode;\n}\n\n/**\n * Returns true if the given HTMLElement is a block focus stop. Blocks without\n * their own text fields rely on the focus stop to be keyboard navigable.\n *\n * @param {HTMLElement} element Element to test.\n *\n * @return {boolean} Whether element is a block focus stop.\n */\nexport function isBlockFocusStop( element ) {\n\treturn element.classList.contains( 'block-editor-block-list__block' );\n}\n\n/**\n * Returns true if two elements are contained within the same block.\n *\n * @param {HTMLElement} a First element.\n * @param {HTMLElement} b Second element.\n *\n * @return {boolean} Whether elements are in the same block.\n */\nexport function isInSameBlock( a, b ) {\n\treturn (\n\t\ta.closest( '.block-editor-block-list__block' ) ===\n\t\tb.closest( '.block-editor-block-list__block' )\n\t);\n}\n\n/**\n * Returns true if an elements is considered part of the block and not its children.\n *\n * @param {HTMLElement} blockElement Block container element.\n * @param {HTMLElement} element      Element.\n *\n * @return {boolean} Whether element is in the block Element but not its children.\n */\nexport function isInsideRootBlock( blockElement, element ) {\n\tconst innerBlocksContainer = blockElement.querySelector(\n\t\t'.block-editor-block-list__layout'\n\t);\n\treturn (\n\t\tblockElement.contains( element ) &&\n\t\t( ! innerBlocksContainer || ! innerBlocksContainer.contains( element ) )\n\t);\n}\n\n/**\n * Returns true if the given HTMLElement contains inner blocks (an InnerBlocks\n * element).\n *\n * @param {HTMLElement} element Element to test.\n *\n * @return {boolean} Whether element contains inner blocks.\n */\nexport function hasInnerBlocksContext( element ) {\n\treturn !! element.querySelector( '.block-editor-block-list__layout' );\n}\n\n/**\n * Finds the block client ID given any DOM node inside the block.\n *\n * @param {Node} node DOM node.\n *\n * @return {string|undefined} Client ID or undefined if the node is not part of a block.\n */\nexport function getBlockClientId( node ) {\n\tif ( node.nodeType !== node.ELEMENT_NODE ) {\n\t\tnode = node.parentElement;\n\t}\n\n\tconst blockNode = node.closest( '.wp-block' );\n\n\tif ( ! blockNode ) {\n\t\treturn;\n\t}\n\n\treturn blockNode.id.slice( 'block-'.length );\n}\n"]}