{"version":3,"sources":["@wordpress/core-data/src/entities.js"],"names":["loadPostTypeEntities","loadTaxonomyEntities","getKindEntities","upperFirst","camelCase","map","find","addEntities","apiFetch","select","DEFAULT_ENTITY_KEY","defaultEntities","name","kind","baseURL","key","plural","transientEdits","blocks","kinds","loadEntities","path","postTypes","postType","rest_base","selectionStart","selectionEnd","mergedEdits","meta","taxonomies","taxonomy","getMethodName","prefix","usePlural","entity","kindPrefix","nameSuffix","suffix","entities","length","kindConfig"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { upperFirst, camelCase, map, find } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport { addEntities } from './actions';\nimport { apiFetch, select } from './controls';\n\nexport const DEFAULT_ENTITY_KEY = 'id';\n\nexport const defaultEntities = [\n\t{ name: 'site', kind: 'root', baseURL: '/wp/v2/settings' },\n\t{ name: 'postType', kind: 'root', key: 'slug', baseURL: '/wp/v2/types' },\n\t{\n\t\tname: 'media',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/media',\n\t\tplural: 'mediaItems',\n\t},\n\t{\n\t\tname: 'taxonomy',\n\t\tkind: 'root',\n\t\tkey: 'slug',\n\t\tbaseURL: '/wp/v2/taxonomies',\n\t\tplural: 'taxonomies',\n\t},\n\t{\n\t\tname: 'widgetArea',\n\t\tkind: 'root',\n\t\tbaseURL: '/__experimental/widget-areas',\n\t\tplural: 'widgetAreas',\n\t\ttransientEdits: { blocks: true },\n\t},\n\t{ name: 'user', kind: 'root', baseURL: '/wp/v2/users', plural: 'users' },\n];\n\nexport const kinds = [\n\t{ name: 'postType', loadEntities: loadPostTypeEntities },\n\t{ name: 'taxonomy', loadEntities: loadTaxonomyEntities },\n];\n\n/**\n * Returns the list of post type entities.\n *\n * @return {Promise} Entities promise\n */\nfunction* loadPostTypeEntities() {\n\tconst postTypes = yield apiFetch( { path: '/wp/v2/types?context=edit' } );\n\treturn map( postTypes, ( postType, name ) => {\n\t\treturn {\n\t\t\tkind: 'postType',\n\t\t\tbaseURL: '/wp/v2/' + postType.rest_base,\n\t\t\tname,\n\t\t\ttransientEdits: {\n\t\t\t\tblocks: true,\n\t\t\t\tselectionStart: true,\n\t\t\t\tselectionEnd: true,\n\t\t\t},\n\t\t\tmergedEdits: { meta: true },\n\t\t};\n\t} );\n}\n\n/**\n * Returns the list of the taxonomies entities.\n *\n * @return {Promise} Entities promise\n */\nfunction* loadTaxonomyEntities() {\n\tconst taxonomies = yield apiFetch( {\n\t\tpath: '/wp/v2/taxonomies?context=edit',\n\t} );\n\treturn map( taxonomies, ( taxonomy, name ) => {\n\t\treturn {\n\t\t\tkind: 'taxonomy',\n\t\t\tbaseURL: '/wp/v2/' + taxonomy.rest_base,\n\t\t\tname,\n\t\t};\n\t} );\n}\n\n/**\n * Returns the entity's getter method name given its kind and name.\n *\n * @param {string}  kind      Entity kind.\n * @param {string}  name      Entity name.\n * @param {string}  prefix    Function prefix.\n * @param {boolean} usePlural Whether to use the plural form or not.\n *\n * @return {string} Method name\n */\nexport const getMethodName = (\n\tkind,\n\tname,\n\tprefix = 'get',\n\tusePlural = false\n) => {\n\tconst entity = find( defaultEntities, { kind, name } );\n\tconst kindPrefix = kind === 'root' ? '' : upperFirst( camelCase( kind ) );\n\tconst nameSuffix =\n\t\tupperFirst( camelCase( name ) ) + ( usePlural ? 's' : '' );\n\tconst suffix =\n\t\tusePlural && entity.plural\n\t\t\t? upperFirst( camelCase( entity.plural ) )\n\t\t\t: nameSuffix;\n\treturn `${ prefix }${ kindPrefix }${ suffix }`;\n};\n\n/**\n * Loads the kind entities into the store.\n *\n * @param {string} kind  Kind\n *\n * @return {Array} Entities\n */\nexport function* getKindEntities( kind ) {\n\tlet entities = yield select( 'getEntitiesByKind', kind );\n\tif ( entities && entities.length !== 0 ) {\n\t\treturn entities;\n\t}\n\n\tconst kindConfig = find( kinds, { name: kind } );\n\tif ( ! kindConfig ) {\n\t\treturn [];\n\t}\n\n\tentities = yield kindConfig.loadEntities();\n\tyield addEntities( entities );\n\n\treturn entities;\n}\n"]}