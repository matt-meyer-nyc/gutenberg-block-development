{"version":3,"sources":["@wordpress/block-directory/src/store/actions.js"],"names":["downloadBlock","installBlock","uninstallBlock","getBlockTypes","apiFetch","loadAssets","fetchDownloadableBlocks","type","receiveDownloadableBlocks","downloadableBlocks","filterValue","setInstallBlocksPermission","hasPermission","item","onSuccess","onError","assets","length","Error","registeredBlocks","id","name","path","data","slug","method","response","success","errorMessage","addInstalledBlockType","removeInstalledBlockType"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { getBlockTypes } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { apiFetch, loadAssets } from './controls';\n\n/**\n * Returns an action object used in signalling that the downloadable blocks have been requested and is loading.\n *\n * @return {Object} Action object.\n */\nexport function fetchDownloadableBlocks() {\n\treturn { type: 'FETCH_DOWNLOADABLE_BLOCKS' };\n}\n\n/**\n * Returns an action object used in signalling that the downloadable blocks have been updated.\n *\n * @param {Array} downloadableBlocks Downloadable blocks.\n * @param {string} filterValue Search string.\n *\n * @return {Object} Action object.\n */\nexport function receiveDownloadableBlocks( downloadableBlocks, filterValue ) {\n\treturn {\n\t\ttype: 'RECEIVE_DOWNLOADABLE_BLOCKS',\n\t\tdownloadableBlocks,\n\t\tfilterValue,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user does not have permission to install blocks.\n *\n @param {boolean} hasPermission User has permission to install blocks.\n *\n * @return {Object} Action object.\n */\nexport function setInstallBlocksPermission( hasPermission ) {\n\treturn { type: 'SET_INSTALL_BLOCKS_PERMISSION', hasPermission };\n}\n\n/**\n * Action triggered to download block assets.\n *\n * @param {Object} item The selected block item\n * @param {Function} onSuccess The callback function when the action has succeeded.\n * @param {Function} onError The callback function when the action has failed.\n */\nexport function* downloadBlock( item, onSuccess, onError ) {\n\ttry {\n\t\tif ( ! item.assets.length ) {\n\t\t\tthrow new Error( 'Block has no assets' );\n\t\t}\n\n\t\tyield loadAssets( item.assets );\n\t\tconst registeredBlocks = getBlockTypes();\n\t\tif ( registeredBlocks.length ) {\n\t\t\tonSuccess( item );\n\t\t} else {\n\t\t\tthrow new Error( 'Unable to get block types' );\n\t\t}\n\t} catch ( error ) {\n\t\tyield onError( error );\n\t}\n}\n\n/**\n * Action triggered to install a block plugin.\n *\n * @param {string} item The block item returned by search.\n * @param {Function} onSuccess The callback function when the action has succeeded.\n * @param {Function} onError The callback function when the action has failed.\n *\n */\nexport function* installBlock( { id, name }, onSuccess, onError ) {\n\ttry {\n\t\tconst response = yield apiFetch( {\n\t\t\tpath: '__experimental/block-directory/install',\n\t\t\tdata: {\n\t\t\t\tslug: id,\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t} );\n\t\tif ( response.success === false ) {\n\t\t\tthrow new Error( response.errorMessage );\n\t\t}\n\t\tyield addInstalledBlockType( { id, name } );\n\t\tonSuccess();\n\t} catch ( error ) {\n\t\tonError( error );\n\t}\n}\n\n/**\n * Action triggered to uninstall a block plugin.\n *\n * @param {string} item The block item returned by search.\n * @param {Function} onSuccess The callback function when the action has succeeded.\n * @param {Function} onError The callback function when the action has failed.\n *\n */\nexport function* uninstallBlock( { id, name }, onSuccess, onError ) {\n\ttry {\n\t\tconst response = yield apiFetch( {\n\t\t\tpath: '__experimental/block-directory/uninstall',\n\t\t\tdata: {\n\t\t\t\tslug: id,\n\t\t\t},\n\t\t\tmethod: 'DELETE',\n\t\t} );\n\t\tif ( response.success === false ) {\n\t\t\tthrow new Error( response.errorMessage );\n\t\t}\n\t\tyield removeInstalledBlockType( { id, name } );\n\t\tonSuccess();\n\t} catch ( error ) {\n\t\tonError( error );\n\t}\n}\n\n/**\n * Returns an action object used to add a newly installed block type.\n *\n * @param {string} item The block item with the block id and name.\n *\n * @return {Object} Action object.\n */\nexport function addInstalledBlockType( item ) {\n\treturn {\n\t\ttype: 'ADD_INSTALLED_BLOCK_TYPE',\n\t\titem,\n\t};\n}\n\n/**\n * Returns an action object used to remove a newly installed block type.\n *\n * @param {string} item The block item with the block id and name.\n *\n * @return {Object} Action object.\n */\nexport function removeInstalledBlockType( item ) {\n\treturn {\n\t\ttype: 'REMOVE_INSTALLED_BLOCK_TYPE',\n\t\titem,\n\t};\n}\n"]}