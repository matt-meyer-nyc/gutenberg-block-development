{"version":3,"sources":["@wordpress/core-data/src/selectors.js"],"names":["createSelector","map","find","get","filter","compact","defaultTo","createRegistrySelector","deprecated","REDUCER_KEY","getQueriedItems","isRequestingEmbedPreview","select","state","url","isResolving","getAuthors","getUserQueryResults","getCurrentUser","currentUser","queryID","queryResults","users","queries","id","byId","getEntitiesByKind","kind","entities","config","getEntity","name","getEntityRecord","key","data","__experimentalGetEntityRecordNoResolver","getRawEntityRecord","record","Object","keys","reduce","accumulator","_key","getEntityRecords","query","queriedState","getEntityRecordChangesByRecord","acc","forEach","editsKeys","edits","editsKey","hasEditsForEntityRecord","length","rawRecord","getEntityRecordNonTransientEdits","getEntityRecordEdits","recordId","transientEdits","isSavingEntityRecord","getEditedEntityRecord","isAutosavingEntityRecord","pending","isAutosave","Boolean","getLastEntitySaveError","getCurrentUndoOffset","undo","offset","getUndoEdit","getRedoEdit","hasUndo","hasRedo","getThemeSupports","themeSupports","getEmbedPreview","embedPreviews","isPreviewEmbedFallback","preview","oEmbedLinkCheck","html","hasUploadPermissions","alternative","canUser","action","resource","join","getAutosaves","postType","postId","autosaves","getAutosave","authorId","undefined","author","hasFetchedAutosaves","hasFinishedResolution","getReferenceByDistinctEdits"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { map, find, get, filter, compact, defaultTo } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { REDUCER_KEY } from './name';\nimport { getQueriedItems } from './queried-data';\n\n/**\n * Returns true if a request is in progress for embed preview data, or false\n * otherwise.\n *\n * @param {Object} state Data state.\n * @param {string} url   URL the preview would be for.\n *\n * @return {boolean} Whether a request is in progress for an embed preview.\n */\nexport const isRequestingEmbedPreview = createRegistrySelector(\n\t( select ) => ( state, url ) => {\n\t\treturn select( 'core/data' ).isResolving(\n\t\t\tREDUCER_KEY,\n\t\t\t'getEmbedPreview',\n\t\t\t[ url ]\n\t\t);\n\t}\n);\n\n/**\n * Returns all available authors.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Authors list.\n */\nexport function getAuthors( state ) {\n\treturn getUserQueryResults( state, 'authors' );\n}\n\n/**\n * Returns the current user.\n *\n * @param {Object} state Data state.\n *\n * @return {Object} Current user object.\n */\nexport function getCurrentUser( state ) {\n\treturn state.currentUser;\n}\n\n/**\n * Returns all the users returned by a query ID.\n *\n * @param {Object} state   Data state.\n * @param {string} queryID Query ID.\n *\n * @return {Array} Users list.\n */\nexport const getUserQueryResults = createSelector(\n\t( state, queryID ) => {\n\t\tconst queryResults = state.users.queries[ queryID ];\n\n\t\treturn map( queryResults, ( id ) => state.users.byId[ id ] );\n\t},\n\t( state, queryID ) => [ state.users.queries[ queryID ], state.users.byId ]\n);\n\n/**\n * Returns whether the entities for the give kind are loaded.\n *\n * @param {Object} state   Data state.\n * @param {string} kind  Entity kind.\n *\n * @return {boolean} Whether the entities are loaded\n */\nexport function getEntitiesByKind( state, kind ) {\n\treturn filter( state.entities.config, { kind } );\n}\n\n/**\n * Returns the entity object given its kind and name.\n *\n * @param {Object} state   Data state.\n * @param {string} kind  Entity kind.\n * @param {string} name  Entity name.\n *\n * @return {Object} Entity\n */\nexport function getEntity( state, kind, name ) {\n\treturn find( state.entities.config, { kind, name } );\n}\n\n/**\n * Returns the Entity's record object by key.\n *\n * @param {Object} state  State tree\n * @param {string} kind   Entity kind.\n * @param {string} name   Entity name.\n * @param {number} key    Record's key\n *\n * @return {Object?} Record.\n */\nexport function getEntityRecord( state, kind, name, key ) {\n\treturn get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'queriedData',\n\t\t'items',\n\t\tkey,\n\t] );\n}\n\n/**\n * Returns the Entity's record object by key. Doesn't trigger a resolver nor requests the entity from the API if the entity record isn't available in the local state.\n *\n * @param {Object} state  State tree\n * @param {string} kind   Entity kind.\n * @param {string} name   Entity name.\n * @param {number} key    Record's key\n *\n * @return {Object?} Record.\n */\nexport function __experimentalGetEntityRecordNoResolver(\n\tstate,\n\tkind,\n\tname,\n\tkey\n) {\n\treturn getEntityRecord( state, kind, name, key );\n}\n\n/**\n * Returns the entity's record object by key,\n * with its attributes mapped to their raw values.\n *\n * @param {Object} state  State tree.\n * @param {string} kind   Entity kind.\n * @param {string} name   Entity name.\n * @param {number} key    Record's key.\n *\n * @return {Object?} Object with the entity's raw attributes.\n */\nexport const getRawEntityRecord = createSelector(\n\t( state, kind, name, key ) => {\n\t\tconst record = getEntityRecord( state, kind, name, key );\n\t\treturn (\n\t\t\trecord &&\n\t\t\tObject.keys( record ).reduce( ( accumulator, _key ) => {\n\t\t\t\t// Because edits are the \"raw\" attribute values,\n\t\t\t\t// we return those from record selectors to make rendering,\n\t\t\t\t// comparisons, and joins with edits easier.\n\t\t\t\taccumulator[ _key ] = get(\n\t\t\t\t\trecord[ _key ],\n\t\t\t\t\t'raw',\n\t\t\t\t\trecord[ _key ]\n\t\t\t\t);\n\t\t\t\treturn accumulator;\n\t\t\t}, {} )\n\t\t);\n\t},\n\t( state ) => [ state.entities.data ]\n);\n\n/**\n * Returns the Entity's records.\n *\n * @param {Object}  state  State tree\n * @param {string}  kind   Entity kind.\n * @param {string}  name   Entity name.\n * @param {?Object} query  Optional terms query.\n *\n * @return {Array} Records.\n */\nexport function getEntityRecords( state, kind, name, query ) {\n\tconst queriedState = get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'queriedData',\n\t] );\n\tif ( ! queriedState ) {\n\t\treturn [];\n\t}\n\treturn getQueriedItems( queriedState, query );\n}\n\n/**\n * Returns a map of objects with each edited\n * raw entity record and its corresponding edits.\n *\n * The map is keyed by entity `kind => name => key => { rawRecord, edits }`.\n *\n * @param {Object} state State tree.\n *\n * @return {{ [kind: string]: { [name: string]: { [key: string]: { rawRecord: Object<string,*>, edits: Object<string,*> } } } }} The map of edited records with their edits.\n */\nexport const getEntityRecordChangesByRecord = createSelector(\n\t( state ) => {\n\t\tconst {\n\t\t\tentities: { data },\n\t\t} = state;\n\t\treturn Object.keys( data ).reduce( ( acc, kind ) => {\n\t\t\tObject.keys( data[ kind ] ).forEach( ( name ) => {\n\t\t\t\tconst editsKeys = Object.keys(\n\t\t\t\t\tdata[ kind ][ name ].edits\n\t\t\t\t).filter( ( editsKey ) =>\n\t\t\t\t\thasEditsForEntityRecord( state, kind, name, editsKey )\n\t\t\t\t);\n\t\t\t\tif ( editsKeys.length ) {\n\t\t\t\t\tif ( ! acc[ kind ] ) {\n\t\t\t\t\t\tacc[ kind ] = {};\n\t\t\t\t\t}\n\t\t\t\t\tif ( ! acc[ kind ][ name ] ) {\n\t\t\t\t\t\tacc[ kind ][ name ] = {};\n\t\t\t\t\t}\n\t\t\t\t\teditsKeys.forEach(\n\t\t\t\t\t\t( editsKey ) =>\n\t\t\t\t\t\t\t( acc[ kind ][ name ][ editsKey ] = {\n\t\t\t\t\t\t\t\trawRecord: getRawEntityRecord(\n\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\teditsKey\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tedits: getEntityRecordNonTransientEdits(\n\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\teditsKey\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn acc;\n\t\t}, {} );\n\t},\n\t( state ) => [ state.entities.data ]\n);\n\n/**\n * Returns the specified entity record's edits.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's edits.\n */\nexport function getEntityRecordEdits( state, kind, name, recordId ) {\n\treturn get( state.entities.data, [ kind, name, 'edits', recordId ] );\n}\n\n/**\n * Returns the specified entity record's non transient edits.\n *\n * Transient edits don't create an undo level, and\n * are not considered for change detection.\n * They are defined in the entity's config.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's non transient edits.\n */\nexport const getEntityRecordNonTransientEdits = createSelector(\n\t( state, kind, name, recordId ) => {\n\t\tconst { transientEdits } = getEntity( state, kind, name ) || {};\n\t\tconst edits = getEntityRecordEdits( state, kind, name, recordId ) || {};\n\t\tif ( ! transientEdits ) {\n\t\t\treturn edits;\n\t\t}\n\t\treturn Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\tif ( ! transientEdits[ key ] ) {\n\t\t\t\tacc[ key ] = edits[ key ];\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, {} );\n\t},\n\t( state ) => [ state.entities.config, state.entities.data ]\n);\n\n/**\n * Returns true if the specified entity record has edits,\n * and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record has edits or not.\n */\nexport function hasEditsForEntityRecord( state, kind, name, recordId ) {\n\treturn (\n\t\tisSavingEntityRecord( state, kind, name, recordId ) ||\n\t\tObject.keys(\n\t\t\tgetEntityRecordNonTransientEdits( state, kind, name, recordId )\n\t\t).length > 0\n\t);\n}\n\n/**\n * Returns the specified entity record, merged with its edits.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record, merged with its edits.\n */\nexport const getEditedEntityRecord = createSelector(\n\t( state, kind, name, recordId ) => ( {\n\t\t...getRawEntityRecord( state, kind, name, recordId ),\n\t\t...getEntityRecordEdits( state, kind, name, recordId ),\n\t} ),\n\t( state ) => [ state.entities.data ]\n);\n\n/**\n * Returns true if the specified entity record is autosaving, and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record is autosaving or not.\n */\nexport function isAutosavingEntityRecord( state, kind, name, recordId ) {\n\tconst { pending, isAutosave } = get(\n\t\tstate.entities.data,\n\t\t[ kind, name, 'saving', recordId ],\n\t\t{}\n\t);\n\treturn Boolean( pending && isAutosave );\n}\n\n/**\n * Returns true if the specified entity record is saving, and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record is saving or not.\n */\nexport function isSavingEntityRecord( state, kind, name, recordId ) {\n\treturn get(\n\t\tstate.entities.data,\n\t\t[ kind, name, 'saving', recordId, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns the specified entity record's last save error.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's save error.\n */\nexport function getLastEntitySaveError( state, kind, name, recordId ) {\n\treturn get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'saving',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the current undo offset for the\n * entity records edits history. The offset\n * represents how many items from the end\n * of the history stack we are at. 0 is the\n * last edit, -1 is the second last, and so on.\n *\n * @param {Object} state State tree.\n *\n * @return {number} The current undo offset.\n */\nfunction getCurrentUndoOffset( state ) {\n\treturn state.undo.offset;\n}\n\n/**\n * Returns the previous edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param {Object} state State tree.\n *\n * @return {Object?} The edit.\n */\nexport function getUndoEdit( state ) {\n\treturn state.undo[ state.undo.length - 2 + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns the next edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param {Object} state State tree.\n *\n * @return {Object?} The edit.\n */\nexport function getRedoEdit( state ) {\n\treturn state.undo[ state.undo.length + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns true if there is a previous edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param {Object} state State tree.\n *\n * @return {boolean} Whether there is a previous edit or not.\n */\nexport function hasUndo( state ) {\n\treturn Boolean( getUndoEdit( state ) );\n}\n\n/**\n * Returns true if there is a next edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param {Object} state State tree.\n *\n * @return {boolean} Whether there is a next edit or not.\n */\nexport function hasRedo( state ) {\n\treturn Boolean( getRedoEdit( state ) );\n}\n\n/**\n * Return theme supports data in the index.\n *\n * @param {Object} state Data state.\n *\n * @return {*}           Index data.\n */\nexport function getThemeSupports( state ) {\n\treturn state.themeSupports;\n}\n\n/**\n * Returns the embed preview for the given URL.\n *\n * @param {Object} state    Data state.\n * @param {string} url      Embedded URL.\n *\n * @return {*} Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.\n */\nexport function getEmbedPreview( state, url ) {\n\treturn state.embedPreviews[ url ];\n}\n\n/**\n * Determines if the returned preview is an oEmbed link fallback.\n *\n * WordPress can be configured to return a simple link to a URL if it is not embeddable.\n * We need to be able to determine if a URL is embeddable or not, based on what we\n * get back from the oEmbed preview API.\n *\n * @param {Object} state    Data state.\n * @param {string} url      Embedded URL.\n *\n * @return {boolean} Is the preview for the URL an oEmbed link fallback.\n */\nexport function isPreviewEmbedFallback( state, url ) {\n\tconst preview = state.embedPreviews[ url ];\n\tconst oEmbedLinkCheck = '<a href=\"' + url + '\">' + url + '</a>';\n\tif ( ! preview ) {\n\t\treturn false;\n\t}\n\treturn preview.html === oEmbedLinkCheck;\n}\n\n/**\n * Returns whether the current user can upload media.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @deprecated since 5.0. Callers should use the more generic `canUser()` selector instead of\n *             `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`.\n *\n * @param {Object} state Data state.\n *\n * @return {boolean} Whether or not the user can upload media. Defaults to `true` if the OPTIONS\n *                   request is being made.\n */\nexport function hasUploadPermissions( state ) {\n\tdeprecated( \"select( 'core' ).hasUploadPermissions()\", {\n\t\talternative: \"select( 'core' ).canUser( 'create', 'media' )\",\n\t} );\n\treturn defaultTo( canUser( state, 'create', 'media' ), true );\n}\n\n/**\n * Returns whether the current user can perform the given action on the given\n * REST resource.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param {Object}   state            Data state.\n * @param {string}   action           Action to check. One of: 'create', 'read', 'update', 'delete'.\n * @param {string}   resource         REST resource to check, e.g. 'media' or 'posts'.\n * @param {string=}  id               Optional ID of the rest resource to check.\n *\n * @return {boolean|undefined} Whether or not the user can perform the action,\n *                             or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUser( state, action, resource, id ) {\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\treturn get( state, [ 'userPermissions', key ] );\n}\n\n/**\n * Returns the latest autosaves for the post.\n *\n * May return multiple autosaves since the backend stores one autosave per\n * author for each post.\n *\n * @param {Object} state    State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n *\n * @return {?Array} An array of autosaves for the post, or undefined if there is none.\n */\nexport function getAutosaves( state, postType, postId ) {\n\treturn state.autosaves[ postId ];\n}\n\n/**\n * Returns the autosave for the post and author.\n *\n * @param {Object} state    State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n * @param {number} authorId The id of the author.\n *\n * @return {?Object} The autosave for the post and author.\n */\nexport function getAutosave( state, postType, postId, authorId ) {\n\tif ( authorId === undefined ) {\n\t\treturn;\n\t}\n\n\tconst autosaves = state.autosaves[ postId ];\n\treturn find( autosaves, { author: authorId } );\n}\n\n/**\n * Returns true if the REST request for autosaves has completed.\n *\n * @param {Object} state State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n *\n * @return {boolean} True if the REST request was completed. False otherwise.\n */\nexport const hasFetchedAutosaves = createRegistrySelector(\n\t( select ) => ( state, postType, postId ) => {\n\t\treturn select( REDUCER_KEY ).hasFinishedResolution( 'getAutosaves', [\n\t\t\tpostType,\n\t\t\tpostId,\n\t\t] );\n\t}\n);\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param {Object} state Editor state.\n *\n * @return {*} A value whose reference will change only when an edit occurs.\n */\nexport const getReferenceByDistinctEdits = createSelector(\n\t() => [],\n\t( state ) => [ state.undo.length, state.undo.offset ]\n);\n"]}