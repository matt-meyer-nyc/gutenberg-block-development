import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useState, createRef } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
import { speak } from '@wordpress/a11y';
import { FormFileUpload, NavigableMenu, MenuItem, ToolbarGroup, Button, Dropdown, withNotices } from '@wordpress/components';
import { LEFT, RIGHT, UP, DOWN, BACKSPACE, ENTER } from '@wordpress/keycodes';
import { useSelect } from '@wordpress/data';
import { compose } from '@wordpress/compose';
import { link, upload } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import MediaUpload from '../media-upload';
import MediaUploadCheck from '../media-upload/check';
import LinkEditor from '../url-popover/link-editor';
import LinkViewer from '../url-popover/link-viewer';

var MediaReplaceFlow = function MediaReplaceFlow(_ref) {
  var mediaURL = _ref.mediaURL,
      mediaId = _ref.mediaId,
      allowedTypes = _ref.allowedTypes,
      accept = _ref.accept,
      onSelect = _ref.onSelect,
      onSelectURL = _ref.onSelectURL,
      onError = _ref.onError,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? __('Replace') : _ref$name;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      showURLInput = _useState2[0],
      setShowURLInput = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      showEditURLInput = _useState4[0],
      setShowEditURLInput = _useState4[1];

  var _useState5 = useState(mediaURL),
      _useState6 = _slicedToArray(_useState5, 2),
      mediaURLValue = _useState6[0],
      setMediaURLValue = _useState6[1];

  var mediaUpload = useSelect(function (select) {
    return select('core/block-editor').getSettings().mediaUpload;
  }, []);
  var editMediaButtonRef = createRef();

  var stopPropagation = function stopPropagation(event) {
    event.stopPropagation();
  };

  var stopPropagationRelevantKeys = function stopPropagationRelevantKeys(event) {
    if ([LEFT, DOWN, RIGHT, UP, BACKSPACE, ENTER].indexOf(event.keyCode) > -1) {
      // Stop the key event from propagating up to ObserveTyping.startTypingInTextField.
      event.stopPropagation();
    }
  };

  var selectMedia = function selectMedia(media) {
    onSelect(media);
    setMediaURLValue(media.url);
    speak(__('The media file has been replaced'));
  };

  var selectURL = function selectURL(newURL) {
    onSelectURL(newURL);
    setShowEditURLInput(false);
  };

  var uploadFiles = function uploadFiles(event, closeDropdown) {
    var files = event.target.files;

    var setMedia = function setMedia(_ref2) {
      var _ref3 = _slicedToArray(_ref2, 1),
          media = _ref3[0];

      selectMedia(media);
      closeDropdown();
    };

    mediaUpload({
      allowedTypes: allowedTypes,
      filesList: files,
      onFileChange: setMedia,
      onError: onError
    });
  };

  var openOnArrowDown = function openOnArrowDown(event) {
    if (event.keyCode === DOWN) {
      event.preventDefault();
      event.stopPropagation();
      event.target.click();
    }
  };

  var urlInputUIContent;

  if (showEditURLInput) {
    urlInputUIContent = createElement(LinkEditor, {
      onKeyDown: stopPropagationRelevantKeys,
      onKeyPress: stopPropagation,
      value: mediaURLValue,
      isFullWidthInput: true,
      hasInputBorder: true,
      onChangeInputValue: function onChangeInputValue(url) {
        return setMediaURLValue(url);
      },
      onSubmit: function onSubmit(event) {
        event.preventDefault();
        selectURL(mediaURLValue);
        editMediaButtonRef.current.focus();
      }
    });
  } else {
    urlInputUIContent = createElement(LinkViewer, {
      isFullWidth: true,
      className: "block-editor-media-replace-flow__link-viewer",
      url: mediaURLValue,
      onEditLinkClick: function onEditLinkClick() {
        return setShowEditURLInput(!showEditURLInput);
      }
    });
  }

  return createElement(Dropdown, {
    contentClassName: "block-editor-media-replace-flow__options",
    renderToggle: function renderToggle(_ref4) {
      var isOpen = _ref4.isOpen,
          onToggle = _ref4.onToggle;
      return createElement(ToolbarGroup, {
        className: "media-replace-flow"
      }, createElement(Button, {
        ref: editMediaButtonRef,
        "aria-expanded": isOpen,
        onClick: onToggle,
        onKeyDown: openOnArrowDown
      }, name, createElement("span", {
        className: "block-editor-media-replace-flow__indicator"
      })));
    },
    renderContent: function renderContent(_ref5) {
      var onClose = _ref5.onClose;
      return createElement(Fragment, null, createElement(NavigableMenu, null, createElement(MediaUpload, {
        value: mediaId,
        onSelect: function onSelect(media) {
          return selectMedia(media);
        },
        allowedTypes: allowedTypes,
        render: function render(_ref6) {
          var open = _ref6.open;
          return createElement(MenuItem, {
            icon: "admin-media",
            onClick: open
          }, __('Open Media Library'));
        }
      }), createElement(MediaUploadCheck, null, createElement(FormFileUpload, {
        onChange: function onChange(event) {
          uploadFiles(event, onClose);
        },
        accept: accept,
        render: function render(_ref7) {
          var openFileDialog = _ref7.openFileDialog;
          return createElement(MenuItem, {
            icon: upload,
            onClick: function onClick() {
              openFileDialog();
            }
          }, __('Upload'));
        }
      })), onSelectURL && createElement(MenuItem, {
        icon: link,
        onClick: function onClick() {
          return setShowURLInput(!showURLInput);
        },
        "aria-expanded": showURLInput
      }, createElement("div", null, " ", __('Insert from URL'), " "))), showURLInput && createElement("div", {
        className: "block-editor-media-flow__url-input"
      }, urlInputUIContent));
    }
  });
};

export default compose(withNotices)(MediaReplaceFlow);
//# sourceMappingURL=index.js.map