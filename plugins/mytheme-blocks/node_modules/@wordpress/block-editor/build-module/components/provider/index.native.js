import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";

/**
 * External dependencies
 */
import { last, noop } from 'lodash';
/**
 * WordPress dependencies
 */

import { Component } from '@wordpress/element';
import { withDispatch } from '@wordpress/data';
import { compose } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import withRegistryProvider from './with-registry-provider';
/** @typedef {import('@wordpress/data').WPDataRegistry} WPDataRegistry */

var BlockEditorProvider =
/*#__PURE__*/
function (_Component) {
  _inherits(BlockEditorProvider, _Component);

  function BlockEditorProvider() {
    _classCallCheck(this, BlockEditorProvider);

    return _possibleConstructorReturn(this, _getPrototypeOf(BlockEditorProvider).apply(this, arguments));
  }

  _createClass(BlockEditorProvider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.updateSettings(this.props.settings);
      this.props.resetBlocks(this.props.value);
      this.attachChangeObserver(this.props.registry);
      this.isSyncingOutcomingValue = [];
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props = this.props,
          settings = _this$props.settings,
          updateSettings = _this$props.updateSettings,
          value = _this$props.value,
          resetBlocks = _this$props.resetBlocks,
          selectionStart = _this$props.selectionStart,
          selectionEnd = _this$props.selectionEnd,
          resetSelection = _this$props.resetSelection,
          registry = _this$props.registry;

      if (settings !== prevProps.settings) {
        updateSettings(settings);
      }

      if (registry !== prevProps.registry) {
        this.attachChangeObserver(registry);
      }

      if (this.isSyncingOutcomingValue.includes(value)) {
        // Skip block reset if the value matches expected outbound sync
        // triggered by this component by a preceding change detection.
        // Only skip if the value matches expectation, since a reset should
        // still occur if the value is modified (not equal by reference),
        // to allow that the consumer may apply modifications to reflect
        // back on the editor.
        if (last(this.isSyncingOutcomingValue) === value) {
          this.isSyncingOutcomingValue = [];
        }
      } else if (value !== prevProps.value) {
        // Reset changing value in all other cases than the sync described
        // above. Since this can be reached in an update following an out-
        // bound sync, unset the outbound value to avoid considering it in
        // subsequent renders.
        this.isSyncingOutcomingValue = [];
        this.isSyncingIncomingValue = value;
        resetBlocks(value);

        if (selectionStart && selectionEnd) {
          resetSelection(selectionStart, selectionEnd);
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.unsubscribe) {
        this.unsubscribe();
      }
    }
    /**
     * Given a registry object, overrides the default dispatch behavior for the
     * `core/block-editor` store to interpret a state change and decide whether
     * we should call `onChange` or `onInput` depending on whether the change
     * is persistent or not.
     *
     * This needs to be done synchronously after state changes (instead of using
     * `componentDidUpdate`) in order to avoid batching these changes.
     *
     * @param {WPDataRegistry} registry Registry from which block editor
     *                                  dispatch is to be overridden.
     */

  }, {
    key: "attachChangeObserver",
    value: function attachChangeObserver(registry) {
      var _this = this;

      if (this.unsubscribe) {
        this.unsubscribe();
      }

      var _registry$select = registry.select('core/block-editor'),
          getBlocks = _registry$select.getBlocks,
          getSelectionStart = _registry$select.getSelectionStart,
          getSelectionEnd = _registry$select.getSelectionEnd,
          isLastBlockChangePersistent = _registry$select.isLastBlockChangePersistent,
          __unstableIsLastBlockChangeIgnored = _registry$select.__unstableIsLastBlockChangeIgnored;

      var blocks = getBlocks();
      var isPersistent = isLastBlockChangePersistent();
      this.unsubscribe = registry.subscribe(function () {
        var _this$props2 = _this.props,
            _this$props2$onChange = _this$props2.onChange,
            onChange = _this$props2$onChange === void 0 ? noop : _this$props2$onChange,
            _this$props2$onInput = _this$props2.onInput,
            onInput = _this$props2$onInput === void 0 ? noop : _this$props2$onInput;
        var newBlocks = getBlocks();
        var newIsPersistent = isLastBlockChangePersistent();

        if (newBlocks !== blocks && (_this.isSyncingIncomingValue || __unstableIsLastBlockChangeIgnored())) {
          _this.isSyncingIncomingValue = null;
          blocks = newBlocks;
          isPersistent = newIsPersistent;
          return;
        }

        if (newBlocks !== blocks || // This happens when a previous input is explicitely marked as persistent.
        newIsPersistent && !isPersistent) {
          // When knowing the blocks value is changing, assign instance
          // value to skip reset in subsequent `componentDidUpdate`.
          if (newBlocks !== blocks) {
            _this.isSyncingOutcomingValue.push(newBlocks);
          }

          blocks = newBlocks;
          isPersistent = newIsPersistent;
          var selectionStart = getSelectionStart();
          var selectionEnd = getSelectionEnd();

          if (isPersistent) {
            onChange(blocks, {
              selectionStart: selectionStart,
              selectionEnd: selectionEnd
            });
          } else {
            onInput(blocks, {
              selectionStart: selectionStart,
              selectionEnd: selectionEnd
            });
          }
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      return children;
    }
  }]);

  return BlockEditorProvider;
}(Component);

export default compose([withRegistryProvider, withDispatch(function (dispatch) {
  var _dispatch = dispatch('core/block-editor'),
      updateSettings = _dispatch.updateSettings,
      resetBlocks = _dispatch.resetBlocks,
      resetSelection = _dispatch.resetSelection;

  return {
    updateSettings: updateSettings,
    resetBlocks: resetBlocks,
    resetSelection: resetSelection
  };
})])(BlockEditorProvider);
//# sourceMappingURL=index.native.js.map