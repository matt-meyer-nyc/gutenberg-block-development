import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { pick, isEqual } from 'lodash';
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { withViewportMatch } from '@wordpress/viewport';
import { Component } from '@wordpress/element';
import { withSelect, withDispatch } from '@wordpress/data';
import { synchronizeBlocksWithTemplate as _synchronizeBlocksWithTemplate, withBlockContentContext } from '@wordpress/blocks';
import isShallowEqual from '@wordpress/is-shallow-equal';
import { compose } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import ButtonBlockAppender from './button-block-appender';
import DefaultBlockAppender from './default-block-appender';
/**
 * Internal dependencies
 */

import BlockList from '../block-list';
import { withBlockEditContext } from '../block-edit/context';

var InnerBlocks =
/*#__PURE__*/
function (_Component) {
  _inherits(InnerBlocks, _Component);

  function InnerBlocks() {
    var _this;

    _classCallCheck(this, InnerBlocks);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(InnerBlocks).apply(this, arguments));
    _this.state = {
      templateInProcess: !!_this.props.template
    };

    _this.updateNestedSettings();

    return _this;
  }

  _createClass(InnerBlocks, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          block = _this$props.block,
          templateLock = _this$props.templateLock,
          __experimentalBlocks = _this$props.__experimentalBlocks,
          replaceInnerBlocks = _this$props.replaceInnerBlocks,
          __unstableMarkNextChangeAsNotPersistent = _this$props.__unstableMarkNextChangeAsNotPersistent;
      var innerBlocks = block.innerBlocks; // Only synchronize innerBlocks with template if innerBlocks are empty or a locking all exists directly on the block.

      if (innerBlocks.length === 0 || templateLock === 'all') {
        this.synchronizeBlocksWithTemplate();
      }

      if (this.state.templateInProcess) {
        this.setState({
          templateInProcess: false
        });
      } // Set controlled blocks value from parent, if any.


      if (__experimentalBlocks) {
        __unstableMarkNextChangeAsNotPersistent();

        replaceInnerBlocks(__experimentalBlocks);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props2 = this.props,
          block = _this$props2.block,
          templateLock = _this$props2.templateLock,
          template = _this$props2.template,
          isLastBlockChangePersistent = _this$props2.isLastBlockChangePersistent,
          onInput = _this$props2.onInput,
          onChange = _this$props2.onChange;
      var innerBlocks = block.innerBlocks;
      this.updateNestedSettings(); // Only synchronize innerBlocks with template if innerBlocks are empty or a locking all exists directly on the block.

      if (innerBlocks.length === 0 || templateLock === 'all') {
        var hasTemplateChanged = !isEqual(template, prevProps.template);

        if (hasTemplateChanged) {
          this.synchronizeBlocksWithTemplate();
        }
      } // Sync with controlled blocks value from parent, if possible.


      if (prevProps.block.innerBlocks !== innerBlocks) {
        var resetFunc = isLastBlockChangePersistent ? onChange : onInput;

        if (resetFunc) {
          resetFunc(innerBlocks);
        }
      }
    }
    /**
     * Called on mount or when a mismatch exists between the templates and
     * inner blocks, synchronizes inner blocks with the template, replacing
     * current blocks.
     */

  }, {
    key: "synchronizeBlocksWithTemplate",
    value: function synchronizeBlocksWithTemplate() {
      var _this$props3 = this.props,
          template = _this$props3.template,
          block = _this$props3.block,
          replaceInnerBlocks = _this$props3.replaceInnerBlocks;
      var innerBlocks = block.innerBlocks; // Synchronize with templates. If the next set differs, replace.

      var nextBlocks = _synchronizeBlocksWithTemplate(innerBlocks, template);

      if (!isEqual(nextBlocks, innerBlocks)) {
        replaceInnerBlocks(nextBlocks);
      }
    }
  }, {
    key: "updateNestedSettings",
    value: function updateNestedSettings() {
      var _this$props4 = this.props,
          blockListSettings = _this$props4.blockListSettings,
          allowedBlocks = _this$props4.allowedBlocks,
          updateNestedSettings = _this$props4.updateNestedSettings,
          templateLock = _this$props4.templateLock,
          parentLock = _this$props4.parentLock,
          __experimentalCaptureToolbars = _this$props4.__experimentalCaptureToolbars,
          __experimentalMoverDirection = _this$props4.__experimentalMoverDirection,
          __experimentalUIParts = _this$props4.__experimentalUIParts;
      var newSettings = {
        allowedBlocks: allowedBlocks,
        templateLock: templateLock === undefined ? parentLock : templateLock,
        __experimentalCaptureToolbars: __experimentalCaptureToolbars || false,
        __experimentalMoverDirection: __experimentalMoverDirection,
        __experimentalUIParts: __experimentalUIParts
      };

      if (!isShallowEqual(blockListSettings, newSettings)) {
        updateNestedSettings(newSettings);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
          enableClickThrough = _this$props5.enableClickThrough,
          clientId = _this$props5.clientId,
          hasOverlay = _this$props5.hasOverlay,
          captureToolbars = _this$props5.__experimentalCaptureToolbars,
          props = _objectWithoutProperties(_this$props5, ["enableClickThrough", "clientId", "hasOverlay", "__experimentalCaptureToolbars"]);

      var templateInProcess = this.state.templateInProcess;
      var classes = classnames('block-editor-inner-blocks', {
        'has-overlay': enableClickThrough && hasOverlay,
        'is-capturing-toolbar': captureToolbars
      });
      return createElement("div", {
        className: classes
      }, !templateInProcess && createElement(BlockList, _extends({
        rootClientId: clientId
      }, props)));
    }
  }]);

  return InnerBlocks;
}(Component);

InnerBlocks = compose([withViewportMatch({
  isSmallScreen: '< medium'
}), withBlockEditContext(function (context) {
  return pick(context, ['clientId']);
}), withSelect(function (select, ownProps) {
  var _select = select('core/block-editor'),
      isBlockSelected = _select.isBlockSelected,
      hasSelectedInnerBlock = _select.hasSelectedInnerBlock,
      getBlock = _select.getBlock,
      getBlockListSettings = _select.getBlockListSettings,
      getBlockRootClientId = _select.getBlockRootClientId,
      getTemplateLock = _select.getTemplateLock,
      isNavigationMode = _select.isNavigationMode,
      isLastBlockChangePersistent = _select.isLastBlockChangePersistent;

  var clientId = ownProps.clientId,
      isSmallScreen = ownProps.isSmallScreen;
  var block = getBlock(clientId);
  var rootClientId = getBlockRootClientId(clientId);
  return {
    block: block,
    blockListSettings: getBlockListSettings(clientId),
    hasOverlay: block.name !== 'core/template' && !isBlockSelected(clientId) && !hasSelectedInnerBlock(clientId, true),
    parentLock: getTemplateLock(rootClientId),
    enableClickThrough: isNavigationMode() || isSmallScreen,
    isLastBlockChangePersistent: isLastBlockChangePersistent()
  };
}), withDispatch(function (dispatch, ownProps) {
  var _dispatch = dispatch('core/block-editor'),
      _replaceInnerBlocks = _dispatch.replaceInnerBlocks,
      __unstableMarkNextChangeAsNotPersistent = _dispatch.__unstableMarkNextChangeAsNotPersistent,
      updateBlockListSettings = _dispatch.updateBlockListSettings;

  var block = ownProps.block,
      clientId = ownProps.clientId,
      _ownProps$templateIns = ownProps.templateInsertUpdatesSelection,
      templateInsertUpdatesSelection = _ownProps$templateIns === void 0 ? true : _ownProps$templateIns;
  return {
    replaceInnerBlocks: function replaceInnerBlocks(blocks) {
      _replaceInnerBlocks(clientId, blocks, block.innerBlocks.length === 0 && templateInsertUpdatesSelection && blocks.length !== 0);
    },
    __unstableMarkNextChangeAsNotPersistent: __unstableMarkNextChangeAsNotPersistent,
    updateNestedSettings: function updateNestedSettings(settings) {
      dispatch(updateBlockListSettings(clientId, settings));
    }
  };
})])(InnerBlocks); // Expose default appender placeholders as components.

InnerBlocks.DefaultBlockAppender = DefaultBlockAppender;
InnerBlocks.ButtonBlockAppender = ButtonBlockAppender;
InnerBlocks.Content = withBlockContentContext(function (_ref) {
  var BlockContent = _ref.BlockContent;
  return createElement(BlockContent, null);
});
/**
 * @see https://github.com/WordPress/gutenberg/blob/master/packages/block-editor/src/components/inner-blocks/README.md
 */

export default InnerBlocks;
//# sourceMappingURL=index.js.map