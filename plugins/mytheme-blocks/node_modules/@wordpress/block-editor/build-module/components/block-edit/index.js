import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import memize from 'memize';
/**
 * WordPress dependencies
 */

import { Component } from '@wordpress/element';
/**
 * Internal dependencies
 */

import Edit from './edit';
import { BlockEditContextProvider, useBlockEditContext } from './context';

var BlockEdit =
/*#__PURE__*/
function (_Component) {
  _inherits(BlockEdit, _Component);

  function BlockEdit() {
    var _this;

    _classCallCheck(this, BlockEdit);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BlockEdit).apply(this, arguments)); // It is important to return the same object if props haven't changed
    // to avoid  unnecessary rerenders.
    // See https://reactjs.org/docs/context.html#caveats.

    _this.propsToContext = memize(_this.propsToContext.bind(_assertThisInitialized(_this)), {
      maxSize: 1
    });
    return _this;
  }

  _createClass(BlockEdit, [{
    key: "propsToContext",
    value: function propsToContext(name, isSelected, clientId, onFocus, onCaretVerticalPositionChange) {
      return {
        name: name,
        isSelected: isSelected,
        clientId: clientId,
        onFocus: onFocus,
        onCaretVerticalPositionChange: onCaretVerticalPositionChange
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          name = _this$props.name,
          isSelected = _this$props.isSelected,
          clientId = _this$props.clientId,
          onFocus = _this$props.onFocus,
          onCaretVerticalPositionChange = _this$props.onCaretVerticalPositionChange;
      var value = this.propsToContext(name, isSelected, clientId, onFocus, onCaretVerticalPositionChange);
      return createElement(BlockEditContextProvider, {
        value: value
      }, createElement(Edit, this.props));
    }
  }]);

  return BlockEdit;
}(Component);

export default BlockEdit;
export { useBlockEditContext };
//# sourceMappingURL=index.js.map