import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { createElement, Fragment } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { View, Text, TouchableWithoutFeedback } from 'react-native';
/**
 * WordPress dependencies
 */

import { Component } from '@wordpress/element';
import { ToolbarButton, Toolbar } from '@wordpress/components';
import { withDispatch, withSelect } from '@wordpress/data';
import { compose, withPreferredColorScheme } from '@wordpress/compose';
import { getBlockType, getUnregisteredTypeHandlerName, __experimentalGetAccessibleBlockLabel as getAccessibleBlockLabel } from '@wordpress/blocks';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import styles from './block.scss';
import BlockEdit from '../block-edit';
import BlockInvalidWarning from './block-invalid-warning';
import BlockMobileToolbar from '../block-mobile-toolbar';
import FloatingToolbar from './block-mobile-floating-toolbar';
import Breadcrumbs from './breadcrumb';
import NavigateUpSVG from './nav-up-icon';

var BlockListBlock =
/*#__PURE__*/
function (_Component) {
  _inherits(BlockListBlock, _Component);

  function BlockListBlock() {
    var _this;

    _classCallCheck(this, BlockListBlock);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BlockListBlock).apply(this, arguments));
    _this.insertBlocksAfter = _this.insertBlocksAfter.bind(_assertThisInitialized(_this));
    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(BlockListBlock, [{
    key: "onFocus",
    value: function onFocus() {
      var _this$props = this.props,
          firstToSelectId = _this$props.firstToSelectId,
          isSelected = _this$props.isSelected,
          onSelect = _this$props.onSelect;

      if (!isSelected) {
        onSelect(firstToSelectId);
      }
    }
  }, {
    key: "insertBlocksAfter",
    value: function insertBlocksAfter(blocks) {
      this.props.onInsertBlocks(blocks, this.props.order + 1);

      if (blocks[0]) {
        // focus on the first block inserted
        this.props.onSelect(blocks[0].clientId);
      }
    }
  }, {
    key: "getBlockForType",
    value: function getBlockForType() {
      return createElement(BlockEdit, {
        name: this.props.name,
        isSelected: this.props.isSelected,
        attributes: this.props.attributes,
        setAttributes: this.props.onChange,
        onFocus: this.onFocus,
        onReplace: this.props.onReplace,
        insertBlocksAfter: this.insertBlocksAfter,
        mergeBlocks: this.props.mergeBlocks,
        onCaretVerticalPositionChange: this.props.onCaretVerticalPositionChange,
        clientId: this.props.clientId
      });
    }
  }, {
    key: "renderBlockTitle",
    value: function renderBlockTitle() {
      return createElement(View, {
        style: styles.blockTitle
      }, createElement(Text, null, "BlockType: ", this.props.name));
    }
  }, {
    key: "applySelectedBlockStyle",
    value: function applySelectedBlockStyle() {
      var _this$props2 = this.props,
          hasChildren = _this$props2.hasChildren,
          getStylesFromColorScheme = _this$props2.getStylesFromColorScheme,
          isSmallScreen = _this$props2.isSmallScreen,
          isRootListInnerBlockHolder = _this$props2.isRootListInnerBlockHolder;

      var fullSolidBorderStyle = _objectSpread({}, styles.fullSolidBordered, {}, getStylesFromColorScheme(styles.solidBorderColor, styles.solidBorderColorDark));

      if (hasChildren) {
        // if block has children apply style for selected parent
        return _objectSpread({}, styles.selectedParent, {}, fullSolidBorderStyle);
      } // apply semi border selected style when screen is in vertical position
      // and selected block does not have InnerBlock inside


      if (isSmallScreen && !isRootListInnerBlockHolder) {
        return _objectSpread({}, styles.selectedRootLeaf, {}, styles.semiSolidBordered, {}, {
          borderColor: fullSolidBorderStyle.borderColor
        });
      }
      /* selected block is one of below:
      		1. does not have children
      		2. is not on root list level
      		3. is an emty group block on root or nested level	*/


      return _objectSpread({}, styles.selectedLeaf, {}, fullSolidBorderStyle);
    }
  }, {
    key: "applyUnSelectedBlockStyle",
    value: function applyUnSelectedBlockStyle() {
      var _this$props3 = this.props,
          hasChildren = _this$props3.hasChildren,
          isParentSelected = _this$props3.isParentSelected,
          isAncestorSelected = _this$props3.isAncestorSelected,
          hasParent = _this$props3.hasParent,
          getStylesFromColorScheme = _this$props3.getStylesFromColorScheme,
          isLastBlock = _this$props3.isLastBlock; // if block does not have parent apply neutral or full
      // margins depending if block has children or not

      if (!hasParent) {
        return hasChildren ? styles.neutral : styles.full;
      }

      if (isParentSelected) {
        // parent of a block is selected
        var dashedBorderStyle = _objectSpread({}, styles.dashedBordered, {}, getStylesFromColorScheme(styles.dashedBorderColor, styles.dashedBorderColorDark)); // return apply childOfSelected or childOfSelectedLeaf
        // margins depending if block has children or not


        return _objectSpread({}, hasChildren ? styles.childOfSelected : styles.childOfSelectedLeaf, {}, dashedBorderStyle, {}, !isLastBlock && styles.marginVerticalChild);
      }

      if (isAncestorSelected) {
        // ancestor of a block is selected
        return _objectSpread({}, styles.descendantOfSelectedLeaf, {}, hasChildren && _objectSpread({}, styles.marginHorizontalNone, {}, styles.marginVerticalNone), {}, !isLastBlock && styles.marginVerticalDescendant);
      } // if none of above condition are met return apply neutral or full
      // margins depending if block has children or not


      return hasChildren ? styles.neutral : styles.full;
    }
  }, {
    key: "applyBlockStyle",
    value: function applyBlockStyle() {
      var _this$props4 = this.props,
          isSelected = _this$props4.isSelected,
          isDimmed = _this$props4.isDimmed;
      return [isSelected ? this.applySelectedBlockStyle() : this.applyUnSelectedBlockStyle(), isDimmed && styles.dimmed];
    }
  }, {
    key: "applyToolbarStyle",
    value: function applyToolbarStyle() {
      var _this$props5 = this.props,
          hasChildren = _this$props5.hasChildren,
          isUnregisteredBlock = _this$props5.isUnregisteredBlock;

      if (!hasChildren || isUnregisteredBlock) {
        return styles.neutralToolbar;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props6 = this.props,
          attributes = _this$props6.attributes,
          blockType = _this$props6.blockType,
          clientId = _this$props6.clientId,
          icon = _this$props6.icon,
          isSelected = _this$props6.isSelected,
          isValid = _this$props6.isValid,
          order = _this$props6.order,
          title = _this$props6.title,
          showFloatingToolbar = _this$props6.showFloatingToolbar,
          parentId = _this$props6.parentId,
          isTouchable = _this$props6.isTouchable;
      var accessibilityLabel = getAccessibleBlockLabel(blockType, attributes, order + 1);
      return createElement(Fragment, null, showFloatingToolbar && createElement(FloatingToolbar, null, createElement(Toolbar, {
        passedStyle: styles.toolbar
      }, createElement(ToolbarButton, {
        title: __('Navigate Up'),
        onClick: function onClick() {
          return _this2.props.onSelect(parentId);
        },
        icon: NavigateUpSVG
      }), createElement(View, {
        style: styles.pipe
      })), createElement(Breadcrumbs, {
        clientId: clientId
      })), createElement(TouchableWithoutFeedback, {
        onPress: this.onFocus,
        accessible: !isSelected,
        accessibilityRole: 'button'
      }, createElement(View, {
        pointerEvents: isTouchable ? 'auto' : 'box-only',
        accessibilityLabel: accessibilityLabel,
        style: this.applyBlockStyle()
      }, isValid ? this.getBlockForType() : createElement(BlockInvalidWarning, {
        blockTitle: title,
        icon: icon
      }), createElement(View, {
        style: this.applyToolbarStyle()
      }, isSelected && createElement(BlockMobileToolbar, {
        clientId: clientId
      })))));
    }
  }]);

  return BlockListBlock;
}(Component);

export default compose([withSelect(function (select, _ref) {
  var clientId = _ref.clientId,
      rootClientId = _ref.rootClientId;

  var _select = select('core/block-editor'),
      getBlockIndex = _select.getBlockIndex,
      isBlockSelected = _select.isBlockSelected,
      __unstableGetBlockWithoutInnerBlocks = _select.__unstableGetBlockWithoutInnerBlocks,
      getBlockHierarchyRootClientId = _select.getBlockHierarchyRootClientId,
      getSelectedBlockClientId = _select.getSelectedBlockClientId,
      getBlock = _select.getBlock,
      getBlockRootClientId = _select.getBlockRootClientId,
      getLowestCommonAncestorWithSelectedBlock = _select.getLowestCommonAncestorWithSelectedBlock,
      getBlockParents = _select.getBlockParents,
      getBlockCount = _select.getBlockCount;

  var _select2 = select('core/blocks'),
      getGroupingBlockName = _select2.getGroupingBlockName;

  var order = getBlockIndex(clientId, rootClientId);
  var isSelected = isBlockSelected(clientId);
  var isLastBlock = order === getBlockCount(rootClientId) - 1;

  var block = __unstableGetBlockWithoutInnerBlocks(clientId);

  var _ref2 = block || {},
      name = _ref2.name,
      attributes = _ref2.attributes,
      isValid = _ref2.isValid;

  var isUnregisteredBlock = name === getUnregisteredTypeHandlerName();
  var blockType = getBlockType(name || 'core/missing');
  var title = blockType.title;
  var icon = blockType.icon;
  var parents = getBlockParents(clientId, true);
  var parentId = parents[0] || '';
  var rootBlockId = getBlockHierarchyRootClientId(clientId);
  var rootBlock = getBlock(rootBlockId);
  var hasRootInnerBlocks = rootBlock.innerBlocks.length !== 0;
  var showFloatingToolbar = isSelected && hasRootInnerBlocks;
  var selectedBlockClientId = getSelectedBlockClientId();
  var commonAncestor = getLowestCommonAncestorWithSelectedBlock(clientId);
  var commonAncestorIndex = parents.indexOf(commonAncestor) - 1;
  var firstToSelectId = commonAncestor ? parents[commonAncestorIndex] : parents[parents.length - 1];
  var hasChildren = !isUnregisteredBlock && !!getBlockCount(clientId);
  var hasParent = !!parentId;
  var isParentSelected = selectedBlockClientId && selectedBlockClientId === parentId;
  var isAncestorSelected = selectedBlockClientId && parents.includes(selectedBlockClientId);
  var isSelectedBlockNested = !!getBlockRootClientId(selectedBlockClientId);
  var selectedParents = selectedBlockClientId ? getBlockParents(selectedBlockClientId) : [];
  var isDescendantSelected = selectedParents.includes(clientId);
  var isDescendantOfParentSelected = selectedParents.includes(parentId);
  var isTouchable = isSelected || isDescendantOfParentSelected || isParentSelected || parentId === '';
  var isDimmed = !isSelected && isSelectedBlockNested && !isAncestorSelected && !isDescendantSelected && (isDescendantOfParentSelected || rootBlockId === clientId);
  var isInnerBlockHolder = name === getGroupingBlockName();
  var isRootListInnerBlockHolder = !isSelectedBlockNested && isInnerBlockHolder;
  return {
    icon: icon,
    name: name || 'core/missing',
    order: order,
    title: title,
    attributes: attributes,
    blockType: blockType,
    isLastBlock: isLastBlock,
    isSelected: isSelected,
    isValid: isValid,
    showFloatingToolbar: showFloatingToolbar,
    parentId: parentId,
    isParentSelected: isParentSelected,
    firstToSelectId: firstToSelectId,
    hasChildren: hasChildren,
    hasParent: hasParent,
    isAncestorSelected: isAncestorSelected,
    isTouchable: isTouchable,
    isDimmed: isDimmed,
    isRootListInnerBlockHolder: isRootListInnerBlockHolder,
    isUnregisteredBlock: isUnregisteredBlock
  };
}), withDispatch(function (dispatch, ownProps, _ref3) {
  var select = _ref3.select;

  var _dispatch = dispatch('core/block-editor'),
      insertBlocks = _dispatch.insertBlocks,
      _mergeBlocks = _dispatch.mergeBlocks,
      replaceBlocks = _dispatch.replaceBlocks,
      selectBlock = _dispatch.selectBlock,
      updateBlockAttributes = _dispatch.updateBlockAttributes;

  return {
    mergeBlocks: function mergeBlocks(forward) {
      var clientId = ownProps.clientId;

      var _select3 = select('core/block-editor'),
          getPreviousBlockClientId = _select3.getPreviousBlockClientId,
          getNextBlockClientId = _select3.getNextBlockClientId;

      if (forward) {
        var nextBlockClientId = getNextBlockClientId(clientId);

        if (nextBlockClientId) {
          _mergeBlocks(clientId, nextBlockClientId);
        }
      } else {
        var previousBlockClientId = getPreviousBlockClientId(clientId);

        if (previousBlockClientId) {
          _mergeBlocks(previousBlockClientId, clientId);
        }
      }
    },
    onInsertBlocks: function onInsertBlocks(blocks, index) {
      insertBlocks(blocks, index, ownProps.rootClientId);
    },
    onSelect: function onSelect() {
      var clientId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ownProps.clientId;
      var initialPosition = arguments.length > 1 ? arguments[1] : undefined;
      selectBlock(clientId, initialPosition);
    },
    onChange: function onChange(attributes) {
      updateBlockAttributes(ownProps.clientId, attributes);
    },
    onReplace: function onReplace(blocks, indexToSelect) {
      replaceBlocks([ownProps.clientId], blocks, indexToSelect);
    }
  };
}), withPreferredColorScheme])(BlockListBlock);
//# sourceMappingURL=block.native.js.map