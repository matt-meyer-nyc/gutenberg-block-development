import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useState } from '@wordpress/element';
import { parse } from '@wordpress/blocks';
import { useDispatch } from '@wordpress/data';
/**
 * Internal dependencies
 */

import Button from './button';
import Container from './container';
import getDefaultTemplates from './default-templates';
import Preview from './preview';

var __experimentalPageTemplatePicker = function __experimentalPageTemplatePicker(_ref) {
  var _ref$templates = _ref.templates,
      templates = _ref$templates === void 0 ? getDefaultTemplates() : _ref$templates;

  var _useDispatch = useDispatch('core/editor'),
      editPost = _useDispatch.editPost;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      templatePreview = _useState2[0],
      setTemplatePreview = _useState2[1];

  var onApply = function onApply() {
    editPost({
      title: templatePreview.name,
      blocks: parse(templatePreview.content)
    });
    setTemplatePreview(undefined);
  };

  return createElement(Fragment, null, createElement(Container, null, templates.map(function (template) {
    return createElement(Button, {
      key: template.name,
      icon: template.icon,
      label: template.name,
      onPress: function onPress() {
        return setTemplatePreview(template);
      }
    });
  })), createElement(Preview, {
    template: templatePreview,
    onDismiss: function onDismiss() {
      return setTemplatePreview(undefined);
    },
    onApply: onApply
  }));
};

export default __experimentalPageTemplatePicker;
//# sourceMappingURL=picker.js.map