import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import { castArray, flow } from 'lodash';
/**
 * WordPress dependencies
 */

import { __, _n } from '@wordpress/i18n';
import { Toolbar, DropdownMenu, MenuGroup, MenuItem } from '@wordpress/components';
import { useSelect } from '@wordpress/data';
import { trash, moreHorizontal } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import BlockActions from '../block-actions';
import BlockModeToggle from './block-mode-toggle';
import BlockHTMLConvertButton from './block-html-convert-button';
import BlockUnknownConvertButton from './block-unknown-convert-button';
import __experimentalBlockSettingsMenuFirstItem from './block-settings-menu-first-item';
import __experimentalBlockSettingsMenuPluginsExtension from './block-settings-menu-plugins-extension';
var POPOVER_PROPS = {
  className: 'block-editor-block-settings-menu__popover',
  position: 'bottom right'
};
export function BlockSettingsMenu(_ref) {
  var clientIds = _ref.clientIds;
  var blockClientIds = castArray(clientIds);
  var count = blockClientIds.length;
  var firstBlockClientId = blockClientIds[0];
  var shortcuts = useSelect(function (select) {
    var _select = select('core/keyboard-shortcuts'),
        getShortcutRepresentation = _select.getShortcutRepresentation;

    return {
      duplicate: getShortcutRepresentation('core/block-editor/duplicate'),
      remove: getShortcutRepresentation('core/block-editor/remove'),
      insertAfter: getShortcutRepresentation('core/block-editor/insert-after'),
      insertBefore: getShortcutRepresentation('core/block-editor/insert-before')
    };
  }, []);
  return createElement(BlockActions, {
    clientIds: clientIds
  }, function (_ref2) {
    var canDuplicate = _ref2.canDuplicate,
        canInsertDefaultBlock = _ref2.canInsertDefaultBlock,
        isLocked = _ref2.isLocked,
        onDuplicate = _ref2.onDuplicate,
        onInsertAfter = _ref2.onInsertAfter,
        onInsertBefore = _ref2.onInsertBefore,
        onRemove = _ref2.onRemove;
    return createElement(Toolbar, null, createElement(DropdownMenu, {
      icon: moreHorizontal,
      label: __('More options'),
      className: "block-editor-block-settings-menu",
      popoverProps: POPOVER_PROPS
    }, function (_ref3) {
      var onClose = _ref3.onClose;
      return createElement(Fragment, null, createElement(MenuGroup, null, createElement(__experimentalBlockSettingsMenuFirstItem.Slot, {
        fillProps: {
          onClose: onClose
        }
      }), count === 1 && createElement(BlockUnknownConvertButton, {
        clientId: firstBlockClientId
      }), count === 1 && createElement(BlockHTMLConvertButton, {
        clientId: firstBlockClientId
      }), canDuplicate && createElement(MenuItem, {
        onClick: flow(onClose, onDuplicate),
        icon: "admin-page",
        shortcut: shortcuts.duplicate
      }, __('Duplicate')), canInsertDefaultBlock && createElement(Fragment, null, createElement(MenuItem, {
        onClick: flow(onClose, onInsertBefore),
        icon: "insert-before",
        shortcut: shortcuts.insertBefore
      }, __('Insert Before')), createElement(MenuItem, {
        onClick: flow(onClose, onInsertAfter),
        icon: "insert-after",
        shortcut: shortcuts.insertAfter
      }, __('Insert After'))), count === 1 && createElement(BlockModeToggle, {
        clientId: firstBlockClientId,
        onToggle: onClose
      }), createElement(__experimentalBlockSettingsMenuPluginsExtension.Slot, {
        fillProps: {
          clientIds: clientIds,
          onClose: onClose
        }
      })), createElement(MenuGroup, null, !isLocked && createElement(MenuItem, {
        onClick: flow(onClose, onRemove),
        icon: trash,
        shortcut: shortcuts.remove
      }, _n('Remove Block', 'Remove Blocks', count))));
    }));
  });
}
export default BlockSettingsMenu;
//# sourceMappingURL=index.js.map