import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { castArray } from 'lodash';
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { Disabled } from '@wordpress/components';
import { withSelect } from '@wordpress/data';
import { useLayoutEffect, useState, useRef, useReducer, useMemo } from '@wordpress/element';
/**
 * Internal dependencies
 */

import BlockEditorProvider from '../provider';
import BlockList from '../block-list';
import { getBlockPreviewContainerDOMNode } from '../../utils/dom';

function ScaledBlockPreview(_ref) {
  var blocks = _ref.blocks,
      viewportWidth = _ref.viewportWidth,
      _ref$padding = _ref.padding,
      padding = _ref$padding === void 0 ? 0 : _ref$padding;
  var previewRef = useRef(null);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isReady = _useState2[0],
      setIsReady = _useState2[1];

  var _useState3 = useState(1),
      _useState4 = _slicedToArray(_useState3, 2),
      previewScale = _useState4[0],
      setPreviewScale = _useState4[1];

  var _useState5 = useState({
    x: 0,
    y: 0
  }),
      _useState6 = _slicedToArray(_useState5, 2),
      _useState6$ = _useState6[0],
      x = _useState6$.x,
      y = _useState6$.y,
      setPosition = _useState6[1]; // Dynamically calculate the scale factor


  useLayoutEffect(function () {
    // Timer - required to account for async render of `BlockEditorProvider`
    var timerId = setTimeout(function () {
      var containerElement = previewRef.current;

      if (!containerElement) {
        return;
      } // If we're previewing a single block, scale the preview to fit it.


      if (blocks.length === 1) {
        var block = blocks[0];
        var previewElement = getBlockPreviewContainerDOMNode(block.clientId);

        if (!previewElement) {
          return;
        }

        var containerElementRect = containerElement.getBoundingClientRect();
        containerElementRect = {
          width: containerElementRect.width - padding * 2,
          height: containerElementRect.height - padding * 2,
          left: containerElementRect.left,
          top: containerElementRect.top
        };
        var scaledElementRect = previewElement.getBoundingClientRect();
        var scale = containerElementRect.width / scaledElementRect.width || 1;
        var offsetX = -(scaledElementRect.left - containerElementRect.left) * scale + padding;
        var offsetY = containerElementRect.height > scaledElementRect.height * scale ? (containerElementRect.height - scaledElementRect.height * scale) / 2 + padding : 0;
        setPreviewScale(scale);
        setPosition({
          x: offsetX,
          y: offsetY
        }); // Hack: we need  to reset the scaled elements margins

        previewElement.style.marginTop = '0';
      } else {
        var _containerElementRect = containerElement.getBoundingClientRect();

        setPreviewScale(_containerElementRect.width / viewportWidth);
      }

      setIsReady(true);
    }, 100); // Cleanup

    return function () {
      if (timerId) {
        window.clearTimeout(timerId);
      }
    };
  }, []);

  if (!blocks || blocks.length === 0) {
    return null;
  }

  var previewStyles = {
    transform: "scale(".concat(previewScale, ")"),
    visibility: isReady ? 'visible' : 'hidden',
    left: x,
    top: y,
    width: viewportWidth
  };
  return createElement("div", {
    ref: previewRef,
    className: classnames('block-editor-block-preview__container editor-styles-wrapper', {
      'is-ready': isReady
    }),
    "aria-hidden": true
  }, createElement(Disabled, {
    style: previewStyles,
    className: "block-editor-block-preview__content"
  }, createElement(BlockList, null)));
}

export function BlockPreview(_ref2) {
  var blocks = _ref2.blocks,
      _ref2$viewportWidth = _ref2.viewportWidth,
      viewportWidth = _ref2$viewportWidth === void 0 ? 700 : _ref2$viewportWidth,
      padding = _ref2.padding,
      settings = _ref2.settings;
  var renderedBlocks = useMemo(function () {
    return castArray(blocks);
  }, [blocks]);

  var _useReducer = useReducer(function (state) {
    return state + 1;
  }, 0),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      recompute = _useReducer2[0],
      triggerRecompute = _useReducer2[1];

  useLayoutEffect(triggerRecompute, [blocks]);
  return createElement(BlockEditorProvider, {
    value: renderedBlocks,
    settings: settings
  }, createElement(ScaledBlockPreview, {
    key: recompute,
    blocks: renderedBlocks,
    viewportWidth: viewportWidth,
    padding: padding
  }));
}
/**
 * BlockPreview renders a preview of a block or array of blocks.
 *
 * @see https://github.com/WordPress/gutenberg/blob/master/packages/block-editor/src/components/block-preview/README.md
 *
 * @param {Array|Object} blocks A block instance (object) or an array of blocks to be previewed.
 * @param {number} viewportWidth Width of the preview container in pixels. Controls at what size the blocks will be rendered inside the preview. Default: 700.
 * @return {WPComponent} The component to be rendered.
 */

export default withSelect(function (select) {
  return {
    settings: select('core/block-editor').getSettings()
  };
})(BlockPreview);
//# sourceMappingURL=index.js.map