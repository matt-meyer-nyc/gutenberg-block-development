{"version":3,"sources":["@wordpress/block-editor/src/store/reducer.js"],"names":["mapBlockOrder","blocks","rootClientId","result","forEach","block","clientId","innerBlocks","push","Object","assign","mapBlockParents","reduce","flattenBlocks","transform","identity","stack","length","shift","getFlattenedBlocksWithoutAttributes","getFlattenedBlockAttributes","attributes","getNestedBlockClientIds","blocksOrder","getMutateSafeObject","original","working","hasSameKeys","a","b","isUpdatingSameBlockAttribute","action","lastAction","type","undefined","fillKeysWithEmptyObject","objectKeys","key","withBlockCache","reducer","state","newState","cache","getBlocksWithParentsClientIds","clientIds","current","parents","updatedBlockUids","parentClientIds","replacedClientIds","removedClientIds","fromRootClientId","toRootClientId","byClientId","name","ref","updatedId","withPersistentBlockChange","markNextChangeAsNotPersistent","nextState","isExplicitPersistentChange","nextIsPersistentChange","isPersistentChange","withIgnoredBlockChange","IGNORED_ACTION_TYPES","Set","isIgnoredChange","has","withInnerBlocksRemoveCascade","getAllChildren","i","order","withBlockReset","visibleClientIds","withReplaceInnerBlocks","stateAfterBlocksRemoval","stateAfterInsert","index","withSaveReusableBlock","id","combineReducers","changes","updates","nextAttributes","value","subState","mappedBlocks","fromIndex","indexOf","firstClientId","firstIndex","lastClientId","without","isTyping","isDraggingBlocks","isCaretWithinFormattedText","selection","updateSelection","indexToSelect","blockToSelect","selectionStart","attributeKey","offset","startOffset","start","selectionEnd","endOffset","end","isMultiSelecting","isSelectionEnabled","initialPosition","blocksMode","insertionPoint","template","isValid","settings","SETTINGS_DEFAULTS","preferences","PREFERENCES_DEFAULTS","prevState","insert","insertUsage","time","count","blockListSettings","hasOwnProperty","isNavigationMode","lastBlockAttributesChange","automaticChangeStatus"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAoBA;;AACA;;AAKA;;AACA;;;;;;AAEA;;;;;;;;;;AAUA,SAASA,aAAT,CAAwBC,MAAxB,EAAoD;AAAA,MAApBC,YAAoB,uEAAL,EAAK;AACnD,MAAMC,MAAM,qCAAOD,YAAP,EAAuB,EAAvB,CAAZ;AAEAD,EAAAA,MAAM,CAACG,OAAP,CAAgB,UAAEC,KAAF,EAAa;AAAA,QACpBC,QADoB,GACMD,KADN,CACpBC,QADoB;AAAA,QACVC,WADU,GACMF,KADN,CACVE,WADU;AAG5BJ,IAAAA,MAAM,CAAED,YAAF,CAAN,CAAuBM,IAAvB,CAA6BF,QAA7B;AAEAG,IAAAA,MAAM,CAACC,MAAP,CAAeP,MAAf,EAAuBH,aAAa,CAAEO,WAAF,EAAeD,QAAf,CAApC;AACA,GAND;AAQA,SAAOH,MAAP;AACA;AAED;;;;;;;;;;;AASA,SAASQ,eAAT,CAA0BV,MAA1B,EAAsD;AAAA,MAApBC,YAAoB,uEAAL,EAAK;AACrD,SAAOD,MAAM,CAACW,MAAP,CACN,UAAET,MAAF,EAAUE,KAAV;AAAA,WACCI,MAAM,CAACC,MAAP,CACCP,MADD,oCAEKE,KAAK,CAACC,QAFX,EAEuBJ,YAFvB,GAGCS,eAAe,CAAEN,KAAK,CAACE,WAAR,EAAqBF,KAAK,CAACC,QAA3B,CAHhB,CADD;AAAA,GADM,EAON,EAPM,CAAP;AASA;AAED;;;;;;;;;;;;AAUA,SAASO,aAAT,CAAwBZ,MAAxB,EAAuD;AAAA,MAAvBa,SAAuB,uEAAXC,gBAAW;AACtD,MAAMZ,MAAM,GAAG,EAAf;AAEA,MAAMa,KAAK,oCAAQf,MAAR,CAAX;;AACA,SAAQe,KAAK,CAACC,MAAd,EAAuB;AAAA,uBACYD,KAAK,CAACE,KAAN,EADZ;AAAA,QACdX,WADc,gBACdA,WADc;AAAA,QACEF,KADF;;AAEtBW,IAAAA,KAAK,CAACR,IAAN,OAAAQ,KAAK,mCAAUT,WAAV,EAAL;AACAJ,IAAAA,MAAM,CAAEE,KAAK,CAACC,QAAR,CAAN,GAA2BQ,SAAS,CAAET,KAAF,CAApC;AACA;;AAED,SAAOF,MAAP;AACA;AAED;;;;;;;;;;;AASA,SAASgB,mCAAT,CAA8ClB,MAA9C,EAAuD;AACtD,SAAOY,aAAa,CAAEZ,MAAF,EAAU,UAAEI,KAAF;AAAA,WAAa,kBAAMA,KAAN,EAAa,YAAb,CAAb;AAAA,GAAV,CAApB;AACA;AAED;;;;;;;;;;;AASA,SAASe,2BAAT,CAAsCnB,MAAtC,EAA+C;AAC9C,SAAOY,aAAa,CAAEZ,MAAF,EAAU,UAAEI,KAAF;AAAA,WAAaA,KAAK,CAACgB,UAAnB;AAAA,GAAV,CAApB;AACA;AAED;;;;;;;;;;;;;;;;AAcA,SAASC,uBAAT,CAAkCC,WAAlC,EAAmE;AAAA,MAApBrB,YAAoB,uEAAL,EAAK;AAClE,SAAO,oBACNqB,WAAW,CAAErB,YAAF,CADL,EAEN,UAAEC,MAAF,EAAUG,QAAV;AAAA,sDACIH,MADJ,IAECG,QAFD,oCAGIgB,uBAAuB,CAAEC,WAAF,EAAejB,QAAf,CAH3B;AAAA,GAFM,EAON,EAPM,CAAP;AASA;AAED;;;;;;;;;;;AASA,SAASkB,mBAAT,CAA8BC,QAA9B,EAAwCC,OAAxC,EAAkD;AACjD,MAAKD,QAAQ,KAAKC,OAAlB,EAA4B;AAC3B,6BAAYD,QAAZ;AACA;;AAED,SAAOC,OAAP;AACA;AAED;;;;;;;;;;;AASO,SAASC,WAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA6B;AACnC,SAAO,qBAAS,kBAAMD,CAAN,CAAT,EAAoB,kBAAMC,CAAN,CAApB,CAAP;AACA;AAED;;;;;;;;;;;;AAUO,SAASC,4BAAT,CAAuCC,MAAvC,EAA+CC,UAA/C,EAA4D;AAClE,SACCD,MAAM,CAACE,IAAP,KAAgB,yBAAhB,IACAD,UAAU,KAAKE,SADf,IAEAF,UAAU,CAACC,IAAX,KAAoB,yBAFpB,IAGAF,MAAM,CAACzB,QAAP,KAAoB0B,UAAU,CAAC1B,QAH/B,IAIAqB,WAAW,CAAEI,MAAM,CAACV,UAAT,EAAqBW,UAAU,CAACX,UAAhC,CALZ;AAOA;AAED;;;;;;;;AAMA,IAAMc,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAEC,UAAF,EAAkB;AACjD,SAAOA,UAAU,CAACxB,MAAX,CAAmB,UAAET,MAAF,EAAUkC,GAAV,EAAmB;AAC5ClC,IAAAA,MAAM,CAAEkC,GAAF,CAAN,GAAgB,EAAhB;AACA,WAAOlC,MAAP;AACA,GAHM,EAGJ,EAHI,CAAP;AAIA,CALD;AAOA;;;;;;;;;;;AASA,IAAMmC,cAAc,GAAG,SAAjBA,cAAiB,CAAEC,OAAF;AAAA,SAAe,YAA0B;AAAA,QAAxBC,KAAwB,uEAAhB,EAAgB;AAAA,QAAZT,MAAY;AAC/D,QAAMU,QAAQ,GAAGF,OAAO,CAAEC,KAAF,EAAST,MAAT,CAAxB;;AAEA,QAAKU,QAAQ,KAAKD,KAAlB,EAA0B;AACzB,aAAOA,KAAP;AACA;;AACDC,IAAAA,QAAQ,CAACC,KAAT,GAAiBF,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACE,KAApB,GAA4B,EAA7C;AAEA;;;;;;;;;;;;AAWA,QAAMC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAAEC,SAAF,EAAiB;AACtD,aAAOA,SAAS,CAAChC,MAAV,CAAkB,UAAET,MAAF,EAAUG,QAAV,EAAwB;AAChD,YAAIuC,OAAO,GAAGvC,QAAd;;AACA,WAAG;AACFH,UAAAA,MAAM,CAACK,IAAP,CAAaqC,OAAb;AACAA,UAAAA,OAAO,GAAGL,KAAK,CAACM,OAAN,CAAeD,OAAf,CAAV;AACA,SAHD,QAGUA,OAHV;;AAIA,eAAO1C,MAAP;AACA,OAPM,EAOJ,EAPI,CAAP;AAQA,KATD;;AAWA,YAAS4B,MAAM,CAACE,IAAhB;AACC,WAAK,cAAL;AACCQ,QAAAA,QAAQ,CAACC,KAAT,GAAiB,uBAChB7B,aAAa,CAAEkB,MAAM,CAAC9B,MAAT,CADG,EAEhB;AAAA,iBAAQ,EAAR;AAAA,SAFgB,CAAjB;AAIA;;AACD,WAAK,gBAAL;AACA,WAAK,eAAL;AAAsB;AACrB,cAAM8C,gBAAgB,GAAG,kBAAMlC,aAAa,CAAEkB,MAAM,CAAC9B,MAAT,CAAnB,CAAzB;;AACA,cAAK8B,MAAM,CAAC7B,YAAZ,EAA2B;AAC1B6C,YAAAA,gBAAgB,CAACvC,IAAjB,CAAuBuB,MAAM,CAAC7B,YAA9B;AACA;;AACDuC,UAAAA,QAAQ,CAACC,KAAT,qBACID,QAAQ,CAACC,KADb,MAEIP,uBAAuB,CACzBQ,6BAA6B,CAAEI,gBAAF,CADJ,CAF3B;AAMA;AACA;;AACD,WAAK,cAAL;AACA,WAAK,yBAAL;AACCN,QAAAA,QAAQ,CAACC,KAAT,qBACID,QAAQ,CAACC,KADb,MAEIP,uBAAuB,CACzBQ,6BAA6B,CAAE,CAAEZ,MAAM,CAACzB,QAAT,CAAF,CADJ,CAF3B;AAMA;;AACD,WAAK,wCAAL;AACC,YAAM0C,eAAe,GAAGb,uBAAuB,CAC9CQ,6BAA6B,CAAEZ,MAAM,CAACkB,iBAAT,CADiB,CAA/C;AAIAR,QAAAA,QAAQ,CAACC,KAAT,qBACI,kBAAMD,QAAQ,CAACC,KAAf,EAAsBX,MAAM,CAACkB,iBAA7B,CADJ,MAEI,kBAAMD,eAAN,EAAuBjB,MAAM,CAACkB,iBAA9B,CAFJ,MAGId,uBAAuB,CACzB,kBAAMtB,aAAa,CAAEkB,MAAM,CAAC9B,MAAT,CAAnB,CADyB,CAH3B;AAOA;;AACD,WAAK,uCAAL;AACCwC,QAAAA,QAAQ,CAACC,KAAT,qBACI,kBAAMD,QAAQ,CAACC,KAAf,EAAsBX,MAAM,CAACmB,gBAA7B,CADJ,MAEIf,uBAAuB,CACzB,wBACCQ,6BAA6B,CAAEZ,MAAM,CAACa,SAAT,CAD9B,EAECb,MAAM,CAACa,SAFR,CADyB,CAF3B;AASA;;AACD,WAAK,wBAAL;AAA+B;AAC9B,cAAMG,iBAAgB,GAAG,CAAEhB,MAAM,CAACzB,QAAT,CAAzB;;AACA,cAAKyB,MAAM,CAACoB,gBAAZ,EAA+B;AAC9BJ,YAAAA,iBAAgB,CAACvC,IAAjB,CAAuBuB,MAAM,CAACoB,gBAA9B;AACA;;AACD,cAAKpB,MAAM,CAACqB,cAAZ,EAA6B;AAC5BL,YAAAA,iBAAgB,CAACvC,IAAjB,CAAuBuB,MAAM,CAACqB,cAA9B;AACA;;AACDX,UAAAA,QAAQ,CAACC,KAAT,qBACID,QAAQ,CAACC,KADb,MAEIP,uBAAuB,CACzBQ,6BAA6B,CAAEI,iBAAF,CADJ,CAF3B;AAMA;AACA;;AACD,WAAK,gBAAL;AACA,WAAK,kBAAL;AAAyB;AACxB,cAAMA,kBAAgB,GAAG,EAAzB;;AACA,cAAKhB,MAAM,CAAC7B,YAAZ,EAA2B;AAC1B6C,YAAAA,kBAAgB,CAACvC,IAAjB,CAAuBuB,MAAM,CAAC7B,YAA9B;AACA;;AACDuC,UAAAA,QAAQ,CAACC,KAAT,qBACID,QAAQ,CAACC,KADb,MAEIP,uBAAuB,CACzBQ,6BAA6B,CAAEI,kBAAF,CADJ,CAF3B;AAMA;AACA;;AACD,WAAK,6BAAL;AAAoC;AACnC,cAAMA,kBAAgB,GAAG,kBACxB,oBAAQN,QAAQ,CAACpB,UAAjB,EAA6B,UAAEA,UAAF,EAAcf,QAAd,EAA4B;AACxD,mBACCmC,QAAQ,CAACY,UAAT,CAAqB/C,QAArB,EAAgCgD,IAAhC,KAAyC,YAAzC,IACAjC,UAAU,CAACkC,GAAX,KAAmBxB,MAAM,CAACyB,SAF3B;AAIA,WALD,CADwB,CAAzB;;AASAf,UAAAA,QAAQ,CAACC,KAAT,qBACID,QAAQ,CAACC,KADb,MAEIP,uBAAuB,CACzBQ,6BAA6B,CAAEI,kBAAF,CADJ,CAF3B;AAMA;AApGF;;AAuGA,WAAON,QAAP;AACA,GAtIsB;AAAA,CAAvB;AAwIA;;;;;;;;;;;;AAUA,SAASgB,yBAAT,CAAoClB,OAApC,EAA8C;AAC7C,MAAIP,UAAJ;AACA,MAAI0B,6BAA6B,GAAG,KAApC;AAEA,SAAO,UAAElB,KAAF,EAAST,MAAT,EAAqB;AAC3B,QAAI4B,SAAS,GAAGpB,OAAO,CAAEC,KAAF,EAAST,MAAT,CAAvB;AAEA,QAAM6B,0BAA0B,GAC/B7B,MAAM,CAACE,IAAP,KAAgB,gCAAhB,IACAyB,6BAFD,CAH2B,CAO3B;AACA;;AACA,QAAKlB,KAAK,KAAKmB,SAAV,IAAuB,CAAEC,0BAA9B,EAA2D;AAC1DF,MAAAA,6BAA6B,GAC5B3B,MAAM,CAACE,IAAP,KAAgB,oCADjB;AAGA,UAAM4B,sBAAsB,GAAG,iBAC9BrB,KAD8B,EAE9B,CAAE,oBAAF,CAF8B,EAG9B,IAH8B,CAA/B;;AAKA,UAAKA,KAAK,CAACsB,kBAAN,KAA6BD,sBAAlC,EAA2D;AAC1D,eAAOrB,KAAP;AACA;;AAED,+BACImB,SADJ;AAECG,QAAAA,kBAAkB,EAAED;AAFrB;AAIA;;AAEDF,IAAAA,SAAS,qBACLA,SADK;AAERG,MAAAA,kBAAkB,EAAEF,0BAA0B,GAC3C,CAAEF,6BADyC,GAE3C,CAAE5B,4BAA4B,CAAEC,MAAF,EAAUC,UAAV;AAJzB,MAAT,CA5B2B,CAmC3B;AACA;AACA;;AACAA,IAAAA,UAAU,GAAGD,MAAb;AACA2B,IAAAA,6BAA6B,GAC5B3B,MAAM,CAACE,IAAP,KAAgB,oCADjB;AAGA,WAAO0B,SAAP;AACA,GA3CD;AA4CA;AAED;;;;;;;;;;;;AAUA,SAASI,sBAAT,CAAiCxB,OAAjC,EAA2C;AAC1C;;;;;AAKA,MAAMyB,oBAAoB,GAAG,IAAIC,GAAJ,CAAS,CAAE,gBAAF,CAAT,CAA7B;AAEA,SAAO,UAAEzB,KAAF,EAAST,MAAT,EAAqB;AAC3B,QAAM4B,SAAS,GAAGpB,OAAO,CAAEC,KAAF,EAAST,MAAT,CAAzB;;AAEA,QAAK4B,SAAS,KAAKnB,KAAnB,EAA2B;AAC1BmB,MAAAA,SAAS,CAACO,eAAV,GAA4BF,oBAAoB,CAACG,GAArB,CAA0BpC,MAAM,CAACE,IAAjC,CAA5B;AACA;;AAED,WAAO0B,SAAP;AACA,GARD;AASA;AAED;;;;;;;;;;AAQA,IAAMS,4BAA4B,GAAG,SAA/BA,4BAA+B,CAAE7B,OAAF;AAAA,SAAe,UAAEC,KAAF,EAAST,MAAT,EAAqB;AACxE,QAAMsC,cAAc,GAAG,SAAjBA,cAAiB,CAAEzB,SAAF,EAAiB;AACvC,UAAIzC,MAAM,GAAGyC,SAAb;;AACA,WAAM,IAAI0B,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGnE,MAAM,CAACc,MAA5B,EAAoCqD,CAAC,EAArC,EAA0C;AAAA;;AACzC,YAAK,CAAE9B,KAAK,CAAC+B,KAAN,CAAapE,MAAM,CAAEmE,CAAF,CAAnB,CAAP,EAAoC;AACnC;AACA;;AAED,YAAKnE,MAAM,KAAKyC,SAAhB,EAA4B;AAC3BzC,UAAAA,MAAM,oCAAQA,MAAR,CAAN;AACA;;AAED,oBAAAA,MAAM,EAACK,IAAP,kDAAgBgC,KAAK,CAAC+B,KAAN,CAAapE,MAAM,CAAEmE,CAAF,CAAnB,CAAhB;AACA;;AACD,aAAOnE,MAAP;AACA,KAdD;;AAgBA,QAAKqC,KAAL,EAAa;AACZ,cAAST,MAAM,CAACE,IAAhB;AACC,aAAK,eAAL;AACCF,UAAAA,MAAM,qBACFA,MADE;AAELE,YAAAA,IAAI,EAAE,uCAFD;AAGLiB,YAAAA,gBAAgB,EAAEmB,cAAc,CAAEtC,MAAM,CAACa,SAAT;AAH3B,YAAN;AAKA;;AACD,aAAK,gBAAL;AACCb,UAAAA,MAAM,qBACFA,MADE;AAELE,YAAAA,IAAI,EAAE,wCAFD;AAGLgB,YAAAA,iBAAiB,EAAEoB,cAAc,CAAEtC,MAAM,CAACa,SAAT;AAH5B,YAAN;AAKA;AAdF;AAgBA;;AAED,WAAOL,OAAO,CAAEC,KAAF,EAAST,MAAT,CAAd;AACA,GArCoC;AAAA,CAArC;AAuCA;;;;;;;;;;;;AAUA,IAAMyC,cAAc,GAAG,SAAjBA,cAAiB,CAAEjC,OAAF;AAAA,SAAe,UAAEC,KAAF,EAAST,MAAT,EAAqB;AAC1D,QAAKS,KAAK,IAAIT,MAAM,CAACE,IAAP,KAAgB,cAA9B,EAA+C;AAC9C,UAAMwC,gBAAgB,GAAGnD,uBAAuB,CAAEkB,KAAK,CAAC+B,KAAR,CAAhD;AACA,+BACI/B,KADJ;AAECa,QAAAA,UAAU,oBACN,kBAAMb,KAAK,CAACa,UAAZ,EAAwBoB,gBAAxB,CADM,MAENtD,mCAAmC,CAAEY,MAAM,CAAC9B,MAAT,CAF7B,CAFX;AAMCoB,QAAAA,UAAU,oBACN,kBAAMmB,KAAK,CAACnB,UAAZ,EAAwBoD,gBAAxB,CADM,MAENrD,2BAA2B,CAAEW,MAAM,CAAC9B,MAAT,CAFrB,CANX;AAUCsE,QAAAA,KAAK,oBACD,kBAAM/B,KAAK,CAAC+B,KAAZ,EAAmBE,gBAAnB,CADC,MAEDzE,aAAa,CAAE+B,MAAM,CAAC9B,MAAT,CAFZ,CAVN;AAcC6C,QAAAA,OAAO,oBACH,kBAAMN,KAAK,CAACM,OAAZ,EAAqB2B,gBAArB,CADG,MAEH9D,eAAe,CAAEoB,MAAM,CAAC9B,MAAT,CAFZ,CAdR;AAkBCyC,QAAAA,KAAK,oBACD,kBAAMF,KAAK,CAACE,KAAZ,EAAmB+B,gBAAnB,CADC,MAED,uBAAW5D,aAAa,CAAEkB,MAAM,CAAC9B,MAAT,CAAxB,EAA2C;AAAA,iBAAQ,EAAR;AAAA,SAA3C,CAFC;AAlBN;AAuBA;;AAED,WAAOsC,OAAO,CAAEC,KAAF,EAAST,MAAT,CAAd;AACA,GA7BsB;AAAA,CAAvB;AA+BA;;;;;;;;;;;;AAUA,IAAM2C,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAEnC,OAAF;AAAA,SAAe,UAAEC,KAAF,EAAST,MAAT,EAAqB;AAClE,QAAKA,MAAM,CAACE,IAAP,KAAgB,sBAArB,EAA8C;AAC7C,aAAOM,OAAO,CAAEC,KAAF,EAAST,MAAT,CAAd;AACA;;AACD,QAAI4C,uBAAuB,GAAGnC,KAA9B;;AACA,QAAKA,KAAK,CAAC+B,KAAN,CAAaxC,MAAM,CAAC7B,YAApB,CAAL,EAA0C;AACzCyE,MAAAA,uBAAuB,GAAGpC,OAAO,CAAEoC,uBAAF,EAA2B;AAC3D1C,QAAAA,IAAI,EAAE,eADqD;AAE3DW,QAAAA,SAAS,EAAEJ,KAAK,CAAC+B,KAAN,CAAaxC,MAAM,CAAC7B,YAApB;AAFgD,OAA3B,CAAjC;AAIA;;AACD,QAAI0E,gBAAgB,GAAGD,uBAAvB;;AACA,QAAK5C,MAAM,CAAC9B,MAAP,CAAcgB,MAAnB,EAA4B;AAC3B2D,MAAAA,gBAAgB,GAAGrC,OAAO,CAAEqC,gBAAF,oBACtB7C,MADsB;AAEzBE,QAAAA,IAAI,EAAE,eAFmB;AAGzB4C,QAAAA,KAAK,EAAE;AAHkB,SAA1B;AAKA;;AACD,WAAOD,gBAAP;AACA,GApB8B;AAAA,CAA/B;AAsBA;;;;;;;;;;;;AAUA,IAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAEvC,OAAF;AAAA,SAAe,UAAEC,KAAF,EAAST,MAAT,EAAqB;AACjE,QAAKS,KAAK,IAAIT,MAAM,CAACE,IAAP,KAAgB,6BAA9B,EAA8D;AAAA,UACrD8C,EADqD,GACnChD,MADmC,CACrDgD,EADqD;AAAA,UACjDvB,SADiD,GACnCzB,MADmC,CACjDyB,SADiD,EAG7D;;AACA,UAAKuB,EAAE,KAAKvB,SAAZ,EAAwB;AACvB,eAAOhB,KAAP;AACA;;AAEDA,MAAAA,KAAK,qBAAQA,KAAR,CAAL;AAEAA,MAAAA,KAAK,CAACnB,UAAN,GAAmB,uBAClBmB,KAAK,CAACnB,UADY,EAElB,UAAEA,UAAF,EAAcf,QAAd,EAA4B;AAAA,YACnBgD,IADmB,GACVd,KAAK,CAACa,UAAN,CAAkB/C,QAAlB,CADU,CACnBgD,IADmB;;AAE3B,YAAKA,IAAI,KAAK,YAAT,IAAyBjC,UAAU,CAACkC,GAAX,KAAmBwB,EAAjD,EAAsD;AACrD,mCACI1D,UADJ;AAECkC,YAAAA,GAAG,EAAEC;AAFN;AAIA;;AAED,eAAOnC,UAAP;AACA,OAZiB,CAAnB;AAcA;;AAED,WAAOkB,OAAO,CAAEC,KAAF,EAAST,MAAT,CAAd;AACA,GA5B6B;AAAA,CAA9B;AA8BA;;;;;;;;;;AAQO,IAAM9B,MAAM,GAAG,kBACrB+E,qBADqB,EAErBF,qBAFqB,EAEE;AACvBxC,cAHqB,EAGL;AAChB8B,4BAJqB,EAKrBM,sBALqB,EAKG;AACxBF,cANqB,EAOrBf,yBAPqB,EAQrBM,sBARqB,EASnB;AACFV,EAAAA,UADE,wBAC+B;AAAA,QAArBb,KAAqB,uEAAb,EAAa;AAAA,QAATT,MAAS;;AAChC,YAASA,MAAM,CAACE,IAAhB;AACC,WAAK,cAAL;AACC,eAAOd,mCAAmC,CAAEY,MAAM,CAAC9B,MAAT,CAA1C;;AAED,WAAK,gBAAL;AACA,WAAK,eAAL;AACC,iCACIuC,KADJ,MAEIrB,mCAAmC,CAAEY,MAAM,CAAC9B,MAAT,CAFvC;;AAKD,WAAK,cAAL;AACC;AACA,YAAK,CAAEuC,KAAK,CAAET,MAAM,CAACzB,QAAT,CAAZ,EAAkC;AACjC,iBAAOkC,KAAP;AACA,SAJF,CAMC;;;AACA,YAAMyC,OAAO,GAAG,kBAAMlD,MAAM,CAACmD,OAAb,EAAsB,YAAtB,CAAhB;;AACA,YAAK,qBAASD,OAAT,CAAL,EAA0B;AACzB,iBAAOzC,KAAP;AACA;;AAED,iCACIA,KADJ,oCAEGT,MAAM,CAACzB,QAFV,oBAGKkC,KAAK,CAAET,MAAM,CAACzB,QAAT,CAHV,MAIK2E,OAJL;;AAQD,WAAK,wCAAL;AACC,YAAK,CAAElD,MAAM,CAAC9B,MAAd,EAAuB;AACtB,iBAAOuC,KAAP;AACA;;AAED,iCACI,kBAAMA,KAAN,EAAaT,MAAM,CAACkB,iBAApB,CADJ,MAEI9B,mCAAmC,CAAEY,MAAM,CAAC9B,MAAT,CAFvC;;AAKD,WAAK,uCAAL;AACC,eAAO,kBAAMuC,KAAN,EAAaT,MAAM,CAACmB,gBAApB,CAAP;AA1CF;;AA6CA,WAAOV,KAAP;AACA,GAhDC;AAkDFnB,EAAAA,UAlDE,wBAkD+B;AAAA,QAArBmB,KAAqB,uEAAb,EAAa;AAAA,QAATT,MAAS;;AAChC,YAASA,MAAM,CAACE,IAAhB;AACC,WAAK,cAAL;AACC,eAAOb,2BAA2B,CAAEW,MAAM,CAAC9B,MAAT,CAAlC;;AAED,WAAK,gBAAL;AACA,WAAK,eAAL;AACC,iCACIuC,KADJ,MAEIpB,2BAA2B,CAAEW,MAAM,CAAC9B,MAAT,CAF/B;;AAKD,WAAK,cAAL;AACC;AACA,YACC,CAAEuC,KAAK,CAAET,MAAM,CAACzB,QAAT,CAAP,IACA,CAAEyB,MAAM,CAACmD,OAAP,CAAe7D,UAFlB,EAGE;AACD,iBAAOmB,KAAP;AACA;;AAED,iCACIA,KADJ,oCAEGT,MAAM,CAACzB,QAFV,oBAGKkC,KAAK,CAAET,MAAM,CAACzB,QAAT,CAHV,MAIKyB,MAAM,CAACmD,OAAP,CAAe7D,UAJpB;;AAQD,WAAK,yBAAL;AACC;AACA,YAAK,CAAEmB,KAAK,CAAET,MAAM,CAACzB,QAAT,CAAZ,EAAkC;AACjC,iBAAOkC,KAAP;AACA,SAJF,CAMC;;;AACA,YAAM2C,cAAc,GAAG,oBACtBpD,MAAM,CAACV,UADe,EAEtB,UAAElB,MAAF,EAAUiF,KAAV,EAAiB/C,GAAjB,EAA0B;AACzB,cAAK+C,KAAK,KAAKjF,MAAM,CAAEkC,GAAF,CAArB,EAA+B;AAC9BlC,YAAAA,MAAM,GAAGqB,mBAAmB,CAC3BgB,KAAK,CAAET,MAAM,CAACzB,QAAT,CADsB,EAE3BH,MAF2B,CAA5B;AAIAA,YAAAA,MAAM,CAAEkC,GAAF,CAAN,GAAgB+C,KAAhB;AACA;;AAED,iBAAOjF,MAAP;AACA,SAZqB,EAatBqC,KAAK,CAAET,MAAM,CAACzB,QAAT,CAbiB,CAAvB,CAPD,CAuBC;AACA;;AACA,YAAK6E,cAAc,KAAK3C,KAAK,CAAET,MAAM,CAACzB,QAAT,CAA7B,EAAmD;AAClD,iBAAOkC,KAAP;AACA,SA3BF,CA6BC;;;AACA,iCACIA,KADJ,oCAEGT,MAAM,CAACzB,QAFV,EAEsB6E,cAFtB;;AAKD,WAAK,wCAAL;AACC,YAAK,CAAEpD,MAAM,CAAC9B,MAAd,EAAuB;AACtB,iBAAOuC,KAAP;AACA;;AAED,iCACI,kBAAMA,KAAN,EAAaT,MAAM,CAACkB,iBAApB,CADJ,MAEI7B,2BAA2B,CAAEW,MAAM,CAAC9B,MAAT,CAF/B;;AAKD,WAAK,uCAAL;AACC,eAAO,kBAAMuC,KAAN,EAAaT,MAAM,CAACmB,gBAApB,CAAP;AA1EF;;AA6EA,WAAOV,KAAP;AACA,GAjIC;AAmIF+B,EAAAA,KAnIE,mBAmI0B;AAAA,QAArB/B,KAAqB,uEAAb,EAAa;AAAA,QAATT,MAAS;;AAC3B,YAASA,MAAM,CAACE,IAAhB;AACC,WAAK,cAAL;AACC,eAAOjC,aAAa,CAAE+B,MAAM,CAAC9B,MAAT,CAApB;;AAED,WAAK,gBAAL;AACC,iCACIuC,KADJ,MAEI,kBAAMxC,aAAa,CAAE+B,MAAM,CAAC9B,MAAT,CAAnB,EAAsC,EAAtC,CAFJ;;AAKD,WAAK,eAAL;AAAsB;AAAA,qCACS8B,MADT,CACb7B,YADa;AAAA,cACbA,YADa,qCACE,EADF;AAErB,cAAMmF,QAAQ,GAAG7C,KAAK,CAAEtC,YAAF,CAAL,IAAyB,EAA1C;AACA,cAAMoF,YAAY,GAAGtF,aAAa,CACjC+B,MAAM,CAAC9B,MAD0B,EAEjCC,YAFiC,CAAlC;AAHqB,8BAOe6B,MAPf,CAOb8C,KAPa;AAAA,cAObA,KAPa,8BAOLQ,QAAQ,CAACpE,MAPJ;AASrB,mCACIuB,KADJ,MAEI8C,YAFJ,oCAGGpF,YAHH,EAGmB,qBACjBmF,QADiB,EAEjBC,YAAY,CAAEpF,YAAF,CAFK,EAGjB2E,KAHiB,CAHnB;AASA;;AAED,WAAK,wBAAL;AAA+B;AAAA;;AAAA,sCAK1B9C,MAL0B,CAE7BoB,gBAF6B;AAAA,cAE7BA,gBAF6B,sCAEV,EAFU;AAAA,sCAK1BpB,MAL0B,CAG7BqB,cAH6B;AAAA,cAG7BA,cAH6B,sCAGZ,EAHY;AAAA,cAI7B9C,QAJ6B,GAK1ByB,MAL0B,CAI7BzB,QAJ6B;;AAAA,+BAMqByB,MANrB,CAMtB8C,KANsB;AAAA,cAMtBA,MANsB,+BAMdrC,KAAK,CAAEY,cAAF,CAAL,CAAwBnC,MANV,mBAQ9B;;;AACA,cAAKkC,gBAAgB,KAAKC,cAA1B,EAA2C;AAC1C,gBAAMiC,SAAQ,GAAG7C,KAAK,CAAEY,cAAF,CAAtB;;AACA,gBAAMmC,SAAS,GAAGF,SAAQ,CAACG,OAAT,CAAkBlF,QAAlB,CAAlB;;AACA,qCACIkC,KADJ,oCAEGY,cAFH,EAEqB,mBACnBZ,KAAK,CAAEY,cAAF,CADc,EAEnBmC,SAFmB,EAGnBV,MAHmB,CAFrB;AAQA,WApB6B,CAsB9B;;;AACA,mCACIrC,KADJ,sEAEGW,gBAFH,EAEuB,qBACrBX,KAAK,CAAEW,gBAAF,CADgB,EAErB7C,QAFqB,CAFvB,iDAMG8C,cANH,EAMqB,qBACnBZ,KAAK,CAAEY,cAAF,CADc,EAEnB9C,QAFmB,EAGnBuE,MAHmB,CANrB;AAYA;;AAED,WAAK,gBAAL;AAAuB;AAAA,cACdjC,SADc,GACmBb,MADnB,CACda,SADc;AAAA,sCACmBb,MADnB,CACH7B,YADG;AAAA,cACHA,aADG,sCACY,EADZ;;AAEtB,cAAMuF,aAAa,GAAG,mBAAO7C,SAAP,CAAtB;AACA,cAAMyC,UAAQ,GAAG7C,KAAK,CAAEtC,aAAF,CAAtB;;AAEA,cACC,CAAEmF,UAAQ,CAACpE,MAAX,IACAwE,aAAa,KAAK,mBAAOJ,UAAP,CAFnB,EAGE;AACD,mBAAO7C,KAAP;AACA;;AAED,cAAMkD,UAAU,GAAGL,UAAQ,CAACG,OAAT,CAAkBC,aAAlB,CAAnB;;AAEA,mCACIjD,KADJ,oCAEGtC,aAFH,EAEmB,mBACjBmF,UADiB,EAEjBK,UAFiB,EAGjBA,UAAU,GAAG,CAHI,EAIjB9C,SAAS,CAAC3B,MAJO,CAFnB;AASA;;AAED,WAAK,kBAAL;AAAyB;AAAA,cAChB2B,UADgB,GACiBb,MADjB,CAChBa,SADgB;AAAA,sCACiBb,MADjB,CACL7B,YADK;AAAA,cACLA,cADK,sCACU,EADV;;AAExB,cAAMuF,cAAa,GAAG,mBAAO7C,UAAP,CAAtB;;AACA,cAAM+C,YAAY,GAAG,kBAAM/C,UAAN,CAArB;AACA,cAAMyC,UAAQ,GAAG7C,KAAK,CAAEtC,cAAF,CAAtB;;AAEA,cAAK,CAAEmF,UAAQ,CAACpE,MAAX,IAAqB0E,YAAY,KAAK,kBAAMN,UAAN,CAA3C,EAA8D;AAC7D,mBAAO7C,KAAP;AACA;;AAED,cAAMkD,WAAU,GAAGL,UAAQ,CAACG,OAAT,CAAkBC,cAAlB,CAAnB;;AAEA,mCACIjD,KADJ,oCAEGtC,cAFH,EAEmB,mBACjBmF,UADiB,EAEjBK,WAFiB,EAGjBA,WAAU,GAAG,CAHI,EAIjB9C,UAAS,CAAC3B,MAJO,CAFnB;AASA;;AAED,WAAK,wCAAL;AAA+C;AAAA,cACtC2B,WADsC,GACxBb,MADwB,CACtCa,SADsC;;AAE9C,cAAK,CAAEb,MAAM,CAAC9B,MAAd,EAAuB;AACtB,mBAAOuC,KAAP;AACA;;AAED,cAAM8C,aAAY,GAAGtF,aAAa,CAAE+B,MAAM,CAAC9B,MAAT,CAAlC;;AAEA,iBAAO,kBAAM,CACZ,UAAE0D,SAAF;AAAA,mBACC,kBAAMA,SAAN,EAAiB5B,MAAM,CAACkB,iBAAxB,CADD;AAAA,WADY,EAGZ,UAAEU,SAAF;AAAA,qCACIA,SADJ,MAEI,kBAAM2B,aAAN,EAAoB,EAApB,CAFJ;AAAA,WAHY,EAOZ,UAAE3B,SAAF;AAAA,mBACC,uBAAWA,SAAX,EAAsB,UAAE0B,QAAF;AAAA,qBACrB,oBACCA,QADD,EAEC,UAAElF,MAAF,EAAUG,QAAV,EAAwB;AACvB,oBAAKA,QAAQ,KAAKsC,WAAS,CAAE,CAAF,CAA3B,EAAmC;AAClC,oEACIzC,MADJ,oCAEImF,aAAY,CAAE,EAAF,CAFhB;AAIA;;AAED,oBACC1C,WAAS,CAAC4C,OAAV,CAAmBlF,QAAnB,MAAkC,CAAC,CADpC,EAEE;AACDH,kBAAAA,MAAM,CAACK,IAAP,CAAaF,QAAb;AACA;;AAED,uBAAOH,MAAP;AACA,eAjBF,EAkBC,EAlBD,CADqB;AAAA,aAAtB,CADD;AAAA,WAPY,CAAN,EA8BFqC,KA9BE,CAAP;AA+BA;;AAED,WAAK,uCAAL;AACC,eAAO,kBAAM,CACZ;AACA,kBAAEmB,SAAF;AAAA,iBAAiB,kBAAMA,SAAN,EAAiB5B,MAAM,CAACmB,gBAAxB,CAAjB;AAAA,SAFY,EAIZ;AACA,kBAAES,SAAF;AAAA,iBACC,uBAAWA,SAAX,EAAsB,UAAE0B,QAAF;AAAA,mBACrBO,+BAASP,QAAT,0CAAsBtD,MAAM,CAACmB,gBAA7B,GADqB;AAAA,WAAtB,CADD;AAAA,SALY,CAAN,EASFV,KATE,CAAP;AA7JF;;AAyKA,WAAOA,KAAP;AACA,GA9SC;AAgTF;AACA;AACAM,EAAAA,OAlTE,qBAkT4B;AAAA,QAArBN,KAAqB,uEAAb,EAAa;AAAA,QAATT,MAAS;;AAC7B,YAASA,MAAM,CAACE,IAAhB;AACC,WAAK,cAAL;AACC,eAAOtB,eAAe,CAAEoB,MAAM,CAAC9B,MAAT,CAAtB;;AAED,WAAK,gBAAL;AACC,iCACIuC,KADJ,MAEI7B,eAAe,CAAEoB,MAAM,CAAC9B,MAAT,CAFnB;;AAKD,WAAK,eAAL;AACC,iCACIuC,KADJ,MAEI7B,eAAe,CACjBoB,MAAM,CAAC9B,MADU,EAEjB8B,MAAM,CAAC7B,YAAP,IAAuB,EAFN,CAFnB;;AAQD,WAAK,wBAAL;AAA+B;AAC9B,mCACIsC,KADJ,oCAEGT,MAAM,CAACzB,QAFV,EAEsByB,MAAM,CAACqB,cAAP,IAAyB,EAF/C;AAIA;;AAED,WAAK,wCAAL;AACC,iCACI,kBAAMZ,KAAN,EAAaT,MAAM,CAACkB,iBAApB,CADJ,MAEItC,eAAe,CACjBoB,MAAM,CAAC9B,MADU,EAEjBuC,KAAK,CAAET,MAAM,CAACa,SAAP,CAAkB,CAAlB,CAAF,CAFY,CAFnB;;AAQD,WAAK,uCAAL;AACC,eAAO,kBAAMJ,KAAN,EAAaT,MAAM,CAACmB,gBAApB,CAAP;AApCF;;AAuCA,WAAOV,KAAP;AACA;AA3VC,CATmB,CAAf;AAuWP;;;;;;;;;;;AAQO,SAASqD,QAAT,GAA2C;AAAA,MAAxBrD,KAAwB,uEAAhB,KAAgB;AAAA,MAATT,MAAS;;AACjD,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,cAAL;AACC,aAAO,IAAP;;AAED,SAAK,aAAL;AACC,aAAO,KAAP;AALF;;AAQA,SAAOO,KAAP;AACA;AAED;;;;;;;;;;AAQO,SAASsD,gBAAT,GAAmD;AAAA,MAAxBtD,KAAwB,uEAAhB,KAAgB;AAAA,MAATT,MAAS;;AACzD,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,uBAAL;AACC,aAAO,IAAP;;AAED,SAAK,sBAAL;AACC,aAAO,KAAP;AALF;;AAQA,SAAOO,KAAP;AACA;AAED;;;;;;;;;;AAQO,SAASuD,0BAAT,GAA6D;AAAA,MAAxBvD,KAAwB,uEAAhB,KAAgB;AAAA,MAATT,MAAS;;AACnE,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,sBAAL;AACC,aAAO,IAAP;;AAED,SAAK,qBAAL;AACC,aAAO,KAAP;AALF;;AAQA,SAAOO,KAAP;AACA;AAED;;;;;;;;;;;AASA,SAASwD,SAAT,GAAyC;AAAA,MAArBxD,KAAqB,uEAAb,EAAa;AAAA,MAATT,MAAS;;AACxC,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,sBAAL;AAA6B;AAC5B,YAAKO,KAAK,CAAClC,QAAX,EAAsB;AACrB,iBAAO,EAAP;AACA;;AAED,eAAOkC,KAAP;AACA;;AACD,SAAK,cAAL;AACC,UAAKT,MAAM,CAACzB,QAAP,KAAoBkC,KAAK,CAAClC,QAA/B,EAA0C;AACzC,eAAOkC,KAAP;AACA;;AAED,aAAO;AAAElC,QAAAA,QAAQ,EAAEyB,MAAM,CAACzB;AAAnB,OAAP;;AACD,SAAK,sBAAL,CAdD,CAc8B;;AAC7B,SAAK,eAAL;AAAsB;AACrB,YAAK,CAAEyB,MAAM,CAACkE,eAAd,EAAgC;AAC/B,iBAAOzD,KAAP;AACA;;AAED,eAAO;AAAElC,UAAAA,QAAQ,EAAEyB,MAAM,CAAC9B,MAAP,CAAe,CAAf,EAAmBK;AAA/B,SAAP;AACA;;AACD,SAAK,eAAL;AACC,UACC,CAAEyB,MAAM,CAACa,SAAT,IACA,CAAEb,MAAM,CAACa,SAAP,CAAiB3B,MADnB,IAEAc,MAAM,CAACa,SAAP,CAAiB4C,OAAjB,CAA0BhD,KAAK,CAAClC,QAAhC,MAA+C,CAAC,CAHjD,EAIE;AACD,eAAOkC,KAAP;AACA;;AAED,aAAO,EAAP;;AACD,SAAK,gBAAL;AAAuB;AACtB,YAAKT,MAAM,CAACa,SAAP,CAAiB4C,OAAjB,CAA0BhD,KAAK,CAAClC,QAAhC,MAA+C,CAAC,CAArD,EAAyD;AACxD,iBAAOkC,KAAP;AACA;;AAED,YAAM0D,aAAa,GAClBnE,MAAM,CAACmE,aAAP,IAAwBnE,MAAM,CAAC9B,MAAP,CAAcgB,MAAd,GAAuB,CADhD;AAEA,YAAMkF,aAAa,GAAGpE,MAAM,CAAC9B,MAAP,CAAeiG,aAAf,CAAtB;;AAEA,YAAK,CAAEC,aAAP,EAAuB;AACtB,iBAAO,EAAP;AACA;;AAED,YAAKA,aAAa,CAAC7F,QAAd,KAA2BkC,KAAK,CAAClC,QAAtC,EAAiD;AAChD,iBAAOkC,KAAP;AACA;;AAED,eAAO;AAAElC,UAAAA,QAAQ,EAAE6F,aAAa,CAAC7F;AAA1B,SAAP;AACA;AAlDF;;AAqDA,SAAOkC,KAAP;AACA;AAED;;;;;;;;;;AAQO,SAAS4D,cAAT,GAA8C;AAAA,MAArB5D,KAAqB,uEAAb,EAAa;AAAA,MAATT,MAAS;;AACpD,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,kBAAL;AACC,aAAO;AACN3B,QAAAA,QAAQ,EAAEyB,MAAM,CAACzB,QADX;AAEN+F,QAAAA,YAAY,EAAEtE,MAAM,CAACsE,YAFf;AAGNC,QAAAA,MAAM,EAAEvE,MAAM,CAACwE;AAHT,OAAP;;AAKD,SAAK,iBAAL;AACC,aAAOxE,MAAM,CAACqE,cAAd;;AACD,SAAK,cAAL;AACC,aAAO;AAAE9F,QAAAA,QAAQ,EAAEyB,MAAM,CAACyE;AAAnB,OAAP;AAVF;;AAaA,SAAOR,SAAS,CAAExD,KAAF,EAAST,MAAT,CAAhB;AACA;AAED;;;;;;;;;;AAQO,SAAS0E,YAAT,GAA4C;AAAA,MAArBjE,KAAqB,uEAAb,EAAa;AAAA,MAATT,MAAS;;AAClD,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,kBAAL;AACC,aAAO;AACN3B,QAAAA,QAAQ,EAAEyB,MAAM,CAACzB,QADX;AAEN+F,QAAAA,YAAY,EAAEtE,MAAM,CAACsE,YAFf;AAGNC,QAAAA,MAAM,EAAEvE,MAAM,CAAC2E;AAHT,OAAP;;AAKD,SAAK,iBAAL;AACC,aAAO3E,MAAM,CAAC0E,YAAd;;AACD,SAAK,cAAL;AACC,aAAO;AAAEnG,QAAAA,QAAQ,EAAEyB,MAAM,CAAC4E;AAAnB,OAAP;AAVF;;AAaA,SAAOX,SAAS,CAAExD,KAAF,EAAST,MAAT,CAAhB;AACA;AAED;;;;;;;;;;AAQO,SAAS6E,gBAAT,GAAmD;AAAA,MAAxBpE,KAAwB,uEAAhB,KAAgB;AAAA,MAATT,MAAS;;AACzD,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,oBAAL;AACC,aAAO,IAAP;;AAED,SAAK,mBAAL;AACC,aAAO,KAAP;AALF;;AAQA,SAAOO,KAAP;AACA;AAED;;;;;;;;;;AAQO,SAASqE,kBAAT,GAAoD;AAAA,MAAvBrE,KAAuB,uEAAf,IAAe;AAAA,MAATT,MAAS;;AAC1D,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,kBAAL;AACC,aAAOF,MAAM,CAAC8E,kBAAd;AAFF;;AAKA,SAAOrE,KAAP;AACA;AAED;;;;;;;;;;;;;;AAYO,SAASsE,eAAT,CAA0BtE,KAA1B,EAAiCT,MAAjC,EAA0C;AAChD,MAAKA,MAAM,CAACE,IAAP,KAAgB,cAArB,EAAsC;AACrC,WAAOF,MAAM,CAAC+E,eAAd;AACA,GAFD,MAEO,IAAK/E,MAAM,CAACE,IAAP,KAAgB,eAArB,EAAuC;AAC7C,WAAOO,KAAP;AACA,GAL+C,CAOhD;;AACA;;AAEM,SAASuE,UAAT,GAA0C;AAAA,MAArBvE,KAAqB,uEAAb,EAAa;AAAA,MAATT,MAAS;;AAChD,MAAKA,MAAM,CAACE,IAAP,KAAgB,mBAArB,EAA2C;AAAA,QAClC3B,QADkC,GACrByB,MADqB,CAClCzB,QADkC;AAE1C,6BACIkC,KADJ,oCAEGlC,QAFH,EAGEkC,KAAK,CAAElC,QAAF,CAAL,IAAqBkC,KAAK,CAAElC,QAAF,CAAL,KAAsB,MAA3C,GACG,QADH,GAEG,MALL;AAOA;;AAED,SAAOkC,KAAP;AACA;AAED;;;;;;;;;;;;AAUO,SAASwE,cAAT,GAAgD;AAAA,MAAvBxE,KAAuB,uEAAf,IAAe;AAAA,MAATT,MAAS;;AACtD,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,sBAAL;AAAA,UACS/B,YADT,GACiC6B,MADjC,CACS7B,YADT;AAAA,UACuB2E,KADvB,GACiC9C,MADjC,CACuB8C,KADvB;AAEC,aAAO;AAAE3E,QAAAA,YAAY,EAAZA,YAAF;AAAgB2E,QAAAA,KAAK,EAALA;AAAhB,OAAP;;AAED,SAAK,sBAAL;AACC,aAAO,IAAP;AANF;;AASA,SAAOrC,KAAP;AACA;AAED;;;;;;;;;;AAQO,SAASyE,QAAT,GAAuD;AAAA,MAApCzE,KAAoC,uEAA5B;AAAE0E,IAAAA,OAAO,EAAE;AAAX,GAA4B;AAAA,MAATnF,MAAS;;AAC7D,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,uBAAL;AACC,+BACIO,KADJ;AAEC0E,QAAAA,OAAO,EAAEnF,MAAM,CAACmF;AAFjB;AAFF;;AAQA,SAAO1E,KAAP;AACA;AAED;;;;;;;;;;AAQO,SAAS2E,QAAT,GAAuD;AAAA,MAApC3E,KAAoC,uEAA5B4E,2BAA4B;AAAA,MAATrF,MAAS;;AAC7D,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,iBAAL;AACC,+BACIO,KADJ,MAEIT,MAAM,CAACoF,QAFX;AAFF;;AAQA,SAAO3E,KAAP;AACA;AAED;;;;;;;;;;AAQO,SAAS6E,WAAT,GAA6D;AAAA,MAAvC7E,KAAuC,uEAA/B8E,8BAA+B;AAAA,MAATvF,MAAS;;AACnE,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,eAAL;AACA,SAAK,gBAAL;AACC,aAAOF,MAAM,CAAC9B,MAAP,CAAcW,MAAd,CAAsB,UAAE2G,SAAF,EAAalH,KAAb,EAAwB;AACpD,YAAI0E,EAAE,GAAG1E,KAAK,CAACiD,IAAf;AACA,YAAMkE,MAAM,GAAG;AAAElE,UAAAA,IAAI,EAAEjD,KAAK,CAACiD;AAAd,SAAf;;AACA,YAAK,6BAAiBjD,KAAjB,CAAL,EAAgC;AAC/BmH,UAAAA,MAAM,CAACjE,GAAP,GAAalD,KAAK,CAACgB,UAAN,CAAiBkC,GAA9B;AACAwB,UAAAA,EAAE,IAAI,MAAM1E,KAAK,CAACgB,UAAN,CAAiBkC,GAA7B;AACA;;AAED,iCACIgE,SADJ;AAECE,UAAAA,WAAW,oBACPF,SAAS,CAACE,WADH,oCAER1C,EAFQ,EAEF;AACP2C,YAAAA,IAAI,EAAE3F,MAAM,CAAC2F,IADN;AAEPC,YAAAA,KAAK,EAAEJ,SAAS,CAACE,WAAV,CAAuB1C,EAAvB,IACJwC,SAAS,CAACE,WAAV,CAAuB1C,EAAvB,EAA4B4C,KAA5B,GAAoC,CADhC,GAEJ,CAJI;AAKPH,YAAAA,MAAM,EAANA;AALO,WAFE;AAFZ;AAaA,OArBM,EAqBJhF,KArBI,CAAP;AAHF;;AA2BA,SAAOA,KAAP;AACA;AAED;;;;;;;;;;;AASO,IAAMoF,iBAAiB,GAAG,SAApBA,iBAAoB,GAA0B;AAAA,MAAxBpF,KAAwB,uEAAhB,EAAgB;AAAA,MAAZT,MAAY;;AAC1D,UAASA,MAAM,CAACE,IAAhB;AACC;AACA;AACA,SAAK,gBAAL;AACA,SAAK,eAAL;AAAsB;AACrB,eAAO,kBAAMO,KAAN,EAAaT,MAAM,CAACa,SAApB,CAAP;AACA;;AACD,SAAK,4BAAL;AAAmC;AAAA,YAC1BtC,QAD0B,GACbyB,MADa,CAC1BzB,QAD0B;;AAElC,YAAK,CAAEyB,MAAM,CAACoF,QAAd,EAAyB;AACxB,cAAK3E,KAAK,CAACqF,cAAN,CAAsBvH,QAAtB,CAAL,EAAwC;AACvC,mBAAO,kBAAMkC,KAAN,EAAalC,QAAb,CAAP;AACA;;AAED,iBAAOkC,KAAP;AACA;;AAED,YAAK,qBAASA,KAAK,CAAElC,QAAF,CAAd,EAA4ByB,MAAM,CAACoF,QAAnC,CAAL,EAAqD;AACpD,iBAAO3E,KAAP;AACA;;AAED,iCACIA,KADJ,oCAEGlC,QAFH,EAEeyB,MAAM,CAACoF,QAFtB;AAIA;AAzBF;;AA2BA,SAAO3E,KAAP;AACA,CA7BM;AA+BP;;;;;;;;;;;;AAQO,SAASsF,gBAAT,GAAmD;AAAA,MAAxBtF,KAAwB,uEAAhB,KAAgB;AAAA,MAATT,MAAS;;AACzD;AACA,MAAKA,MAAM,CAACE,IAAP,KAAgB,eAArB,EAAuC;AACtC,WAAO,KAAP;AACA;;AAED,MAAKF,MAAM,CAACE,IAAP,KAAgB,qBAArB,EAA6C;AAC5C,WAAOF,MAAM,CAAC+F,gBAAd;AACA;;AAED,SAAOtF,KAAP;AACA;AAED;;;;;;;;;;;;;;AAYO,SAASuF,yBAAT,CAAoCvF,KAApC,EAA2CT,MAA3C,EAAoD;AAC1D,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,cAAL;AACC,UAAK,CAAEF,MAAM,CAACmD,OAAP,CAAe7D,UAAtB,EAAmC;AAClC;AACA;;AAED,+CAAWU,MAAM,CAACzB,QAAlB,EAA8ByB,MAAM,CAACmD,OAAP,CAAe7D,UAA7C;;AAED,SAAK,yBAAL;AACC,+CAAWU,MAAM,CAACzB,QAAlB,EAA8ByB,MAAM,CAACV,UAArC;AATF;;AAYA,SAAO,IAAP;AACA;AAED;;;;;;;;;;AAQO,SAAS2G,qBAAT,CAAgCxF,KAAhC,EAAuCT,MAAvC,EAAgD;AACtD,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,uBAAL;AACC,aAAO,SAAP;;AACD,SAAK,6BAAL;AACC,UAAKO,KAAK,KAAK,SAAf,EAA2B;AAC1B,eAAO,OAAP;AACA;;AAED;;AACD,SAAK,kBAAL;AACC;AACA,UAAKA,KAAK,KAAK,OAAf,EAAyB;AACxB,eAAOA,KAAP;AACA;;AAED;AACD;AACA;;AACA,SAAK,aAAL;AACC,aAAOA,KAAP;AAnBF,GADsD,CAuBtD;;AACA;;eAEc,2BAAiB;AAC/BvC,EAAAA,MAAM,EAANA,MAD+B;AAE/B4F,EAAAA,QAAQ,EAARA,QAF+B;AAG/BC,EAAAA,gBAAgB,EAAhBA,gBAH+B;AAI/BC,EAAAA,0BAA0B,EAA1BA,0BAJ+B;AAK/BK,EAAAA,cAAc,EAAdA,cAL+B;AAM/BK,EAAAA,YAAY,EAAZA,YAN+B;AAO/BG,EAAAA,gBAAgB,EAAhBA,gBAP+B;AAQ/BC,EAAAA,kBAAkB,EAAlBA,kBAR+B;AAS/BC,EAAAA,eAAe,EAAfA,eAT+B;AAU/BC,EAAAA,UAAU,EAAVA,UAV+B;AAW/Ba,EAAAA,iBAAiB,EAAjBA,iBAX+B;AAY/BZ,EAAAA,cAAc,EAAdA,cAZ+B;AAa/BC,EAAAA,QAAQ,EAARA,QAb+B;AAc/BE,EAAAA,QAAQ,EAARA,QAd+B;AAe/BE,EAAAA,WAAW,EAAXA,WAf+B;AAgB/BU,EAAAA,yBAAyB,EAAzBA,yBAhB+B;AAiB/BD,EAAAA,gBAAgB,EAAhBA,gBAjB+B;AAkB/BE,EAAAA,qBAAqB,EAArBA;AAlB+B,CAAjB,C","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tflow,\n\treduce,\n\tfirst,\n\tlast,\n\tomit,\n\twithout,\n\tmapValues,\n\tkeys,\n\tisEqual,\n\tisEmpty,\n\tget,\n\tidentity,\n\tdifference,\n\tomitBy,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\nimport { isReusableBlock } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { PREFERENCES_DEFAULTS, SETTINGS_DEFAULTS } from './defaults';\nimport { insertAt, moveTo } from './array';\n\n/**\n * Given an array of blocks, returns an object where each key is a nesting\n * context, the value of which is an array of block client IDs existing within\n * that nesting context.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockOrder( blocks, rootClientId = '' ) {\n\tconst result = { [ rootClientId ]: [] };\n\n\tblocks.forEach( ( block ) => {\n\t\tconst { clientId, innerBlocks } = block;\n\n\t\tresult[ rootClientId ].push( clientId );\n\n\t\tObject.assign( result, mapBlockOrder( innerBlocks, clientId ) );\n\t} );\n\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object where each key contains\n * the clientId of the block and the value is the parent of the block.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockParents( blocks, rootClientId = '' ) {\n\treturn blocks.reduce(\n\t\t( result, block ) =>\n\t\t\tObject.assign(\n\t\t\t\tresult,\n\t\t\t\t{ [ block.clientId ]: rootClientId },\n\t\t\t\tmapBlockParents( block.innerBlocks, block.clientId )\n\t\t\t),\n\t\t{}\n\t);\n}\n\n/**\n * Helper method to iterate through all blocks, recursing into inner blocks,\n * applying a transformation function to each one.\n * Returns a flattened object with the transformed blocks.\n *\n * @param {Array} blocks Blocks to flatten.\n * @param {Function} transform Transforming function to be applied to each block.\n *\n * @return {Object} Flattened object.\n */\nfunction flattenBlocks( blocks, transform = identity ) {\n\tconst result = {};\n\n\tconst stack = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\tstack.push( ...innerBlocks );\n\t\tresult[ block.clientId ] = transform( block );\n\t}\n\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object containing all blocks, without\n * attributes, recursing into inner blocks. Keys correspond to the block client\n * ID, the value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Object} Flattened block attributes object.\n */\nfunction getFlattenedBlocksWithoutAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => omit( block, 'attributes' ) );\n}\n\n/**\n * Given an array of blocks, returns an object containing all block attributes,\n * recursing into inner blocks. Keys correspond to the block client ID, the\n * value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Object} Flattened block attributes object.\n */\nfunction getFlattenedBlockAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => block.attributes );\n}\n\n/**\n * Given a block order map object, returns *all* of the block client IDs that are\n * a descendant of the given root client ID.\n *\n * Calling this with `rootClientId` set to `''` results in a list of client IDs\n * that are in the post. That is, it excludes blocks like fetched reusable\n * blocks which are stored into state but not visible.\n *\n * @param {Object}  blocksOrder  Object that maps block client IDs to a list of\n *                               nested block client IDs.\n * @param {?string} rootClientId The root client ID to search. Defaults to ''.\n *\n * @return {Array} List of descendant client IDs.\n */\nfunction getNestedBlockClientIds( blocksOrder, rootClientId = '' ) {\n\treturn reduce(\n\t\tblocksOrder[ rootClientId ],\n\t\t( result, clientId ) => [\n\t\t\t...result,\n\t\t\tclientId,\n\t\t\t...getNestedBlockClientIds( blocksOrder, clientId ),\n\t\t],\n\t\t[]\n\t);\n}\n\n/**\n * Returns an object against which it is safe to perform mutating operations,\n * given the original object and its current working copy.\n *\n * @param {Object} original Original object.\n * @param {Object} working  Working object.\n *\n * @return {Object} Mutation-safe object.\n */\nfunction getMutateSafeObject( original, working ) {\n\tif ( original === working ) {\n\t\treturn { ...original };\n\t}\n\n\treturn working;\n}\n\n/**\n * Returns true if the two object arguments have the same keys, or false\n * otherwise.\n *\n * @param {Object} a First object.\n * @param {Object} b Second object.\n *\n * @return {boolean} Whether the two objects have the same keys.\n */\nexport function hasSameKeys( a, b ) {\n\treturn isEqual( keys( a ), keys( b ) );\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are updating the same block attribute, or\n * false otherwise.\n *\n * @param {Object} action     Currently dispatching action.\n * @param {Object} lastAction Previously dispatched action.\n *\n * @return {boolean} Whether actions are updating the same block attribute.\n */\nexport function isUpdatingSameBlockAttribute( action, lastAction ) {\n\treturn (\n\t\taction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\tlastAction !== undefined &&\n\t\tlastAction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\taction.clientId === lastAction.clientId &&\n\t\thasSameKeys( action.attributes, lastAction.attributes )\n\t);\n}\n\n/**\n * Utility returning an object with an empty object value for each key.\n *\n * @param {Array} objectKeys Keys to fill.\n * @return {Object} Object filled with empty object as values for each clientId.\n */\nconst fillKeysWithEmptyObject = ( objectKeys ) => {\n\treturn objectKeys.reduce( ( result, key ) => {\n\t\tresult[ key ] = {};\n\t\treturn result;\n\t}, {} );\n};\n\n/**\n * Higher-order reducer intended to compute a cache key for each block in the post.\n * A new instance of the cache key (empty object) is created each time the block object\n * needs to be refreshed (for any change in the block or its children).\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockCache = ( reducer ) => ( state = {}, action ) => {\n\tconst newState = reducer( state, action );\n\n\tif ( newState === state ) {\n\t\treturn state;\n\t}\n\tnewState.cache = state.cache ? state.cache : {};\n\n\t/**\n\t * For each clientId provided, traverses up parents, adding the provided clientIds\n\t * and each parent's clientId to the returned array.\n\t *\n\t * When calling this function consider that it uses the old state, so any state\n\t * modifications made by the `reducer` will not be present.\n\t *\n\t * @param {Array} clientIds an Array of block clientIds.\n\t *\n\t * @return {Array} The provided clientIds and all of their parent clientIds.\n\t */\n\tconst getBlocksWithParentsClientIds = ( clientIds ) => {\n\t\treturn clientIds.reduce( ( result, clientId ) => {\n\t\t\tlet current = clientId;\n\t\t\tdo {\n\t\t\t\tresult.push( current );\n\t\t\t\tcurrent = state.parents[ current ];\n\t\t\t} while ( current );\n\t\t\treturn result;\n\t\t}, [] );\n\t};\n\n\tswitch ( action.type ) {\n\t\tcase 'RESET_BLOCKS':\n\t\t\tnewState.cache = mapValues(\n\t\t\t\tflattenBlocks( action.blocks ),\n\t\t\t\t() => ( {} )\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'RECEIVE_BLOCKS':\n\t\tcase 'INSERT_BLOCKS': {\n\t\t\tconst updatedBlockUids = keys( flattenBlocks( action.blocks ) );\n\t\t\tif ( action.rootClientId ) {\n\t\t\t\tupdatedBlockUids.push( action.rootClientId );\n\t\t\t}\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( updatedBlockUids )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\t}\n\t\tcase 'UPDATE_BLOCK':\n\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( [ action.clientId ] )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\tconst parentClientIds = fillKeysWithEmptyObject(\n\t\t\t\tgetBlocksWithParentsClientIds( action.replacedClientIds )\n\t\t\t);\n\n\t\t\tnewState.cache = {\n\t\t\t\t...omit( newState.cache, action.replacedClientIds ),\n\t\t\t\t...omit( parentClientIds, action.replacedClientIds ),\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tkeys( flattenBlocks( action.blocks ) )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\tnewState.cache = {\n\t\t\t\t...omit( newState.cache, action.removedClientIds ),\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tdifference(\n\t\t\t\t\t\tgetBlocksWithParentsClientIds( action.clientIds ),\n\t\t\t\t\t\taction.clientIds\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'MOVE_BLOCK_TO_POSITION': {\n\t\t\tconst updatedBlockUids = [ action.clientId ];\n\t\t\tif ( action.fromRootClientId ) {\n\t\t\t\tupdatedBlockUids.push( action.fromRootClientId );\n\t\t\t}\n\t\t\tif ( action.toRootClientId ) {\n\t\t\t\tupdatedBlockUids.push( action.toRootClientId );\n\t\t\t}\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( updatedBlockUids )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\t}\n\t\tcase 'MOVE_BLOCKS_UP':\n\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\tconst updatedBlockUids = [];\n\t\t\tif ( action.rootClientId ) {\n\t\t\t\tupdatedBlockUids.push( action.rootClientId );\n\t\t\t}\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( updatedBlockUids )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\t}\n\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS': {\n\t\t\tconst updatedBlockUids = keys(\n\t\t\t\tomitBy( newState.attributes, ( attributes, clientId ) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tnewState.byClientId[ clientId ].name !== 'core/block' ||\n\t\t\t\t\t\tattributes.ref !== action.updatedId\n\t\t\t\t\t);\n\t\t\t\t} )\n\t\t\t);\n\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( updatedBlockUids )\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\t}\n\n\treturn newState;\n};\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isPersistentChange` property value corresponding to whether a change in\n * state can be considered as persistent. All changes are considered persistent\n * except when updating the same block attribute as in the previous action.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withPersistentBlockChange( reducer ) {\n\tlet lastAction;\n\tlet markNextChangeAsNotPersistent = false;\n\n\treturn ( state, action ) => {\n\t\tlet nextState = reducer( state, action );\n\n\t\tconst isExplicitPersistentChange =\n\t\t\taction.type === 'MARK_LAST_CHANGE_AS_PERSISTENT' ||\n\t\t\tmarkNextChangeAsNotPersistent;\n\n\t\t// Defer to previous state value (or default) unless changing or\n\t\t// explicitly marking as persistent.\n\t\tif ( state === nextState && ! isExplicitPersistentChange ) {\n\t\t\tmarkNextChangeAsNotPersistent =\n\t\t\t\taction.type === 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT';\n\n\t\t\tconst nextIsPersistentChange = get(\n\t\t\t\tstate,\n\t\t\t\t[ 'isPersistentChange' ],\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tif ( state.isPersistentChange === nextIsPersistentChange ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\tisPersistentChange: nextIsPersistentChange,\n\t\t\t};\n\t\t}\n\n\t\tnextState = {\n\t\t\t...nextState,\n\t\t\tisPersistentChange: isExplicitPersistentChange\n\t\t\t\t? ! markNextChangeAsNotPersistent\n\t\t\t\t: ! isUpdatingSameBlockAttribute( action, lastAction ),\n\t\t};\n\n\t\t// In comparing against the previous action, consider only those which\n\t\t// would have qualified as one which would have been ignored or not\n\t\t// have resulted in a changed state.\n\t\tlastAction = action;\n\t\tmarkNextChangeAsNotPersistent =\n\t\t\taction.type === 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT';\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isIgnoredChange` property value corresponding to whether a change in state\n * can be considered as ignored. A change is considered ignored when the result\n * of an action not incurred by direct user interaction.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withIgnoredBlockChange( reducer ) {\n\t/**\n\t * Set of action types for which a blocks state change should be ignored.\n\t *\n\t * @type {Set}\n\t */\n\tconst IGNORED_ACTION_TYPES = new Set( [ 'RECEIVE_BLOCKS' ] );\n\n\treturn ( state, action ) => {\n\t\tconst nextState = reducer( state, action );\n\n\t\tif ( nextState !== state ) {\n\t\t\tnextState.isIgnoredChange = IGNORED_ACTION_TYPES.has( action.type );\n\t\t}\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer targeting the combined blocks reducer, augmenting\n * block client IDs in remove action to include cascade of inner blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withInnerBlocksRemoveCascade = ( reducer ) => ( state, action ) => {\n\tconst getAllChildren = ( clientIds ) => {\n\t\tlet result = clientIds;\n\t\tfor ( let i = 0; i < result.length; i++ ) {\n\t\t\tif ( ! state.order[ result[ i ] ] ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( result === clientIds ) {\n\t\t\t\tresult = [ ...result ];\n\t\t\t}\n\n\t\t\tresult.push( ...state.order[ result[ i ] ] );\n\t\t}\n\t\treturn result;\n\t};\n\n\tif ( state ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'REMOVE_BLOCKS':\n\t\t\t\taction = {\n\t\t\t\t\t...action,\n\t\t\t\t\ttype: 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN',\n\t\t\t\t\tremovedClientIds: getAllChildren( action.clientIds ),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'REPLACE_BLOCKS':\n\t\t\t\taction = {\n\t\t\t\t\t...action,\n\t\t\t\t\ttype: 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN',\n\t\t\t\t\treplacedClientIds: getAllChildren( action.clientIds ),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `RESET_BLOCKS` action. When dispatched, this action will replace all\n * blocks that exist in the post, leaving blocks that exist only in state (e.g.\n * reusable blocks) alone.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockReset = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'RESET_BLOCKS' ) {\n\t\tconst visibleClientIds = getNestedBlockClientIds( state.order );\n\t\treturn {\n\t\t\t...state,\n\t\t\tbyClientId: {\n\t\t\t\t...omit( state.byClientId, visibleClientIds ),\n\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t},\n\t\t\tattributes: {\n\t\t\t\t...omit( state.attributes, visibleClientIds ),\n\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t},\n\t\t\torder: {\n\t\t\t\t...omit( state.order, visibleClientIds ),\n\t\t\t\t...mapBlockOrder( action.blocks ),\n\t\t\t},\n\t\t\tparents: {\n\t\t\t\t...omit( state.parents, visibleClientIds ),\n\t\t\t\t...mapBlockParents( action.blocks ),\n\t\t\t},\n\t\t\tcache: {\n\t\t\t\t...omit( state.cache, visibleClientIds ),\n\t\t\t\t...mapValues( flattenBlocks( action.blocks ), () => ( {} ) ),\n\t\t\t},\n\t\t};\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `REPLACE_INNER_BLOCKS` action. When dispatched, this action the state should become equivalent\n * to the execution of a `REMOVE_BLOCKS` action containing all the child's of the root block followed by\n * the execution of `INSERT_BLOCKS` with the new blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withReplaceInnerBlocks = ( reducer ) => ( state, action ) => {\n\tif ( action.type !== 'REPLACE_INNER_BLOCKS' ) {\n\t\treturn reducer( state, action );\n\t}\n\tlet stateAfterBlocksRemoval = state;\n\tif ( state.order[ action.rootClientId ] ) {\n\t\tstateAfterBlocksRemoval = reducer( stateAfterBlocksRemoval, {\n\t\t\ttype: 'REMOVE_BLOCKS',\n\t\t\tclientIds: state.order[ action.rootClientId ],\n\t\t} );\n\t}\n\tlet stateAfterInsert = stateAfterBlocksRemoval;\n\tif ( action.blocks.length ) {\n\t\tstateAfterInsert = reducer( stateAfterInsert, {\n\t\t\t...action,\n\t\t\ttype: 'INSERT_BLOCKS',\n\t\t\tindex: 0,\n\t\t} );\n\t}\n\treturn stateAfterInsert;\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `SAVE_REUSABLE_BLOCK_SUCCESS` action. This action can't be handled by\n * regular reducers and needs a higher-order reducer since it needs access to\n * both `byClientId` and `attributes` simultaneously.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withSaveReusableBlock = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'SAVE_REUSABLE_BLOCK_SUCCESS' ) {\n\t\tconst { id, updatedId } = action;\n\n\t\t// If a temporary reusable block is saved, we swap the temporary id with the final one\n\t\tif ( id === updatedId ) {\n\t\t\treturn state;\n\t\t}\n\n\t\tstate = { ...state };\n\n\t\tstate.attributes = mapValues(\n\t\t\tstate.attributes,\n\t\t\t( attributes, clientId ) => {\n\t\t\t\tconst { name } = state.byClientId[ clientId ];\n\t\t\t\tif ( name === 'core/block' && attributes.ref === id ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...attributes,\n\t\t\t\t\t\tref: updatedId,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn attributes;\n\t\t\t}\n\t\t);\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Reducer returning the blocks state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blocks = flow(\n\tcombineReducers,\n\twithSaveReusableBlock, // needs to be before withBlockCache\n\twithBlockCache, // needs to be before withInnerBlocksRemoveCascade\n\twithInnerBlocksRemoveCascade,\n\twithReplaceInnerBlocks, // needs to be after withInnerBlocksRemoveCascade\n\twithBlockReset,\n\twithPersistentBlockChange,\n\twithIgnoredBlockChange\n)( {\n\tbyClientId( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn getFlattenedBlocksWithoutAttributes( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\t// Ignore updates if block isn't known\n\t\t\t\tif ( ! state[ action.clientId ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\t// Do nothing if only attributes change.\n\t\t\t\tconst changes = omit( action.updates, 'attributes' );\n\t\t\t\tif ( isEmpty( changes ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t...state[ action.clientId ],\n\t\t\t\t\t\t...changes,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.replacedClientIds ),\n\t\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn omit( state, action.removedClientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tattributes( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn getFlattenedBlockAttributes( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\t// Ignore updates if block isn't known or there are no attribute changes.\n\t\t\t\tif (\n\t\t\t\t\t! state[ action.clientId ] ||\n\t\t\t\t\t! action.updates.attributes\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t...state[ action.clientId ],\n\t\t\t\t\t\t...action.updates.attributes,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\t\t// Ignore updates if block isn't known\n\t\t\t\tif ( ! state[ action.clientId ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\t// Consider as updates only changed values\n\t\t\t\tconst nextAttributes = reduce(\n\t\t\t\t\taction.attributes,\n\t\t\t\t\t( result, value, key ) => {\n\t\t\t\t\t\tif ( value !== result[ key ] ) {\n\t\t\t\t\t\t\tresult = getMutateSafeObject(\n\t\t\t\t\t\t\t\tstate[ action.clientId ],\n\t\t\t\t\t\t\t\tresult\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresult[ key ] = value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t},\n\t\t\t\t\tstate[ action.clientId ]\n\t\t\t\t);\n\n\t\t\t\t// Skip update if nothing has been changed. The reference will\n\t\t\t\t// match the original block if `reduce` had no changed values.\n\t\t\t\tif ( nextAttributes === state[ action.clientId ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise replace attributes in state\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: nextAttributes,\n\t\t\t\t};\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.replacedClientIds ),\n\t\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn omit( state, action.removedClientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\torder( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn mapBlockOrder( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...omit( mapBlockOrder( action.blocks ), '' ),\n\t\t\t\t};\n\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst { rootClientId = '' } = action;\n\t\t\t\tconst subState = state[ rootClientId ] || [];\n\t\t\t\tconst mappedBlocks = mapBlockOrder(\n\t\t\t\t\taction.blocks,\n\t\t\t\t\trootClientId\n\t\t\t\t);\n\t\t\t\tconst { index = subState.length } = action;\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...mappedBlocks,\n\t\t\t\t\t[ rootClientId ]: insertAt(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tmappedBlocks[ rootClientId ],\n\t\t\t\t\t\tindex\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCK_TO_POSITION': {\n\t\t\t\tconst {\n\t\t\t\t\tfromRootClientId = '',\n\t\t\t\t\ttoRootClientId = '',\n\t\t\t\t\tclientId,\n\t\t\t\t} = action;\n\t\t\t\tconst { index = state[ toRootClientId ].length } = action;\n\n\t\t\t\t// Moving inside the same parent block\n\t\t\t\tif ( fromRootClientId === toRootClientId ) {\n\t\t\t\t\tconst subState = state[ toRootClientId ];\n\t\t\t\t\tconst fromIndex = subState.indexOf( clientId );\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t[ toRootClientId ]: moveTo(\n\t\t\t\t\t\t\tstate[ toRootClientId ],\n\t\t\t\t\t\t\tfromIndex,\n\t\t\t\t\t\t\tindex\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Moving from a parent block to another\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ fromRootClientId ]: without(\n\t\t\t\t\t\tstate[ fromRootClientId ],\n\t\t\t\t\t\tclientId\n\t\t\t\t\t),\n\t\t\t\t\t[ toRootClientId ]: insertAt(\n\t\t\t\t\t\tstate[ toRootClientId ],\n\t\t\t\t\t\tclientId,\n\t\t\t\t\t\tindex\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_UP': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = first( clientIds );\n\t\t\t\tconst subState = state[ rootClientId ];\n\n\t\t\t\tif (\n\t\t\t\t\t! subState.length ||\n\t\t\t\t\tfirstClientId === first( subState )\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ rootClientId ]: moveTo(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tfirstIndex,\n\t\t\t\t\t\tfirstIndex - 1,\n\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = first( clientIds );\n\t\t\t\tconst lastClientId = last( clientIds );\n\t\t\t\tconst subState = state[ rootClientId ];\n\n\t\t\t\tif ( ! subState.length || lastClientId === last( subState ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ rootClientId ]: moveTo(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tfirstIndex,\n\t\t\t\t\t\tfirstIndex + 1,\n\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst { clientIds } = action;\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst mappedBlocks = mapBlockOrder( action.blocks );\n\n\t\t\t\treturn flow( [\n\t\t\t\t\t( nextState ) =>\n\t\t\t\t\t\tomit( nextState, action.replacedClientIds ),\n\t\t\t\t\t( nextState ) => ( {\n\t\t\t\t\t\t...nextState,\n\t\t\t\t\t\t...omit( mappedBlocks, '' ),\n\t\t\t\t\t} ),\n\t\t\t\t\t( nextState ) =>\n\t\t\t\t\t\tmapValues( nextState, ( subState ) =>\n\t\t\t\t\t\t\treduce(\n\t\t\t\t\t\t\t\tsubState,\n\t\t\t\t\t\t\t\t( result, clientId ) => {\n\t\t\t\t\t\t\t\t\tif ( clientId === clientIds[ 0 ] ) {\n\t\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\t\t\t\t\t...mappedBlocks[ '' ],\n\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tclientIds.indexOf( clientId ) === -1\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tresult.push( clientId );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t] )( state );\n\t\t\t}\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn flow( [\n\t\t\t\t\t// Remove inner block ordering for removed blocks\n\t\t\t\t\t( nextState ) => omit( nextState, action.removedClientIds ),\n\n\t\t\t\t\t// Remove deleted blocks from other blocks' orderings\n\t\t\t\t\t( nextState ) =>\n\t\t\t\t\t\tmapValues( nextState, ( subState ) =>\n\t\t\t\t\t\t\twithout( subState, ...action.removedClientIds )\n\t\t\t\t\t\t),\n\t\t\t\t] )( state );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\t// While technically redundant data as the inverse of `order`, it serves as\n\t// an optimization for the selectors which derive the ancestry of a block.\n\tparents( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn mapBlockParents( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...mapBlockParents( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...mapBlockParents(\n\t\t\t\t\t\taction.blocks,\n\t\t\t\t\t\taction.rootClientId || ''\n\t\t\t\t\t),\n\t\t\t\t};\n\n\t\t\tcase 'MOVE_BLOCK_TO_POSITION': {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: action.toRootClientId || '',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.replacedClientIds ),\n\t\t\t\t\t...mapBlockParents(\n\t\t\t\t\t\taction.blocks,\n\t\t\t\t\t\tstate[ action.clientIds[ 0 ] ]\n\t\t\t\t\t),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn omit( state, action.removedClientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n} );\n\n/**\n * Reducer returning typing state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isTyping( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_TYPING':\n\t\t\treturn true;\n\n\t\tcase 'STOP_TYPING':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning dragging state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isDraggingBlocks( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_DRAGGING_BLOCKS':\n\t\t\treturn true;\n\n\t\tcase 'STOP_DRAGGING_BLOCKS':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the caret is within formatted text.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isCaretWithinFormattedText( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ENTER_FORMATTED_TEXT':\n\t\t\treturn true;\n\n\t\tcase 'EXIT_FORMATTED_TEXT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Internal helper reducer for selectionStart and selectionEnd. Can hold a block\n * selection, represented by an object with property clientId.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nfunction selection( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'CLEAR_SELECTED_BLOCK': {\n\t\t\tif ( state.clientId ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId === state.clientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: action.clientId };\n\t\tcase 'REPLACE_INNER_BLOCKS': // REPLACE_INNER_BLOCKS and INSERT_BLOCKS should follow the same logic.\n\t\tcase 'INSERT_BLOCKS': {\n\t\t\tif ( ! action.updateSelection ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: action.blocks[ 0 ].clientId };\n\t\t}\n\t\tcase 'REMOVE_BLOCKS':\n\t\t\tif (\n\t\t\t\t! action.clientIds ||\n\t\t\t\t! action.clientIds.length ||\n\t\t\t\taction.clientIds.indexOf( state.clientId ) === -1\n\t\t\t) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {};\n\t\tcase 'REPLACE_BLOCKS': {\n\t\t\tif ( action.clientIds.indexOf( state.clientId ) === -1 ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tconst indexToSelect =\n\t\t\t\taction.indexToSelect || action.blocks.length - 1;\n\t\t\tconst blockToSelect = action.blocks[ indexToSelect ];\n\n\t\t\tif ( ! blockToSelect ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tif ( blockToSelect.clientId === state.clientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: blockToSelect.clientId };\n\t\t}\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block selection's start.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function selectionStart( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SELECTION_CHANGE':\n\t\t\treturn {\n\t\t\t\tclientId: action.clientId,\n\t\t\t\tattributeKey: action.attributeKey,\n\t\t\t\toffset: action.startOffset,\n\t\t\t};\n\t\tcase 'RESET_SELECTION':\n\t\t\treturn action.selectionStart;\n\t\tcase 'MULTI_SELECT':\n\t\t\treturn { clientId: action.start };\n\t}\n\n\treturn selection( state, action );\n}\n\n/**\n * Reducer returning the block selection's end.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function selectionEnd( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SELECTION_CHANGE':\n\t\t\treturn {\n\t\t\t\tclientId: action.clientId,\n\t\t\t\tattributeKey: action.attributeKey,\n\t\t\t\toffset: action.endOffset,\n\t\t\t};\n\t\tcase 'RESET_SELECTION':\n\t\t\treturn action.selectionEnd;\n\t\tcase 'MULTI_SELECT':\n\t\t\treturn { clientId: action.end };\n\t}\n\n\treturn selection( state, action );\n}\n\n/**\n * Reducer returning whether the user is multi-selecting.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isMultiSelecting( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_MULTI_SELECT':\n\t\t\treturn true;\n\n\t\tcase 'STOP_MULTI_SELECT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether selection is enabled.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isSelectionEnabled( state = true, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'TOGGLE_SELECTION':\n\t\t\treturn action.isSelectionEnabled;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the intial block selection.\n *\n * Currently this in only used to restore the selection after block deletion.\n * This reducer should eventually be removed in favour of setting selection\n * directly.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {?number} Initial position: -1 or undefined.\n */\nexport function initialPosition( state, action ) {\n\tif ( action.type === 'SELECT_BLOCK' ) {\n\t\treturn action.initialPosition;\n\t} else if ( action.type === 'REMOVE_BLOCKS' ) {\n\t\treturn state;\n\t}\n\n\t// Reset the state by default (for any action not handled).\n}\n\nexport function blocksMode( state = {}, action ) {\n\tif ( action.type === 'TOGGLE_BLOCK_MODE' ) {\n\t\tconst { clientId } = action;\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ clientId ]:\n\t\t\t\tstate[ clientId ] && state[ clientId ] === 'html'\n\t\t\t\t\t? 'visual'\n\t\t\t\t\t: 'html',\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion point visibility, either null if there\n * is not an explicit insertion point assigned, or an object of its `index` and\n * `rootClientId`.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function insertionPoint( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SHOW_INSERTION_POINT':\n\t\t\tconst { rootClientId, index } = action;\n\t\t\treturn { rootClientId, index };\n\n\t\tcase 'HIDE_INSERTION_POINT':\n\t\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the post blocks match the defined template or not.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function template( state = { isValid: true }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_TEMPLATE_VALIDITY':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisValid: action.isValid,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the editor setting.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function settings( state = SETTINGS_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_SETTINGS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.settings,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the user preferences.\n *\n * @param {Object}  state                 Current state.\n * @param {Object}  action                Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function preferences( state = PREFERENCES_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'INSERT_BLOCKS':\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\treturn action.blocks.reduce( ( prevState, block ) => {\n\t\t\t\tlet id = block.name;\n\t\t\t\tconst insert = { name: block.name };\n\t\t\t\tif ( isReusableBlock( block ) ) {\n\t\t\t\t\tinsert.ref = block.attributes.ref;\n\t\t\t\t\tid += '/' + block.attributes.ref;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...prevState,\n\t\t\t\t\tinsertUsage: {\n\t\t\t\t\t\t...prevState.insertUsage,\n\t\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t\ttime: action.time,\n\t\t\t\t\t\t\tcount: prevState.insertUsage[ id ]\n\t\t\t\t\t\t\t\t? prevState.insertUsage[ id ].count + 1\n\t\t\t\t\t\t\t\t: 1,\n\t\t\t\t\t\t\tinsert,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}, state );\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning an object where each key is a block client ID, its value\n * representing the settings for its nested blocks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blockListSettings = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\t// Even if the replaced blocks have the same client ID, our logic\n\t\t// should correct the state.\n\t\tcase 'REPLACE_BLOCKS':\n\t\tcase 'REMOVE_BLOCKS': {\n\t\t\treturn omit( state, action.clientIds );\n\t\t}\n\t\tcase 'UPDATE_BLOCK_LIST_SETTINGS': {\n\t\t\tconst { clientId } = action;\n\t\t\tif ( ! action.settings ) {\n\t\t\t\tif ( state.hasOwnProperty( clientId ) ) {\n\t\t\t\t\treturn omit( state, clientId );\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tif ( isEqual( state[ clientId ], action.settings ) ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: action.settings,\n\t\t\t};\n\t\t}\n\t}\n\treturn state;\n};\n\n/**\n * Reducer returning whether the navigation mode is enabled or not.\n *\n * @param {string} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function isNavigationMode( state = false, action ) {\n\t// Let inserting block always trigger Edit mode.\n\tif ( action.type === 'INSERT_BLOCKS' ) {\n\t\treturn false;\n\t}\n\n\tif ( action.type === 'SET_NAVIGATION_MODE' ) {\n\t\treturn action.isNavigationMode;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer return an updated state representing the most recent block attribute\n * update. The state is structured as an object where the keys represent the\n * client IDs of blocks, the values a subset of attributes from the most recent\n * block update. The state is always reset to null if the last action is\n * anything other than an attributes update.\n *\n * @param {Object<string,Object>} state  Current state.\n * @param {Object}                action Action object.\n *\n * @return {[string,Object]} Updated state.\n */\nexport function lastBlockAttributesChange( state, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_BLOCK':\n\t\t\tif ( ! action.updates.attributes ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn { [ action.clientId ]: action.updates.attributes };\n\n\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\treturn { [ action.clientId ]: action.attributes };\n\t}\n\n\treturn null;\n}\n\n/**\n * Reducer returning automatic change state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function automaticChangeStatus( state, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'MARK_AUTOMATIC_CHANGE':\n\t\t\treturn 'pending';\n\t\tcase 'MARK_AUTOMATIC_CHANGE_FINAL':\n\t\t\tif ( state === 'pending' ) {\n\t\t\t\treturn 'final';\n\t\t\t}\n\n\t\t\treturn;\n\t\tcase 'SELECTION_CHANGE':\n\t\t\t// As long as the state is not final, ignore any selection changes.\n\t\t\tif ( state !== 'final' ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn;\n\t\t// Undoing an automatic change should still be possible after mouse\n\t\t// move.\n\t\tcase 'STOP_TYPING':\n\t\t\treturn state;\n\t}\n\n\t// Reset the state by default (for any action not handled).\n}\n\nexport default combineReducers( {\n\tblocks,\n\tisTyping,\n\tisDraggingBlocks,\n\tisCaretWithinFormattedText,\n\tselectionStart,\n\tselectionEnd,\n\tisMultiSelecting,\n\tisSelectionEnabled,\n\tinitialPosition,\n\tblocksMode,\n\tblockListSettings,\n\tinsertionPoint,\n\ttemplate,\n\tsettings,\n\tpreferences,\n\tlastBlockAttributesChange,\n\tisNavigationMode,\n\tautomaticChangeStatus,\n} );\n"]}