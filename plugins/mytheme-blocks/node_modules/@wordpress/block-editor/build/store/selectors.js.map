{"version":3,"sources":["@wordpress/block-editor/src/store/selectors.js"],"names":["INSERTER_UTILITY_HIGH","INSERTER_UTILITY_MEDIUM","INSERTER_UTILITY_LOW","INSERTER_UTILITY_NONE","MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","MILLISECONDS_PER_WEEK","templateIcon","EMPTY_ARRAY","getBlockName","state","clientId","block","blocks","byClientId","name","isBlockValid","isValid","getBlockAttributes","attributes","getBlock","innerBlocks","getBlocks","cache","__unstableGetBlockWithoutInnerBlocks","rootClientId","getBlockOrder","order","getClientIdsOfDescendants","clientIds","descendants","getClientIdsWithDescendants","topLevelIds","getGlobalBlockCount","blockName","length","accumulator","getBlocksByClientId","getBlockCount","getSelectionStart","selectionStart","getSelectionEnd","selectionEnd","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","multiSelectedBlockCount","getMultiSelectedBlockClientIds","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","parents","undefined","getBlockParents","ascending","current","push","reverse","getBlockParentsByBlockName","id","getBlockHierarchyRootClientId","parent","getLowestCommonAncestorWithSelectedBlock","selectedId","clientParents","selectedParents","lowestCommonAncestor","maxDepth","Math","min","index","getAdjacentBlockClientId","startClientId","modifier","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","orderSet","indexOf","nextIndex","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","initialPosition","getSelectedBlockClientIds","blockOrder","startIndex","endIndex","slice","getMultiSelectedBlocks","multiSelectedBlockClientIds","map","getDependants","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","ancestorClientId","isMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","deep","innerClientId","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","blocksMode","isTyping","isDraggingBlocks","isCaretWithinFormattedText","getBlockInsertionPoint","insertionPoint","isBlockInsertionPointVisible","isValidTemplate","template","getTemplate","settings","getTemplateLock","templateLock","blockListSettings","getBlockListSettings","canInsertBlockTypeUnmemoized","checkAllowList","list","item","defaultResult","blockType","getSettings","allowedBlockTypes","isBlockAllowedInEditor","isLocked","parentBlockListSettings","parentAllowedBlocks","hasParentAllowedBlock","blockAllowedParentBlocks","parentName","hasBlockAllowedParent","canInsertBlockType","getInsertUsage","preferences","insertUsage","canIncludeBlockTypeInInserter","getInserterItems","calculateUtility","category","count","isContextual","calculateFrecency","time","duration","Date","now","buildBlockTypeInserterItem","isDisabled","inserterVariations","variations","filter","scope","includes","initialAttributes","title","description","icon","keywords","example","utility","frecency","buildReusableBlockInserterItem","reusableBlock","referencedBlocks","__experimentalGetParsedReusableBlock","referencedBlockType","ref","blockTypeInserterItems","reusableBlockInserterItems","getReusableBlocks","hasInserterItems","hasBlockType","hasReusableBlock","__experimentalGetAllowedBlocks","isLastBlockChangePersistent","isPersistentChange","__experimentalGetBlockListSettingsForBlocks","value","key","content","__unstableIsLastBlockChangeIgnored","isIgnoredChange","__experimentalGetLastBlockAttributeChanges","lastBlockAttributesChange","isNavigationMode","didAutomaticChange","automaticChangeStatus"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tcastArray,\n\tflatMap,\n\tfirst,\n\tget,\n\tincludes,\n\tisArray,\n\tisBoolean,\n\tlast,\n\tmap,\n\torderBy,\n\treduce,\n\tsome,\n\tfind,\n\tfilter,\n} from 'lodash';\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetBlockType,\n\tgetBlockTypes,\n\thasBlockSupport,\n\tparse,\n} from '@wordpress/blocks';\nimport { SVG, Rect, G, Path } from '@wordpress/components';\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n// Module constants\n\n/**\n * @private\n */\nexport const INSERTER_UTILITY_HIGH = 3;\n\n/**\n * @private\n */\nexport const INSERTER_UTILITY_MEDIUM = 2;\n\n/**\n * @private\n */\nexport const INSERTER_UTILITY_LOW = 1;\n\n/**\n * @private\n */\nexport const INSERTER_UTILITY_NONE = 0;\n\nconst MILLISECONDS_PER_HOUR = 3600 * 1000;\nconst MILLISECONDS_PER_DAY = 24 * 3600 * 1000;\nconst MILLISECONDS_PER_WEEK = 7 * 24 * 3600 * 1000;\nconst templateIcon = (\n\t<SVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n\t\t<Rect x=\"0\" fill=\"none\" width=\"24\" height=\"24\" />\n\t\t<G>\n\t\t\t<Path d=\"M19 3H5c-1.105 0-2 .895-2 2v14c0 1.105.895 2 2 2h14c1.105 0 2-.895 2-2V5c0-1.105-.895-2-2-2zM6 6h5v5H6V6zm4.5 13C9.12 19 8 17.88 8 16.5S9.12 14 10.5 14s2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5zm3-6l3-5 3 5h-6z\" />\n\t\t</G>\n\t</SVG>\n);\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Returns a block's name given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {string} Block name.\n */\nexport function getBlockName( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\treturn block ? block.name : null;\n}\n\n/**\n * Returns whether a block is valid or not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Is Valid.\n */\nexport function isBlockValid( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\treturn !! block && block.isValid;\n}\n\n/**\n * Returns a block's attributes given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object?} Block attributes.\n */\nexport function getBlockAttributes( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tif ( ! block ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.attributes[ clientId ];\n}\n\n/**\n * Returns a block given its client ID. This is a parsed copy of the block,\n * containing its `blockName`, `clientId`, and current `attributes` state. This\n * is not the block's registration settings, which must be retrieved from the\n * blocks module registration store.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Parsed block object.\n */\nexport const getBlock = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t\tinnerBlocks: getBlocks( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\t// Normally, we'd have both `getBlockAttributes` dependencies and\n\t\t// `getBlocks` (children) dependancies here but for performance reasons\n\t\t// we use a denormalized cache key computed in the reducer that takes both\n\t\t// the attributes and inner blocks into account. The value of the cache key\n\t\t// is being changed whenever one of these dependencies is out of date.\n\t\tstate.blocks.cache[ clientId ],\n\t]\n);\n\nexport const __unstableGetBlockWithoutInnerBlocks = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\tstate.blocks.byClientId[ clientId ],\n\t\tstate.blocks.attributes[ clientId ],\n\t]\n);\n\n/**\n * Returns all block objects for the current post being edited as an array in\n * the order they appear in the post.\n *\n * Note: It's important to memoize this selector to avoid return a new instance\n * on each call\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Post blocks.\n */\nexport const getBlocks = createSelector(\n\t( state, rootClientId ) => {\n\t\treturn map( getBlockOrder( state, rootClientId ), ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t);\n\t},\n\t( state ) => [\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns an array containing the clientIds of all descendants\n * of the blocks given.\n *\n * @param {Object} state Global application state.\n * @param {Array} clientIds Array of blocks to inspect.\n *\n * @return {Array} ids of descendants.\n */\nexport const getClientIdsOfDescendants = ( state, clientIds ) =>\n\tflatMap( clientIds, ( clientId ) => {\n\t\tconst descendants = getBlockOrder( state, clientId );\n\t\treturn [\n\t\t\t...descendants,\n\t\t\t...getClientIdsOfDescendants( state, descendants ),\n\t\t];\n\t} );\n\n/**\n * Returns an array containing the clientIds of the top-level blocks\n * and their descendants of any depth (for nested blocks).\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} ids of top-level and descendant blocks.\n */\nexport const getClientIdsWithDescendants = createSelector(\n\t( state ) => {\n\t\tconst topLevelIds = getBlockOrder( state );\n\t\treturn [\n\t\t\t...topLevelIds,\n\t\t\t...getClientIdsOfDescendants( state, topLevelIds ),\n\t\t];\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the total number of blocks, or the total number of blocks with a specific name in a post.\n * The number returned includes nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if specified only blocks of that type will be counted.\n *\n * @return {number} Number of blocks in the post, or number of blocks with name equal to blockName.\n */\nexport const getGlobalBlockCount = createSelector(\n\t( state, blockName ) => {\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tif ( ! blockName ) {\n\t\t\treturn clientIds.length;\n\t\t}\n\t\treturn reduce(\n\t\t\tclientIds,\n\t\t\t( accumulator, clientId ) => {\n\t\t\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\t\t\treturn block.name === blockName ? accumulator + 1 : accumulator;\n\t\t\t},\n\t\t\t0\n\t\t);\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * objects.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which blocks are to be returned.\n *\n * @return {WPBlock[]} Block objects.\n */\nexport const getBlocksByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\tmap( castArray( clientIds ), ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t),\n\t( state ) => [\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the number of blocks currently present in the post.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Number of blocks in the post.\n */\nexport function getBlockCount( state, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).length;\n}\n\n/**\n * Returns the current selection start block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection start information.\n */\nexport function getSelectionStart( state ) {\n\treturn state.selectionStart;\n}\n\n/**\n * Returns the current selection end block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection end information.\n */\nexport function getSelectionEnd( state ) {\n\treturn state.selectionEnd;\n}\n\n/**\n * Returns the current block selection start. This value may be null, and it\n * may represent either a singular block selection or multi-selection start.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection start.\n */\nexport function getBlockSelectionStart( state ) {\n\treturn state.selectionStart.clientId;\n}\n\n/**\n * Returns the current block selection end. This value may be null, and it\n * may represent either a singular block selection or multi-selection end.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection end.\n */\nexport function getBlockSelectionEnd( state ) {\n\treturn state.selectionEnd.clientId;\n}\n\n/**\n * Returns the number of blocks currently selected in the post.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of blocks selected in the post.\n */\nexport function getSelectedBlockCount( state ) {\n\tconst multiSelectedBlockCount = getMultiSelectedBlockClientIds( state )\n\t\t.length;\n\n\tif ( multiSelectedBlockCount ) {\n\t\treturn multiSelectedBlockCount;\n\t}\n\n\treturn state.selectionStart.clientId ? 1 : 0;\n}\n\n/**\n * Returns true if there is a single selected block, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether a single block is selected.\n */\nexport function hasSelectedBlock( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\treturn (\n\t\t!! selectionStart.clientId &&\n\t\tselectionStart.clientId === selectionEnd.clientId\n\t);\n}\n\n/**\n * Returns the currently selected block client ID, or null if there is no\n * selected block.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Selected block client ID.\n */\nexport function getSelectedBlockClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\tconst { clientId } = selectionStart;\n\n\tif ( ! clientId || clientId !== selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn clientId;\n}\n\n/**\n * Returns the currently selected block, or null if there is no selected block.\n *\n * @param {Object} state Global application state.\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlock( state ) {\n\tconst clientId = getSelectedBlockClientId( state );\n\treturn clientId ? getBlock( state, clientId ) : null;\n}\n\n/**\n * Given a block client ID, returns the root block from which the block is\n * nested, an empty string for top-level blocks, or null if the block does not\n * exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {?string} Root client ID, if exists\n */\nexport function getBlockRootClientId( state, clientId ) {\n\treturn state.blocks.parents[ clientId ] !== undefined\n\t\t? state.blocks.parents[ clientId ]\n\t\t: null;\n}\n\n/**\n * Given a block client ID, returns the list of all its parents from top to bottom.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n * @param {boolean} ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParents = createSelector(\n\t( state, clientId, ascending = false ) => {\n\t\tconst parents = [];\n\t\tlet current = clientId;\n\t\twhile ( !! state.blocks.parents[ current ] ) {\n\t\t\tcurrent = state.blocks.parents[ current ];\n\t\t\tparents.push( current );\n\t\t}\n\n\t\treturn ascending ? parents : parents.reverse();\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID and a block name,\n * returns the list of all its parents from top to bottom,\n * filtered by the given name.\n *\n * @param {Object} state     Editor state.\n * @param {string} clientId  Block from which to find root client ID.\n * @param {string} blockName Block name to filter.\n * @param {boolean} ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParentsByBlockName = createSelector(\n\t( state, clientId, blockName, ascending = false ) => {\n\t\tconst parents = getBlockParents( state, clientId, ascending );\n\t\treturn map(\n\t\t\tfilter(\n\t\t\t\tmap( parents, ( id ) => ( {\n\t\t\t\t\tid,\n\t\t\t\t\tname: getBlockName( state, id ),\n\t\t\t\t} ) ),\n\t\t\t\t{ name: blockName }\n\t\t\t),\n\t\t\t( { id } ) => id\n\t\t);\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {string} Root client ID\n */\nexport function getBlockHierarchyRootClientId( state, clientId ) {\n\tlet current = clientId;\n\tlet parent;\n\tdo {\n\t\tparent = current;\n\t\tcurrent = state.blocks.parents[ current ];\n\t} while ( current );\n\treturn parent;\n}\n\n/**\n * Given a block client ID, returns the lowest common ancestor with selected client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find common ancestor client ID.\n *\n * @return {string} Common ancestor client ID or undefined\n */\nexport function getLowestCommonAncestorWithSelectedBlock( state, clientId ) {\n\tconst selectedId = getSelectedBlockClientId( state );\n\tconst clientParents = [ ...getBlockParents( state, clientId ), clientId ];\n\tconst selectedParents = [\n\t\t...getBlockParents( state, selectedId ),\n\t\tselectedId,\n\t];\n\n\tlet lowestCommonAncestor;\n\n\tconst maxDepth = Math.min( clientParents.length, selectedParents.length );\n\tfor ( let index = 0; index < maxDepth; index++ ) {\n\t\tif ( clientParents[ index ] === selectedParents[ index ] ) {\n\t\t\tlowestCommonAncestor = clientParents[ index ];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn lowestCommonAncestor;\n}\n\n/**\n * Returns the client ID of the block adjacent one at the given reference\n * startClientId and modifier directionality. Defaults start startClientId to\n * the selected block, and direction as next block. Returns null if there is no\n * adjacent block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n * @param {?number} modifier      Directionality multiplier (1 next, -1\n *                                previous).\n *\n * @return {?string} Return the client ID of the block, or null if none exists.\n */\nexport function getAdjacentBlockClientId( state, startClientId, modifier = 1 ) {\n\t// Default to selected block.\n\tif ( startClientId === undefined ) {\n\t\tstartClientId = getSelectedBlockClientId( state );\n\t}\n\n\t// Try multi-selection starting at extent based on modifier.\n\tif ( startClientId === undefined ) {\n\t\tif ( modifier < 0 ) {\n\t\t\tstartClientId = getFirstMultiSelectedBlockClientId( state );\n\t\t} else {\n\t\t\tstartClientId = getLastMultiSelectedBlockClientId( state );\n\t\t}\n\t}\n\n\t// Validate working start client ID.\n\tif ( ! startClientId ) {\n\t\treturn null;\n\t}\n\n\t// Retrieve start block root client ID, being careful to allow the falsey\n\t// empty string top-level root by explicitly testing against null.\n\tconst rootClientId = getBlockRootClientId( state, startClientId );\n\tif ( rootClientId === null ) {\n\t\treturn null;\n\t}\n\n\tconst { order } = state.blocks;\n\tconst orderSet = order[ rootClientId ];\n\tconst index = orderSet.indexOf( startClientId );\n\tconst nextIndex = index + 1 * modifier;\n\n\t// Block was first in set and we're attempting to get previous.\n\tif ( nextIndex < 0 ) {\n\t\treturn null;\n\t}\n\n\t// Block was last in set and we're attempting to get next.\n\tif ( nextIndex === orderSet.length ) {\n\t\treturn null;\n\t}\n\n\t// Assume incremented index is within the set.\n\treturn orderSet[ nextIndex ];\n}\n\n/**\n * Returns the previous block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no previous\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getPreviousBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, -1 );\n}\n\n/**\n * Returns the next block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no next\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getNextBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, 1 );\n}\n\n/**\n * Returns the initial caret position for the selected block.\n * This position is to used to position the caret properly when the selected block changes.\n *\n * @param {Object} state Global application state.\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlocksInitialCaretPosition( state ) {\n\treturn state.initialPosition;\n}\n\n/**\n * Returns the current selection set of block client IDs (multiselection or single selection).\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport const getSelectedBlockClientIds = createSelector(\n\t( state ) => {\n\t\tconst { selectionStart, selectionEnd } = state;\n\n\t\tif (\n\t\t\tselectionStart.clientId === undefined ||\n\t\t\tselectionEnd.clientId === undefined\n\t\t) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\t\treturn [ selectionStart.clientId ];\n\t\t}\n\n\t\t// Retrieve root client ID to aid in retrieving relevant nested block\n\t\t// order, being careful to allow the falsey empty string top-level root\n\t\t// by explicitly testing against null.\n\t\tconst rootClientId = getBlockRootClientId(\n\t\t\tstate,\n\t\t\tselectionStart.clientId\n\t\t);\n\t\tif ( rootClientId === null ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tconst blockOrder = getBlockOrder( state, rootClientId );\n\t\tconst startIndex = blockOrder.indexOf( selectionStart.clientId );\n\t\tconst endIndex = blockOrder.indexOf( selectionEnd.clientId );\n\n\t\tif ( startIndex > endIndex ) {\n\t\t\treturn blockOrder.slice( endIndex, startIndex + 1 );\n\t\t}\n\n\t\treturn blockOrder.slice( startIndex, endIndex + 1 );\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selectionStart.clientId,\n\t\tstate.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the current multi-selection set of block client IDs, or an empty\n * array if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport function getMultiSelectedBlockClientIds( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\treturn getSelectedBlockClientIds( state );\n}\n\n/**\n * Returns the current multi-selection set of blocks, or an empty array if\n * there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block objects.\n */\nexport const getMultiSelectedBlocks = createSelector(\n\t( state ) => {\n\t\tconst multiSelectedBlockClientIds = getMultiSelectedBlockClientIds(\n\t\t\tstate\n\t\t);\n\t\tif ( ! multiSelectedBlockClientIds.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn multiSelectedBlockClientIds.map( ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t);\n\t},\n\t( state ) => [\n\t\t...getSelectedBlockClientIds.getDependants( state ),\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the client ID of the first block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} First block client ID in the multi-selection set.\n */\nexport function getFirstMultiSelectedBlockClientId( state ) {\n\treturn first( getMultiSelectedBlockClientIds( state ) ) || null;\n}\n\n/**\n * Returns the client ID of the last block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Last block client ID in the multi-selection set.\n */\nexport function getLastMultiSelectedBlockClientId( state ) {\n\treturn last( getMultiSelectedBlockClientIds( state ) ) || null;\n}\n\n/**\n * Returns true if a multi-selection exists, and the block corresponding to the\n * specified client ID is the first block of the multi-selection set, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is first in multi-selection.\n */\nexport function isFirstMultiSelectedBlock( state, clientId ) {\n\treturn getFirstMultiSelectedBlockClientId( state ) === clientId;\n}\n\n/**\n * Returns true if the client ID occurs within the block multi-selection, or\n * false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is in multi-selection set.\n */\nexport function isBlockMultiSelected( state, clientId ) {\n\treturn getMultiSelectedBlockClientIds( state ).indexOf( clientId ) !== -1;\n}\n\n/**\n * Returns true if an ancestor of the block is multi-selected, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether an ancestor of the block is in multi-selection\n *                   set.\n */\nexport const isAncestorMultiSelected = createSelector(\n\t( state, clientId ) => {\n\t\tlet ancestorClientId = clientId;\n\t\tlet isMultiSelected = false;\n\t\twhile ( ancestorClientId && ! isMultiSelected ) {\n\t\t\tancestorClientId = getBlockRootClientId( state, ancestorClientId );\n\t\t\tisMultiSelected = isBlockMultiSelected( state, ancestorClientId );\n\t\t}\n\t\treturn isMultiSelected;\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selectionStart.clientId,\n\t\tstate.selectionEnd.clientId,\n\t]\n);\n/**\n * Returns the client ID of the block which begins the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the first client ID in the selection.\n *\n * @see getFirstMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block beginning multi-selection.\n */\nexport function getMultiSelectedBlocksStartClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionStart.clientId || null;\n}\n\n/**\n * Returns the client ID of the block which ends the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the last client ID in the selection.\n *\n * @see getLastMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block ending multi-selection.\n */\nexport function getMultiSelectedBlocksEndClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionEnd.clientId || null;\n}\n\n/**\n * Returns an array containing all block client IDs in the editor in the order\n * they appear. Optionally accepts a root client ID of the block list for which\n * the order should be returned, defaulting to the top-level block order.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array} Ordered client IDs of editor blocks.\n */\nexport function getBlockOrder( state, rootClientId ) {\n\treturn state.blocks.order[ rootClientId || '' ] || EMPTY_ARRAY;\n}\n\n/**\n * Returns the index at which the block corresponding to the specified client\n * ID occurs within the block order, or `-1` if the block does not exist.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     Block client ID.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Index at which block exists in order.\n */\nexport function getBlockIndex( state, clientId, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).indexOf( clientId );\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected and no multi-selection exists, or false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and multi-selection exists.\n */\nexport function isBlockSelected( state, clientId ) {\n\tconst { selectionStart, selectionEnd } = state;\n\n\tif ( selectionStart.clientId !== selectionEnd.clientId ) {\n\t\treturn false;\n\t}\n\n\treturn selectionStart.clientId === clientId;\n}\n\n/**\n * Returns true if one of the block's inner blocks is selected.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block as an inner block selected\n */\nexport function hasSelectedInnerBlock( state, clientId, deep = false ) {\n\treturn some(\n\t\tgetBlockOrder( state, clientId ),\n\t\t( innerClientId ) =>\n\t\t\tisBlockSelected( state, innerClientId ) ||\n\t\t\tisBlockMultiSelected( state, innerClientId ) ||\n\t\t\t( deep && hasSelectedInnerBlock( state, innerClientId, deep ) )\n\t);\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected but isn't the last of the selected blocks. Here \"last\"\n * refers to the block sequence in the document, _not_ the sequence of\n * multi-selection, which is why `state.selectionEnd` isn't used.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and not the last in the\n *                   selection.\n */\nexport function isBlockWithinSelection( state, clientId ) {\n\tif ( ! clientId ) {\n\t\treturn false;\n\t}\n\n\tconst clientIds = getMultiSelectedBlockClientIds( state );\n\tconst index = clientIds.indexOf( clientId );\n\treturn index > -1 && index < clientIds.length - 1;\n}\n\n/**\n * Returns true if a multi-selection has been made, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether multi-selection has been made.\n */\nexport function hasMultiSelection( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\treturn selectionStart.clientId !== selectionEnd.clientId;\n}\n\n/**\n * Whether in the process of multi-selecting or not. This flag is only true\n * while the multi-selection is being selected (by mouse move), and is false\n * once the multi-selection has been settled.\n *\n * @see hasMultiSelection\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if multi-selecting, false if not.\n */\nexport function isMultiSelecting( state ) {\n\treturn state.isMultiSelecting;\n}\n\n/**\n * Selector that returns if multi-selection is enabled or not.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if it should be possible to multi-select blocks, false if multi-selection is disabled.\n */\nexport function isSelectionEnabled( state ) {\n\treturn state.isSelectionEnabled;\n}\n\n/**\n * Returns the block's editing mode, defaulting to \"visual\" if not explicitly\n * assigned.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Block editing mode.\n */\nexport function getBlockMode( state, clientId ) {\n\treturn state.blocksMode[ clientId ] || 'visual';\n}\n\n/**\n * Returns true if the user is typing, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is typing.\n */\nexport function isTyping( state ) {\n\treturn state.isTyping;\n}\n\n/**\n * Returns true if the user is dragging blocks, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is dragging blocks.\n */\nexport function isDraggingBlocks( state ) {\n\treturn state.isDraggingBlocks;\n}\n\n/**\n * Returns true if the caret is within formatted text, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the caret is within formatted text.\n */\nexport function isCaretWithinFormattedText( state ) {\n\treturn state.isCaretWithinFormattedText;\n}\n\n/**\n * Returns the insertion point, the index at which the new inserted block would\n * be placed. Defaults to the last index.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} Insertion point object with `rootClientId`, `index`.\n */\nexport function getBlockInsertionPoint( state ) {\n\tlet rootClientId, index;\n\n\tconst { insertionPoint, selectionEnd } = state;\n\tif ( insertionPoint !== null ) {\n\t\treturn insertionPoint;\n\t}\n\n\tconst { clientId } = selectionEnd;\n\n\tif ( clientId ) {\n\t\trootClientId = getBlockRootClientId( state, clientId ) || undefined;\n\t\tindex = getBlockIndex( state, selectionEnd.clientId, rootClientId ) + 1;\n\t} else {\n\t\tindex = getBlockOrder( state ).length;\n\t}\n\n\treturn { rootClientId, index };\n}\n\n/**\n * Returns true if we should show the block insertion point.\n *\n * @param {Object} state Global application state.\n *\n * @return {?boolean} Whether the insertion point is visible or not.\n */\nexport function isBlockInsertionPointVisible( state ) {\n\treturn state.insertionPoint !== null;\n}\n\n/**\n * Returns whether the blocks matches the template or not.\n *\n * @param {boolean} state\n * @return {?boolean} Whether the template is valid or not.\n */\nexport function isValidTemplate( state ) {\n\treturn state.template.isValid;\n}\n\n/**\n * Returns the defined block template\n *\n * @param {boolean} state\n * @return {?Array}        Block Template\n */\nexport function getTemplate( state ) {\n\treturn state.settings.template;\n}\n\n/**\n * Returns the defined block template lock. Optionally accepts a root block\n * client ID as context, otherwise defaulting to the global context.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional block root client ID.\n *\n * @return {?string} Block Template Lock\n */\nexport function getTemplateLock( state, rootClientId ) {\n\tif ( ! rootClientId ) {\n\t\treturn state.settings.templateLock;\n\t}\n\n\tconst blockListSettings = getBlockListSettings( state, rootClientId );\n\tif ( ! blockListSettings ) {\n\t\treturn null;\n\t}\n\n\treturn blockListSettings.templateLock;\n}\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n * This function is not exported and not memoized because using a memoized selector\n * inside another memoized selector is just a waste of time.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nconst canInsertBlockTypeUnmemoized = (\n\tstate,\n\tblockName,\n\trootClientId = null\n) => {\n\tconst checkAllowList = ( list, item, defaultResult = null ) => {\n\t\tif ( isBoolean( list ) ) {\n\t\t\treturn list;\n\t\t}\n\t\tif ( isArray( list ) ) {\n\t\t\t// TODO: when there is a canonical way to detect that we are editing a post\n\t\t\t// the following check should be changed to something like:\n\t\t\t// if ( includes( list, 'core/post-content' ) && getEditorMode() === 'post-content' && item === null )\n\t\t\tif ( includes( list, 'core/post-content' ) && item === null ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn includes( list, item );\n\t\t}\n\t\treturn defaultResult;\n\t};\n\n\tconst blockType = getBlockType( blockName );\n\tif ( ! blockType ) {\n\t\treturn false;\n\t}\n\n\tconst { allowedBlockTypes } = getSettings( state );\n\n\tconst isBlockAllowedInEditor = checkAllowList(\n\t\tallowedBlockTypes,\n\t\tblockName,\n\t\ttrue\n\t);\n\tif ( ! isBlockAllowedInEditor ) {\n\t\treturn false;\n\t}\n\n\tconst isLocked = !! getTemplateLock( state, rootClientId );\n\tif ( isLocked ) {\n\t\treturn false;\n\t}\n\n\tconst parentBlockListSettings = getBlockListSettings( state, rootClientId );\n\tconst parentAllowedBlocks = get( parentBlockListSettings, [\n\t\t'allowedBlocks',\n\t] );\n\tconst hasParentAllowedBlock = checkAllowList(\n\t\tparentAllowedBlocks,\n\t\tblockName\n\t);\n\n\tconst blockAllowedParentBlocks = blockType.parent;\n\tconst parentName = getBlockName( state, rootClientId );\n\tconst hasBlockAllowedParent = checkAllowList(\n\t\tblockAllowedParentBlocks,\n\t\tparentName\n\t);\n\n\tif ( hasParentAllowedBlock !== null && hasBlockAllowedParent !== null ) {\n\t\treturn hasParentAllowedBlock || hasBlockAllowedParent;\n\t} else if ( hasParentAllowedBlock !== null ) {\n\t\treturn hasParentAllowedBlock;\n\t} else if ( hasBlockAllowedParent !== null ) {\n\t\treturn hasBlockAllowedParent;\n\t}\n\n\treturn true;\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nexport const canInsertBlockType = createSelector(\n\tcanInsertBlockTypeUnmemoized,\n\t( state, blockName, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId[ rootClientId ],\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t]\n);\n\n/**\n * Returns information about how recently and frequently a block has been inserted.\n *\n * @param {Object} state Global application state.\n * @param {string} id    A string which identifies the insert, e.g. 'core/block/12'\n *\n * @return {?{ time: number, count: number }} An object containing `time` which is when the last\n *                                            insert occurred as a UNIX epoch, and `count` which is\n *                                            the number of inserts that have occurred.\n */\nfunction getInsertUsage( state, id ) {\n\treturn get( state.preferences.insertUsage, [ id ], null );\n}\n\n/**\n * Returns whether we can show a block type in the inserter\n *\n * @param {Object} state Global State\n * @param {Object} blockType BlockType\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be shown in the inserter.\n */\nconst canIncludeBlockTypeInInserter = ( state, blockType, rootClientId ) => {\n\tif ( ! hasBlockSupport( blockType, 'inserter', true ) ) {\n\t\treturn false;\n\t}\n\n\treturn canInsertBlockTypeUnmemoized( state, blockType.name, rootClientId );\n};\n\n/**\n * Determines the items that appear in the inserter. Includes both static\n * items (e.g. a regular block type) and dynamic items (e.g. a reusable block).\n *\n * Each item object contains what's necessary to display a button in the\n * inserter and handle its selection.\n *\n * The 'utility' property indicates how useful we think an item will be to the\n * user. There are 4 levels of utility:\n *\n * 1. Blocks that are contextually useful (utility = 3)\n * 2. Blocks that have been previously inserted (utility = 2)\n * 3. Blocks that are in the common category (utility = 1)\n * 4. All other blocks (utility = 0)\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'utility' and 'frecency'.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {WPEditorInserterItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorInserterItem\n * @property {string}   id                Unique identifier for the item.\n * @property {string}   name              The type of block to create.\n * @property {Object}   initialAttributes Attributes to pass to the newly created block.\n * @property {string}   title             Title of the item, as it appears in the inserter.\n * @property {string}   icon              Dashicon for the item, as it appears in the inserter.\n * @property {string}   category          Block category that the item is associated with.\n * @property {string[]} keywords          Keywords that can be searched to find this item.\n * @property {boolean}  isDisabled        Whether or not the user should be prevented from inserting\n *                                        this item.\n * @property {number}   utility           How useful we think this item is, between 0 and 3.\n * @property {number}   frecency          Hueristic that combines frequency and recency.\n */\nexport const getInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst calculateUtility = ( category, count, isContextual ) => {\n\t\t\tif ( isContextual ) {\n\t\t\t\treturn INSERTER_UTILITY_HIGH;\n\t\t\t} else if ( count > 0 ) {\n\t\t\t\treturn INSERTER_UTILITY_MEDIUM;\n\t\t\t} else if ( category === 'common' ) {\n\t\t\t\treturn INSERTER_UTILITY_LOW;\n\t\t\t}\n\t\t\treturn INSERTER_UTILITY_NONE;\n\t\t};\n\n\t\tconst calculateFrecency = ( time, count ) => {\n\t\t\tif ( ! time ) {\n\t\t\t\treturn count;\n\t\t\t}\n\n\t\t\t// The selector is cached, which means Date.now() is the last time that the\n\t\t\t// relevant state changed. This suits our needs.\n\t\t\tconst duration = Date.now() - time;\n\n\t\t\tswitch ( true ) {\n\t\t\t\tcase duration < MILLISECONDS_PER_HOUR:\n\t\t\t\t\treturn count * 4;\n\t\t\t\tcase duration < MILLISECONDS_PER_DAY:\n\t\t\t\t\treturn count * 2;\n\t\t\t\tcase duration < MILLISECONDS_PER_WEEK:\n\t\t\t\t\treturn count / 2;\n\t\t\t\tdefault:\n\t\t\t\t\treturn count / 4;\n\t\t\t}\n\t\t};\n\n\t\tconst buildBlockTypeInserterItem = ( blockType ) => {\n\t\t\tconst id = blockType.name;\n\n\t\t\tlet isDisabled = false;\n\t\t\tif ( ! hasBlockSupport( blockType.name, 'multiple', true ) ) {\n\t\t\t\tisDisabled = some(\n\t\t\t\t\tgetBlocksByClientId(\n\t\t\t\t\t\tstate,\n\t\t\t\t\t\tgetClientIdsWithDescendants( state )\n\t\t\t\t\t),\n\t\t\t\t\t{\n\t\t\t\t\t\tname: blockType.name,\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst isContextual = isArray( blockType.parent );\n\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\t\tconst inserterVariations = blockType.variations.filter(\n\t\t\t\t( { scope } ) => ! scope || scope.includes( 'inserter' )\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tname: blockType.name,\n\t\t\t\tinitialAttributes: {},\n\t\t\t\ttitle: blockType.title,\n\t\t\t\tdescription: blockType.description,\n\t\t\t\ticon: blockType.icon,\n\t\t\t\tcategory: blockType.category,\n\t\t\t\tkeywords: blockType.keywords,\n\t\t\t\tvariations: inserterVariations,\n\t\t\t\texample: blockType.example,\n\t\t\t\tisDisabled,\n\t\t\t\tutility: calculateUtility(\n\t\t\t\t\tblockType.category,\n\t\t\t\t\tcount,\n\t\t\t\t\tisContextual\n\t\t\t\t),\n\t\t\t\tfrecency: calculateFrecency( time, count ),\n\t\t\t};\n\t\t};\n\n\t\tconst buildReusableBlockInserterItem = ( reusableBlock ) => {\n\t\t\tconst id = `core/block/${ reusableBlock.id }`;\n\n\t\t\tconst referencedBlocks = __experimentalGetParsedReusableBlock(\n\t\t\t\tstate,\n\t\t\t\treusableBlock.id\n\t\t\t);\n\t\t\tlet referencedBlockType;\n\t\t\tif ( referencedBlocks.length === 1 ) {\n\t\t\t\treferencedBlockType = getBlockType(\n\t\t\t\t\treferencedBlocks[ 0 ].name\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\t\tconst utility = calculateUtility( 'reusable', count, false );\n\t\t\tconst frecency = calculateFrecency( time, count );\n\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tname: 'core/block',\n\t\t\t\tinitialAttributes: { ref: reusableBlock.id },\n\t\t\t\ttitle: reusableBlock.title,\n\t\t\t\ticon: referencedBlockType\n\t\t\t\t\t? referencedBlockType.icon\n\t\t\t\t\t: templateIcon,\n\t\t\t\tcategory: 'reusable',\n\t\t\t\tkeywords: [],\n\t\t\t\tisDisabled: false,\n\t\t\t\tutility,\n\t\t\t\tfrecency,\n\t\t\t};\n\t\t};\n\n\t\tconst blockTypeInserterItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeInserterItem );\n\n\t\tconst reusableBlockInserterItems = canInsertBlockTypeUnmemoized(\n\t\t\tstate,\n\t\t\t'core/block',\n\t\t\trootClientId\n\t\t)\n\t\t\t? getReusableBlocks( state ).map( buildReusableBlockInserterItem )\n\t\t\t: [];\n\n\t\treturn orderBy(\n\t\t\t[ ...blockTypeInserterItems, ...reusableBlockInserterItems ],\n\t\t\t[ 'utility', 'frecency' ],\n\t\t\t[ 'desc', 'desc' ]\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines whether there are items to show in the inserter.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Items that appear in inserter.\n */\nexport const hasInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst hasBlockType = some( getBlockTypes(), ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t\tif ( hasBlockType ) {\n\t\t\treturn true;\n\t\t}\n\t\tconst hasReusableBlock =\n\t\t\tcanInsertBlockTypeUnmemoized( state, 'core/block', rootClientId ) &&\n\t\t\tgetReusableBlocks( state ).length > 0;\n\n\t\treturn hasReusableBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Returns the list of allowed inserter blocks for inner blocks children\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array?} The list of allowed block types.\n */\nexport const __experimentalGetAllowedBlocks = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tif ( ! rootClientId ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn filter( getBlockTypes(), ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Returns the Block List settings of a block, if any exist.\n *\n * @param {Object}  state    Editor state.\n * @param {?string} clientId Block client ID.\n *\n * @return {?Object} Block settings of the block if set.\n */\nexport function getBlockListSettings( state, clientId ) {\n\treturn state.blockListSettings[ clientId ];\n}\n\n/**\n * Returns the editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getSettings( state ) {\n\treturn state.settings;\n}\n\n/**\n * Returns true if the most recent block change is be considered persistent, or\n * false otherwise. A persistent change is one committed by BlockEditorProvider\n * via its `onChange` callback, in addition to `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was persistent.\n */\nexport function isLastBlockChangePersistent( state ) {\n\treturn state.blocks.isPersistentChange;\n}\n\n/**\n * Returns the Block List settings for an array of blocks, if any exist.\n *\n * @param {Object}  state    Editor state.\n * @param {Array} clientIds Block client IDs.\n *\n * @return {Array} Block List Settings for each of the found blocks\n */\nexport const __experimentalGetBlockListSettingsForBlocks = createSelector(\n\t( state, clientIds ) => {\n\t\treturn filter( state.blockListSettings, ( value, key ) =>\n\t\t\tclientIds.includes( key )\n\t\t);\n\t},\n\t( state ) => [ state.blockListSettings ]\n);\n\n/**\n * Returns the parsed block saved as shared block with the given ID.\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The shared block's ID.\n *\n * @return {Object} The parsed block.\n */\nexport const __experimentalGetParsedReusableBlock = createSelector(\n\t( state, ref ) => {\n\t\tconst reusableBlock = find(\n\t\t\tgetReusableBlocks( state ),\n\t\t\t( block ) => block.id === ref\n\t\t);\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn parse( reusableBlock.content );\n\t},\n\t( state ) => [ getReusableBlocks( state ) ]\n);\n\n/**\n * Returns true if the most recent block change is be considered ignored, or\n * false otherwise. An ignored change is one not to be committed by\n * BlockEditorProvider, neither via `onChange` nor `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was ignored.\n */\nexport function __unstableIsLastBlockChangeIgnored( state ) {\n\t// TODO: Removal Plan: Changes incurred by RECEIVE_BLOCKS should not be\n\t// ignored if in-fact they result in a change in blocks state. The current\n\t// need to ignore changes not a result of user interaction should be\n\t// accounted for in the refactoring of reusable blocks as occurring within\n\t// their own separate block editor / state (#7119).\n\treturn state.blocks.isIgnoredChange;\n}\n\n/**\n * Returns the block attributes changed as a result of the last dispatched\n * action.\n *\n * @param {Object} state Block editor state.\n *\n * @return {Object<string,Object>} Subsets of block attributes changed, keyed\n *                                 by block client ID.\n */\nexport function __experimentalGetLastBlockAttributeChanges( state ) {\n\treturn state.lastBlockAttributesChange;\n}\n\n/**\n * Returns the available reusable blocks\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} Reusable blocks\n */\nfunction getReusableBlocks( state ) {\n\treturn get(\n\t\tstate,\n\t\t[ 'settings', '__experimentalReusableBlocks' ],\n\t\tEMPTY_ARRAY\n\t);\n}\n\n/**\n * Returns whether the navigation mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean}     Is navigation mode enabled.\n */\nexport function isNavigationMode( state ) {\n\treturn state.isNavigationMode;\n}\n\n/**\n * Returns true if the last change was an automatic change, false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the last change was automatic.\n */\nexport function didAutomaticChange( state ) {\n\treturn !! state.automaticChangeStatus;\n}\n"]}