"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _blocks2 = require("@wordpress/blocks");

var _dom = require("@wordpress/dom");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _getPasteEventData2 = require("../../utils/get-paste-event-data");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function CopyHandler(_ref) {
  var children = _ref.children,
      handler = _ref.handler;
  return (0, _element.createElement)("div", {
    onCopy: handler,
    onCut: handler,
    onPaste: handler
  }, children);
}

var _default = (0, _compose.compose)([(0, _data.withDispatch)(function (dispatch, ownProps, _ref2) {
  var select = _ref2.select;

  var _select = select('core/block-editor'),
      getBlocksByClientId = _select.getBlocksByClientId,
      getSelectedBlockClientIds = _select.getSelectedBlockClientIds,
      hasMultiSelection = _select.hasMultiSelection,
      getSettings = _select.getSettings;

  var _dispatch = dispatch('core/block-editor'),
      removeBlocks = _dispatch.removeBlocks,
      replaceBlocks = _dispatch.replaceBlocks;

  var _getSettings = getSettings(),
      canUserUseUnfilteredHTML = _getSettings.__experimentalCanUserUseUnfilteredHTML;

  return {
    handler: function handler(event) {
      var selectedBlockClientIds = getSelectedBlockClientIds();

      if (selectedBlockClientIds.length === 0) {
        return;
      } // Always handle multiple selected blocks.
      // Let native copy behaviour take over in input fields.


      if (!hasMultiSelection() && (0, _dom.documentHasSelection)()) {
        return;
      }

      event.preventDefault();

      if (event.type === 'copy' || event.type === 'cut') {
        var blocks = getBlocksByClientId(selectedBlockClientIds);
        var serialized = (0, _blocks2.serialize)(blocks);
        event.clipboardData.setData('text/plain', serialized);
        event.clipboardData.setData('text/html', serialized);
      }

      if (event.type === 'cut') {
        removeBlocks(selectedBlockClientIds);
      } else if (event.type === 'paste') {
        var _getPasteEventData = (0, _getPasteEventData2.getPasteEventData)(event),
            plainText = _getPasteEventData.plainText,
            html = _getPasteEventData.html;

        var _blocks = (0, _blocks2.pasteHandler)({
          HTML: html,
          plainText: plainText,
          mode: 'BLOCKS',
          canUserUseUnfilteredHTML: canUserUseUnfilteredHTML
        });

        replaceBlocks(selectedBlockClientIds, _blocks);
      }
    }
  };
})])(CopyHandler);

exports.default = _default;
//# sourceMappingURL=index.js.map