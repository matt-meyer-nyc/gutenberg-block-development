"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _reactNative = require("react-native");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _icons = require("@wordpress/icons");

var _style = _interopRequireDefault(require("./style.scss"));

var _blockMover = _interopRequireDefault(require("../block-mover"));

var _blockSettings = require("../block-settings");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var BlockMobileToolbar = function BlockMobileToolbar(_ref) {
  var clientId = _ref.clientId,
      onDelete = _ref.onDelete,
      order = _ref.order;
  return (0, _element.createElement)(_reactNative.View, {
    style: _style.default.toolbar
  }, (0, _element.createElement)(_blockMover.default, {
    clientIds: [clientId]
  }), (0, _element.createElement)(_reactNative.View, {
    style: _style.default.spacer
  }), (0, _element.createElement)(_blockSettings.BlockSettingsButton.Slot, null), (0, _element.createElement)(_components.ToolbarButton, {
    title: (0, _i18n.sprintf)(
    /* translators: accessibility text. %s: current block position (number). */
    (0, _i18n.__)('Remove block at row %s'), order + 1),
    onClick: onDelete,
    icon: _icons.trash,
    extraProps: {
      hint: (0, _i18n.__)('Double tap to remove the block')
    }
  }));
};

var _default = (0, _compose.compose)((0, _data.withSelect)(function (select, _ref2) {
  var clientId = _ref2.clientId;

  var _select = select('core/block-editor'),
      getBlockIndex = _select.getBlockIndex;

  return {
    order: getBlockIndex(clientId)
  };
}), (0, _data.withDispatch)(function (dispatch, _ref3) {
  var clientId = _ref3.clientId,
      rootClientId = _ref3.rootClientId;

  var _dispatch = dispatch('core/block-editor'),
      removeBlock = _dispatch.removeBlock;

  return {
    onDelete: function onDelete() {
      _reactNative.Keyboard.dismiss();

      removeBlock(clientId, rootClientId);
    }
  };
}))(BlockMobileToolbar);

exports.default = _default;
//# sourceMappingURL=index.native.js.map