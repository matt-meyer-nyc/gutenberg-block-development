{"version":3,"sources":["@wordpress/block-editor/src/components/provider/index.js"],"names":["BlockEditorProvider","props","updateSettings","settings","resetBlocks","value","attachChangeObserver","registry","isSyncingOutcomingValue","prevProps","selectionStart","selectionEnd","resetSelection","includes","isSyncingIncomingValue","unsubscribe","select","getBlocks","getSelectionStart","getSelectionEnd","isLastBlockChangePersistent","__unstableIsLastBlockChangeIgnored","blocks","isPersistent","subscribe","onChange","noop","onInput","newBlocks","newIsPersistent","push","children","Component","withRegistryProvider","dispatch"],"mappings":";;;;;;;;;;;;;;;;;;;AAGA;;AAKA;;AACA;;AACA;;AAKA;;AAfA;;;;AAKA;;;;AAOA;;;;AAKA;IAEMA,mB;;;;;;;;;;;;wCACe;AACnB,WAAKC,KAAL,CAAWC,cAAX,CAA2B,KAAKD,KAAL,CAAWE,QAAtC;AACA,WAAKF,KAAL,CAAWG,WAAX,CAAwB,KAAKH,KAAL,CAAWI,KAAnC;AACA,WAAKC,oBAAL,CAA2B,KAAKL,KAAL,CAAWM,QAAtC;AACA,WAAKC,uBAAL,GAA+B,EAA/B;AACA;;;uCAEmBC,S,EAAY;AAAA,wBAU3B,KAAKR,KAVsB;AAAA,UAE9BE,QAF8B,eAE9BA,QAF8B;AAAA,UAG9BD,cAH8B,eAG9BA,cAH8B;AAAA,UAI9BG,KAJ8B,eAI9BA,KAJ8B;AAAA,UAK9BD,WAL8B,eAK9BA,WAL8B;AAAA,UAM9BM,cAN8B,eAM9BA,cAN8B;AAAA,UAO9BC,YAP8B,eAO9BA,YAP8B;AAAA,UAQ9BC,cAR8B,eAQ9BA,cAR8B;AAAA,UAS9BL,QAT8B,eAS9BA,QAT8B;;AAY/B,UAAKJ,QAAQ,KAAKM,SAAS,CAACN,QAA5B,EAAuC;AACtCD,QAAAA,cAAc,CAAEC,QAAF,CAAd;AACA;;AAED,UAAKI,QAAQ,KAAKE,SAAS,CAACF,QAA5B,EAAuC;AACtC,aAAKD,oBAAL,CAA2BC,QAA3B;AACA;;AAED,UAAK,KAAKC,uBAAL,CAA6BK,QAA7B,CAAuCR,KAAvC,CAAL,EAAsD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,YAAK,kBAAM,KAAKG,uBAAX,MAAyCH,KAA9C,EAAsD;AACrD,eAAKG,uBAAL,GAA+B,EAA/B;AACA;AACD,OAVD,MAUO,IAAKH,KAAK,KAAKI,SAAS,CAACJ,KAAzB,EAAiC;AACvC;AACA;AACA;AACA;AACA,aAAKG,uBAAL,GAA+B,EAA/B;AACA,aAAKM,sBAAL,GAA8BT,KAA9B;AACAD,QAAAA,WAAW,CAAEC,KAAF,CAAX;;AAEA,YAAKK,cAAc,IAAIC,YAAvB,EAAsC;AACrCC,UAAAA,cAAc,CAAEF,cAAF,EAAkBC,YAAlB,CAAd;AACA;AACD;AACD;;;2CAEsB;AACtB,UAAK,KAAKI,WAAV,EAAwB;AACvB,aAAKA,WAAL;AACA;AACD;AAED;;;;;;;;;;;;;;;yCAYsBR,Q,EAAW;AAAA;;AAChC,UAAK,KAAKQ,WAAV,EAAwB;AACvB,aAAKA,WAAL;AACA;;AAH+B,6BAW5BR,QAAQ,CAACS,MAAT,CAAiB,mBAAjB,CAX4B;AAAA,UAM/BC,SAN+B,oBAM/BA,SAN+B;AAAA,UAO/BC,iBAP+B,oBAO/BA,iBAP+B;AAAA,UAQ/BC,eAR+B,oBAQ/BA,eAR+B;AAAA,UAS/BC,2BAT+B,oBAS/BA,2BAT+B;AAAA,UAU/BC,kCAV+B,oBAU/BA,kCAV+B;;AAahC,UAAIC,MAAM,GAAGL,SAAS,EAAtB;AACA,UAAIM,YAAY,GAAGH,2BAA2B,EAA9C;AAEA,WAAKL,WAAL,GAAmBR,QAAQ,CAACiB,SAAT,CAAoB,YAAM;AAAA,2BACA,KAAI,CAACvB,KADL;AAAA,iDACpCwB,QADoC;AAAA,YACpCA,QADoC,sCACzBC,YADyB;AAAA,gDACnBC,OADmB;AAAA,YACnBA,OADmB,qCACTD,YADS;AAG5C,YAAME,SAAS,GAAGX,SAAS,EAA3B;AACA,YAAMY,eAAe,GAAGT,2BAA2B,EAAnD;;AAEA,YACCQ,SAAS,KAAKN,MAAd,KACE,KAAI,CAACR,sBAAL,IACDO,kCAAkC,EAFnC,CADD,EAIE;AACD,UAAA,KAAI,CAACP,sBAAL,GAA8B,IAA9B;AACAQ,UAAAA,MAAM,GAAGM,SAAT;AACAL,UAAAA,YAAY,GAAGM,eAAf;AACA;AACA;;AAED,YACCD,SAAS,KAAKN,MAAd,IACA;AACEO,QAAAA,eAAe,IAAI,CAAEN,YAHxB,EAIE;AACD;AACA;AACA,cAAKK,SAAS,KAAKN,MAAnB,EAA4B;AAC3B,YAAA,KAAI,CAACd,uBAAL,CAA6BsB,IAA7B,CAAmCF,SAAnC;AACA;;AAEDN,UAAAA,MAAM,GAAGM,SAAT;AACAL,UAAAA,YAAY,GAAGM,eAAf;AAEA,cAAMnB,cAAc,GAAGQ,iBAAiB,EAAxC;AACA,cAAMP,YAAY,GAAGQ,eAAe,EAApC;;AAEA,cAAKI,YAAL,EAAoB;AACnBE,YAAAA,QAAQ,CAAEH,MAAF,EAAU;AAAEZ,cAAAA,cAAc,EAAdA,cAAF;AAAkBC,cAAAA,YAAY,EAAZA;AAAlB,aAAV,CAAR;AACA,WAFD,MAEO;AACNgB,YAAAA,OAAO,CAAEL,MAAF,EAAU;AAAEZ,cAAAA,cAAc,EAAdA,cAAF;AAAkBC,cAAAA,YAAY,EAAZA;AAAlB,aAAV,CAAP;AACA;AACD;AACD,OAxCkB,CAAnB;AAyCA;;;6BAEQ;AAAA,UACAoB,QADA,GACa,KAAK9B,KADlB,CACA8B,QADA;AAGR,aAAOA,QAAP;AACA;;;EAtIgCC,kB;;eAyInB,sBAAS,CACvBC,6BADuB,EAEvB,wBAAc,UAAEC,QAAF,EAAgB;AAAA,kBAC2BA,QAAQ,CAC/D,mBAD+D,CADnC;AAAA,MACrBhC,cADqB,aACrBA,cADqB;AAAA,MACLE,WADK,aACLA,WADK;AAAA,MACQQ,cADR,aACQA,cADR;;AAK7B,SAAO;AACNV,IAAAA,cAAc,EAAdA,cADM;AAENE,IAAAA,WAAW,EAAXA,WAFM;AAGNQ,IAAAA,cAAc,EAAdA;AAHM,GAAP;AAKA,CAVD,CAFuB,CAAT,EAaVZ,mBAbU,C","sourcesContent":["/**\n * External dependencies\n */\nimport { last, noop } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component } from '@wordpress/element';\nimport { withDispatch } from '@wordpress/data';\nimport { compose } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport withRegistryProvider from './with-registry-provider';\n\n/** @typedef {import('@wordpress/data').WPDataRegistry} WPDataRegistry */\n\nclass BlockEditorProvider extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.updateSettings( this.props.settings );\n\t\tthis.props.resetBlocks( this.props.value );\n\t\tthis.attachChangeObserver( this.props.registry );\n\t\tthis.isSyncingOutcomingValue = [];\n\t}\n\n\tcomponentDidUpdate( prevProps ) {\n\t\tconst {\n\t\t\tsettings,\n\t\t\tupdateSettings,\n\t\t\tvalue,\n\t\t\tresetBlocks,\n\t\t\tselectionStart,\n\t\t\tselectionEnd,\n\t\t\tresetSelection,\n\t\t\tregistry,\n\t\t} = this.props;\n\n\t\tif ( settings !== prevProps.settings ) {\n\t\t\tupdateSettings( settings );\n\t\t}\n\n\t\tif ( registry !== prevProps.registry ) {\n\t\t\tthis.attachChangeObserver( registry );\n\t\t}\n\n\t\tif ( this.isSyncingOutcomingValue.includes( value ) ) {\n\t\t\t// Skip block reset if the value matches expected outbound sync\n\t\t\t// triggered by this component by a preceding change detection.\n\t\t\t// Only skip if the value matches expectation, since a reset should\n\t\t\t// still occur if the value is modified (not equal by reference),\n\t\t\t// to allow that the consumer may apply modifications to reflect\n\t\t\t// back on the editor.\n\t\t\tif ( last( this.isSyncingOutcomingValue ) === value ) {\n\t\t\t\tthis.isSyncingOutcomingValue = [];\n\t\t\t}\n\t\t} else if ( value !== prevProps.value ) {\n\t\t\t// Reset changing value in all other cases than the sync described\n\t\t\t// above. Since this can be reached in an update following an out-\n\t\t\t// bound sync, unset the outbound value to avoid considering it in\n\t\t\t// subsequent renders.\n\t\t\tthis.isSyncingOutcomingValue = [];\n\t\t\tthis.isSyncingIncomingValue = value;\n\t\t\tresetBlocks( value );\n\n\t\t\tif ( selectionStart && selectionEnd ) {\n\t\t\t\tresetSelection( selectionStart, selectionEnd );\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tif ( this.unsubscribe ) {\n\t\t\tthis.unsubscribe();\n\t\t}\n\t}\n\n\t/**\n\t * Given a registry object, overrides the default dispatch behavior for the\n\t * `core/block-editor` store to interpret a state change and decide whether\n\t * we should call `onChange` or `onInput` depending on whether the change\n\t * is persistent or not.\n\t *\n\t * This needs to be done synchronously after state changes (instead of using\n\t * `componentDidUpdate`) in order to avoid batching these changes.\n\t *\n\t * @param {WPDataRegistry} registry Registry from which block editor\n\t *                                  dispatch is to be overridden.\n\t */\n\tattachChangeObserver( registry ) {\n\t\tif ( this.unsubscribe ) {\n\t\t\tthis.unsubscribe();\n\t\t}\n\n\t\tconst {\n\t\t\tgetBlocks,\n\t\t\tgetSelectionStart,\n\t\t\tgetSelectionEnd,\n\t\t\tisLastBlockChangePersistent,\n\t\t\t__unstableIsLastBlockChangeIgnored,\n\t\t} = registry.select( 'core/block-editor' );\n\n\t\tlet blocks = getBlocks();\n\t\tlet isPersistent = isLastBlockChangePersistent();\n\n\t\tthis.unsubscribe = registry.subscribe( () => {\n\t\t\tconst { onChange = noop, onInput = noop } = this.props;\n\n\t\t\tconst newBlocks = getBlocks();\n\t\t\tconst newIsPersistent = isLastBlockChangePersistent();\n\n\t\t\tif (\n\t\t\t\tnewBlocks !== blocks &&\n\t\t\t\t( this.isSyncingIncomingValue ||\n\t\t\t\t\t__unstableIsLastBlockChangeIgnored() )\n\t\t\t) {\n\t\t\t\tthis.isSyncingIncomingValue = null;\n\t\t\t\tblocks = newBlocks;\n\t\t\t\tisPersistent = newIsPersistent;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tnewBlocks !== blocks ||\n\t\t\t\t// This happens when a previous input is explicitely marked as persistent.\n\t\t\t\t( newIsPersistent && ! isPersistent )\n\t\t\t) {\n\t\t\t\t// When knowing the blocks value is changing, assign instance\n\t\t\t\t// value to skip reset in subsequent `componentDidUpdate`.\n\t\t\t\tif ( newBlocks !== blocks ) {\n\t\t\t\t\tthis.isSyncingOutcomingValue.push( newBlocks );\n\t\t\t\t}\n\n\t\t\t\tblocks = newBlocks;\n\t\t\t\tisPersistent = newIsPersistent;\n\n\t\t\t\tconst selectionStart = getSelectionStart();\n\t\t\t\tconst selectionEnd = getSelectionEnd();\n\n\t\t\t\tif ( isPersistent ) {\n\t\t\t\t\tonChange( blocks, { selectionStart, selectionEnd } );\n\t\t\t\t} else {\n\t\t\t\t\tonInput( blocks, { selectionStart, selectionEnd } );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\trender() {\n\t\tconst { children } = this.props;\n\n\t\treturn children;\n\t}\n}\n\nexport default compose( [\n\twithRegistryProvider,\n\twithDispatch( ( dispatch ) => {\n\t\tconst { updateSettings, resetBlocks, resetSelection } = dispatch(\n\t\t\t'core/block-editor'\n\t\t);\n\n\t\treturn {\n\t\t\tupdateSettings,\n\t\t\tresetBlocks,\n\t\t\tresetSelection,\n\t\t};\n\t} ),\n] )( BlockEditorProvider );\n"]}