"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _url = require("@wordpress/url");

var _compose = require("@wordpress/compose");

var _data = require("@wordpress/data");

var _dom = require("@wordpress/dom");

var _settingsDrawer = _interopRequireDefault(require("./settings-drawer"));

var _searchItem = _interopRequireDefault(require("./search-item"));

var _searchInput = _interopRequireDefault(require("./search-input"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Default properties associated with a link control value.
 *
 * @typedef WPLinkControlDefaultValue
 *
 * @property {string}   url           Link URL.
 * @property {string=}  title         Link title.
 * @property {boolean=} opensInNewTab Whether link should open in a new browser
 *                                    tab. This value is only assigned if not
 *                                    providing a custom `settings` prop.
 */

/**
 * Custom settings values associated with a link.
 *
 * @typedef {{[setting:string]:any}} WPLinkControlSettingsValue
 */

/**
 * Custom settings values associated with a link.
 *
 * @typedef WPLinkControlSetting
 *
 * @property {string} id    Identifier to use as property for setting value.
 * @property {string} title Human-readable label to show in user interface.
 */

/**
 * Properties associated with a link control value, composed as a union of the
 * default properties and any custom settings values.
 *
 * @typedef {WPLinkControlDefaultValue&WPLinkControlSettingsValue} WPLinkControlValue
 */

/** @typedef {(nextValue:WPLinkControlValue)=>void} WPLinkControlOnChangeProp */

/**
 * @typedef WPLinkControlProps
 *
 * @property {(WPLinkControlSetting[])=}  settings               An array of settings objects. Each object will used to
 *                                                               render a `ToggleControl` for that setting.
 * @property {boolean=}                   forceIsEditingLink     If passed as either `true` or `false`, controls the
 *                                                               internal editing state of the component to respective
 *                                                               show or not show the URL input field.
 * @property {WPLinkControlValue=}        value                  Current link value.
 * @property {WPLinkControlOnChangeProp=} onChange               Value change handler, called with the updated value if
 *                                                               the user selects a new link or updates settings.
 * @property {boolean=}                   showInitialSuggestions Whether to present initial suggestions immediately.
 */

/**
 * Renders a link control. A link control is a controlled input which maintains
 * a value associated with a link (HTML anchor element) and relevant settings
 * for how that link is expected to behave.
 *
 * @param {WPLinkControlProps} props Component props.
 */
function LinkControl(_ref) {
  var value = _ref.value,
      settings = _ref.settings,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? _lodash.noop : _ref$onChange,
      showInitialSuggestions = _ref.showInitialSuggestions,
      forceIsEditingLink = _ref.forceIsEditingLink;
  var wrapperNode = (0, _element.useRef)();
  var instanceId = (0, _compose.useInstanceId)(LinkControl);

  var _useState = (0, _element.useState)(value && value.url || ''),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  var _useState3 = (0, _element.useState)(forceIsEditingLink !== undefined ? forceIsEditingLink : !value || !value.url),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      isEditingLink = _useState4[0],
      setIsEditingLink = _useState4[1];

  var isEndingEditWithFocus = (0, _element.useRef)(false);

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select('core/block-editor'),
        getSettings = _select.getSettings;

    return {
      fetchSearchSuggestions: getSettings().__experimentalFetchLinkSuggestions
    };
  }, []),
      fetchSearchSuggestions = _useSelect.fetchSearchSuggestions;

  var displayURL = value && (0, _url.filterURLForDisplay)((0, _url.safeDecodeURI)(value.url)) || '';
  (0, _element.useEffect)(function () {
    if (forceIsEditingLink !== undefined && forceIsEditingLink !== isEditingLink) {
      setIsEditingLink(forceIsEditingLink);
    }
  }, [forceIsEditingLink]);
  (0, _element.useEffect)(function () {
    // When `isEditingLink` is set to `false`, a focus loss could occur
    // since the link input may be removed from the DOM. To avoid this,
    // reinstate focus to a suitable target if focus has in-fact been lost.
    // Note that the check is necessary because while typically unsetting
    // edit mode would render the read-only mode's link element, it isn't
    // guaranteed. The link input may continue to be shown if the next value
    // is still unassigned after calling `onChange`.
    var hadFocusLoss = isEndingEditWithFocus.current && wrapperNode.current && !wrapperNode.current.contains(document.activeElement);

    if (hadFocusLoss) {
      // Prefer to focus a natural focusable descendent of the wrapper,
      // but settle for the wrapper if there are no other options.
      var nextFocusTarget = _dom.focus.focusable.find(wrapperNode.current)[0] || wrapperNode.current;
      nextFocusTarget.focus();
    }

    isEndingEditWithFocus.current = false;
  }, [isEditingLink]);
  /**
   * onChange LinkControlSearchInput event handler
   *
   * @param {string} val Current value returned by the search.
   */

  var onInputChange = function onInputChange() {
    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    setInputValue(val);
  };

  var handleDirectEntry = function handleDirectEntry(val) {
    var type = 'URL';
    var protocol = (0, _url.getProtocol)(val) || '';

    if (protocol.includes('mailto')) {
      type = 'mailto';
    }

    if (protocol.includes('tel')) {
      type = 'tel';
    }

    if ((0, _lodash.startsWith)(val, '#')) {
      type = 'internal';
    }

    return Promise.resolve([{
      id: '-1',
      title: val,
      url: type === 'URL' ? (0, _url.prependHTTP)(val) : val,
      type: type
    }]);
  };

  var handleEntitySearch =
  /*#__PURE__*/
  function () {
    var _ref2 = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee(val, args) {
      var results, couldBeURL;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return Promise.all([fetchSearchSuggestions(val, _objectSpread({}, args.isInitialSuggestions ? {
                perPage: 3
              } : {})), handleDirectEntry(val)]);

            case 2:
              results = _context.sent;
              couldBeURL = !val.includes(' '); // If it's potentially a URL search then concat on a URL search suggestion
              // just for good measure. That way once the actual results run out we always
              // have a URL option to fallback on.

              return _context.abrupt("return", couldBeURL && !args.isInitialSuggestions ? results[0].concat(results[1]) : results[0]);

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function handleEntitySearch(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Cancels editing state and marks that focus may need to be restored after
   * the next render, if focus was within the wrapper when editing finished.
   */


  function stopEditing() {
    isEndingEditWithFocus.current = !!wrapperNode.current && wrapperNode.current.contains(document.activeElement);
    setIsEditingLink(false);
  } // Effects


  var getSearchHandler = (0, _element.useCallback)(function (val, args) {
    var isInternal = (0, _lodash.startsWith)(val, '#');
    var handleManualEntry = isInternal || (0, _url.isURL)(val) || val && val.includes('www.');
    return handleManualEntry ? handleDirectEntry(val, args) : handleEntitySearch(val, args);
  }, [handleDirectEntry, fetchSearchSuggestions]); // Render Components

  var renderSearchResults = function renderSearchResults(_ref3) {
    var suggestionsListProps = _ref3.suggestionsListProps,
        buildSuggestionItemProps = _ref3.buildSuggestionItemProps,
        suggestions = _ref3.suggestions,
        selectedSuggestion = _ref3.selectedSuggestion,
        isLoading = _ref3.isLoading,
        isInitialSuggestions = _ref3.isInitialSuggestions;
    var resultsListClasses = (0, _classnames.default)('block-editor-link-control__search-results', {
      'is-loading': isLoading
    });
    var manualLinkEntryTypes = ['url', 'mailto', 'tel', 'internal'];
    var searchResultsLabelId = isInitialSuggestions ? "block-editor-link-control-search-results-label-".concat(instanceId) : undefined;
    var labelText = isInitialSuggestions ? (0, _i18n.__)('Recently updated') : (0, _i18n.sprintf)((0, _i18n.__)('Search results for %s'), inputValue); // According to guidelines aria-label should be added if the label
    // itself is not visible.
    // See: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role

    var ariaLabel = isInitialSuggestions ? undefined : labelText;
    var SearchResultsLabel = (0, _element.createElement)("span", {
      className: "block-editor-link-control__search-results-label",
      id: searchResultsLabelId,
      "aria-label": ariaLabel
    }, labelText);
    return (0, _element.createElement)("div", {
      className: "block-editor-link-control__search-results-wrapper"
    }, isInitialSuggestions ? SearchResultsLabel : (0, _element.createElement)(_components.VisuallyHidden, null, SearchResultsLabel), (0, _element.createElement)("div", (0, _extends2.default)({}, suggestionsListProps, {
      className: resultsListClasses,
      "aria-labelledby": searchResultsLabelId
    }), suggestions.map(function (suggestion, index) {
      return (0, _element.createElement)(_searchItem.default, {
        key: "".concat(suggestion.id, "-").concat(suggestion.type),
        itemProps: buildSuggestionItemProps(suggestion, index),
        suggestion: suggestion,
        onClick: function onClick() {
          onChange(_objectSpread({}, value, {}, suggestion));
          stopEditing();
        },
        isSelected: index === selectedSuggestion,
        isURL: manualLinkEntryTypes.includes(suggestion.type.toLowerCase()),
        searchTerm: inputValue
      });
    })));
  };

  return (0, _element.createElement)("div", {
    tabIndex: -1,
    ref: wrapperNode,
    className: "block-editor-link-control"
  }, isEditingLink || !value ? (0, _element.createElement)(_searchInput.default, {
    value: inputValue,
    onChange: onInputChange,
    onSelect: function onSelect(suggestion) {
      onChange(_objectSpread({}, value, {}, suggestion));
      stopEditing();
    },
    renderSuggestions: renderSearchResults,
    fetchSuggestions: getSearchHandler,
    showInitialSuggestions: showInitialSuggestions
  }) : (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)("p", {
    className: "screen-reader-text",
    id: "current-link-label-".concat(instanceId)
  }, (0, _i18n.__)('Currently selected'), ":"), (0, _element.createElement)("div", {
    "aria-labelledby": "current-link-label-".concat(instanceId),
    "aria-selected": "true",
    className: (0, _classnames.default)('block-editor-link-control__search-item', {
      'is-current': true
    })
  }, (0, _element.createElement)("span", {
    className: "block-editor-link-control__search-item-header"
  }, (0, _element.createElement)(_components.ExternalLink, {
    className: "block-editor-link-control__search-item-title",
    href: value.url
  }, value && value.title || displayURL), value && value.title && (0, _element.createElement)("span", {
    className: "block-editor-link-control__search-item-info"
  }, displayURL)), (0, _element.createElement)(_components.Button, {
    isSecondary: true,
    onClick: function onClick() {
      return setIsEditingLink(true);
    },
    className: "block-editor-link-control__search-item-action"
  }, (0, _i18n.__)('Edit')))), (0, _element.createElement)(_settingsDrawer.default, {
    value: value,
    settings: settings,
    onChange: onChange
  }));
}

var _default = LinkControl;
exports.default = _default;
//# sourceMappingURL=index.js.map