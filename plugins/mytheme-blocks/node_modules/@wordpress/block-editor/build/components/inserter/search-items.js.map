{"version":3,"sources":["@wordpress/block-editor/src/components/inserter/search-items.js"],"names":["normalizeSearchTerm","term","replace","toLowerCase","removeMatchingTerms","unmatchedTerms","unprocessedTerms","unmatchedTerm","unprocessedTerm","includes","searchItems","items","categories","collections","searchTerm","normalizedSearchTerms","length","filter","name","title","category","keywords","variations","join","slug","itemCollection","split","map","variation","item","matchedVariations","termToMatch","labelTerm"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tdeburr,\n\tdifferenceWith,\n\tfind,\n\tget,\n\tintersectionWith,\n\tisEmpty,\n\twords,\n} from 'lodash';\n\n/**\n * Converts the search term into a list of normalized terms.\n *\n * @param {string} term The search term to normalize.\n *\n * @return {string[]} The normalized list of search terms.\n */\nexport const normalizeSearchTerm = ( term = '' ) => {\n\t// Disregard diacritics.\n\t//  Input: \"mÃ©dia\"\n\tterm = deburr( term );\n\n\t// Accommodate leading slash, matching autocomplete expectations.\n\t//  Input: \"/media\"\n\tterm = term.replace( /^\\//, '' );\n\n\t// Lowercase.\n\t//  Input: \"MEDIA\"\n\tterm = term.toLowerCase();\n\n\t// Extract words.\n\treturn words( term );\n};\n\nconst removeMatchingTerms = ( unmatchedTerms, unprocessedTerms ) => {\n\treturn differenceWith(\n\t\tunmatchedTerms,\n\t\tnormalizeSearchTerm( unprocessedTerms ),\n\t\t( unmatchedTerm, unprocessedTerm ) =>\n\t\t\tunprocessedTerm.includes( unmatchedTerm )\n\t);\n};\n\n/**\n * Filters an item list given a search term.\n *\n * @param {Array} items       Item list\n * @param {Array} categories  Available categories.\n * @param {Array} collections Available collections.\n * @param {string} searchTerm Search term.\n *\n * @return {Array}             Filtered item list.\n */\nexport const searchItems = ( items, categories, collections, searchTerm ) => {\n\tconst normalizedSearchTerms = normalizeSearchTerm( searchTerm );\n\n\tif ( normalizedSearchTerms.length === 0 ) {\n\t\treturn items;\n\t}\n\n\treturn items\n\t\t.filter(\n\t\t\t( { name, title, category, keywords = [], variations = [] } ) => {\n\t\t\t\tlet unmatchedTerms = removeMatchingTerms(\n\t\t\t\t\tnormalizedSearchTerms,\n\t\t\t\t\ttitle\n\t\t\t\t);\n\n\t\t\t\tif ( unmatchedTerms.length === 0 ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tunmatchedTerms = removeMatchingTerms(\n\t\t\t\t\tunmatchedTerms,\n\t\t\t\t\tkeywords.join( ' ' )\n\t\t\t\t);\n\n\t\t\t\tif ( unmatchedTerms.length === 0 ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tunmatchedTerms = removeMatchingTerms(\n\t\t\t\t\tunmatchedTerms,\n\t\t\t\t\tget( find( categories, { slug: category } ), [ 'title' ] )\n\t\t\t\t);\n\n\t\t\t\tconst itemCollection = collections[ name.split( '/' )[ 0 ] ];\n\t\t\t\tif ( itemCollection ) {\n\t\t\t\t\tunmatchedTerms = removeMatchingTerms(\n\t\t\t\t\t\tunmatchedTerms,\n\t\t\t\t\t\titemCollection.title\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif ( unmatchedTerms.length === 0 ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tunmatchedTerms = removeMatchingTerms(\n\t\t\t\t\tunmatchedTerms,\n\t\t\t\t\tvariations\n\t\t\t\t\t\t.map( ( variation ) => variation.title )\n\t\t\t\t\t\t.join( ' ' )\n\t\t\t\t);\n\n\t\t\t\treturn unmatchedTerms.length === 0;\n\t\t\t}\n\t\t)\n\t\t.map( ( item ) => {\n\t\t\tif ( isEmpty( item.variations ) ) {\n\t\t\t\treturn item;\n\t\t\t}\n\n\t\t\tconst matchedVariations = item.variations.filter( ( variation ) => {\n\t\t\t\treturn (\n\t\t\t\t\tintersectionWith(\n\t\t\t\t\t\tnormalizedSearchTerms,\n\t\t\t\t\t\tnormalizeSearchTerm( variation.title ),\n\t\t\t\t\t\t( termToMatch, labelTerm ) =>\n\t\t\t\t\t\t\tlabelTerm.includes( termToMatch )\n\t\t\t\t\t).length > 0\n\t\t\t\t);\n\t\t\t} );\n\t\t\t// When no partterns matched, fallback to all variations.\n\t\t\tif ( isEmpty( matchedVariations ) ) {\n\t\t\t\treturn item;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...item,\n\t\t\t\tvariations: matchedVariations,\n\t\t\t};\n\t\t} );\n};\n"]}