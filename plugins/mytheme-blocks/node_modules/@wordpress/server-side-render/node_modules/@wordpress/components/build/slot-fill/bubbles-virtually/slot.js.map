{"version":3,"sources":["@wordpress/components/src/slot-fill/bubbles-virtually/slot.js"],"names":["Slot","name","fillProps","as","Component","props","registry","SlotFillContext","ref","slot","registerSlot","unregisterSlot","updateSlot"],"mappings":";;;;;;;;;AAGA;;;;;;AACA;;AAKA;;AACA;;AAVA;;;;AAMA;;;AAMe,SAASA,IAAT,OAKX;AAAA,MAJHC,IAIG,QAJHA,IAIG;AAAA,4BAHHC,SAGG;AAAA,MAHHA,SAGG,+BAHS,EAGT;AAAA,qBAFHC,EAEG;AAAA,MAFCC,SAED,wBAFa,KAEb;AAAA,MADAC,KACA;AACH,MAAMC,QAAQ,GAAG,yBAAYC,wBAAZ,CAAjB;AACA,MAAMC,GAAG,GAAG,sBAAZ;AACA,MAAMC,IAAI,GAAG,sBAASR,IAAT,CAAb;AAEA,gCAAiB,YAAM;AACtBK,IAAAA,QAAQ,CAACI,YAAT,CAAuBT,IAAvB,EAA6BO,GAA7B,EAAkCN,SAAlC;AACA,WAAO,YAAM;AACZI,MAAAA,QAAQ,CAACK,cAAT,CAAyBV,IAAzB,EAA+BO,GAA/B;AACA,KAFD,CAFsB,CAKtB;AACA;AACA;AACA;AACA,GATD,EASG,CAAEF,QAAQ,CAACI,YAAX,EAAyBJ,QAAQ,CAACK,cAAlC,EAAkDV,IAAlD,CATH,EALG,CAgBH;AACA;;AACA,gCAAiB,YAAM;AACtB,QAAKQ,IAAI,CAACP,SAAL,IAAkB,CAAE,6BAAgBO,IAAI,CAACP,SAArB,EAAgCA,SAAhC,CAAzB,EAAuE;AACtEI,MAAAA,QAAQ,CAACM,UAAT,CAAqBX,IAArB,EAA2BO,GAA3B,EAAgCN,SAAhC;AACA;AACD,GAJD;AAMA,SAAO,4BAAC,SAAD;AAAW,IAAA,GAAG,EAAGM;AAAjB,KAA4BH,KAA5B,EAAP;AACA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useRef, useLayoutEffect, useContext } from '@wordpress/element';\nimport isShallowEqual from '@wordpress/is-shallow-equal';\n\n/**\n * Internal dependencies\n */\nimport SlotFillContext from './slot-fill-context';\nimport useSlot from './use-slot';\n\nexport default function Slot( {\n\tname,\n\tfillProps = {},\n\tas: Component = 'div',\n\t...props\n} ) {\n\tconst registry = useContext( SlotFillContext );\n\tconst ref = useRef();\n\tconst slot = useSlot( name );\n\n\tuseLayoutEffect( () => {\n\t\tregistry.registerSlot( name, ref, fillProps );\n\t\treturn () => {\n\t\t\tregistry.unregisterSlot( name, ref );\n\t\t};\n\t\t// We are not including fillProps in the deps because we don't want to\n\t\t// unregister and register the slot whenever fillProps change, which would\n\t\t// cause the fill to be re-mounted. We are only considering the initial value\n\t\t// of fillProps.\n\t}, [ registry.registerSlot, registry.unregisterSlot, name ] );\n\n\t// fillProps may be an update that interact with the layout, so\n\t// we useLayoutEffect\n\tuseLayoutEffect( () => {\n\t\tif ( slot.fillProps && ! isShallowEqual( slot.fillProps, fillProps ) ) {\n\t\t\tregistry.updateSlot( name, ref, fillProps );\n\t\t}\n\t} );\n\n\treturn <Component ref={ ref } { ...props } />;\n}\n"]}