"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EntitiesSavedStates;

var _element = require("@wordpress/element");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _equivalentKeyMap = _interopRequireDefault(require("equivalent-key-map"));

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
var EntitiesSavedStatesCheckbox = function EntitiesSavedStatesCheckbox(_ref) {
  var id = _ref.id,
      name = _ref.name,
      rawRecord = _ref.changes.rawRecord,
      checked = _ref.checked,
      setCheckedById = _ref.setCheckedById;
  return (0, _element.createElement)(_components.CheckboxControl, {
    label: "".concat(name, ": \"").concat(rawRecord.name || rawRecord.slug || rawRecord.title || (0, _i18n.__)('Untitled'), "\""),
    checked: checked,
    onChange: function onChange(nextChecked) {
      return setCheckedById(id, nextChecked);
    }
  });
};

function EntitiesSavedStates(_ref2) {
  var isOpen = _ref2.isOpen,
      _onRequestClose = _ref2.onRequestClose,
      _ref2$ignoredForSave = _ref2.ignoredForSave,
      ignoredForSave = _ref2$ignoredForSave === void 0 ? new _equivalentKeyMap.default() : _ref2$ignoredForSave;
  var entityRecordChangesByRecord = (0, _data.useSelect)(function (select) {
    return select('core').getEntityRecordChangesByRecord();
  });

  var _useDispatch = (0, _data.useDispatch)('core'),
      saveEditedEntityRecord = _useDispatch.saveEditedEntityRecord;

  var _useState = (0, _element.useState)(function () {
    return new _equivalentKeyMap.default();
  }),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      checkedById = _useState2[0],
      _setCheckedById = _useState2[1];

  var setCheckedById = function setCheckedById(id, checked) {
    return _setCheckedById(function (prevCheckedById) {
      var nextCheckedById = new _equivalentKeyMap.default(prevCheckedById);

      if (checked) {
        nextCheckedById.set(id, true);
      } else {
        nextCheckedById.delete(id);
      }

      return nextCheckedById;
    });
  };

  var saveCheckedEntities = function saveCheckedEntities() {
    checkedById.forEach(function (_checked, id) {
      if (!ignoredForSave.has(id)) {
        saveEditedEntityRecord.apply(void 0, (0, _toConsumableArray2.default)(id.filter(function (s, i) {
          return i !== id.length - 1 || s !== 'undefined';
        })));
      }
    });

    _onRequestClose(checkedById);
  };

  return isOpen && (0, _element.createElement)(_components.Modal, {
    title: (0, _i18n.__)('What do you want to save?'),
    onRequestClose: function onRequestClose() {
      return _onRequestClose();
    },
    contentLabel: (0, _i18n.__)('Select items to save.')
  }, Object.keys(entityRecordChangesByRecord).map(function (changedKind) {
    return Object.keys(entityRecordChangesByRecord[changedKind]).map(function (changedName) {
      return Object.keys(entityRecordChangesByRecord[changedKind][changedName]).map(function (changedKey) {
        var id = [changedKind, changedName, changedKey];
        return (0, _element.createElement)(EntitiesSavedStatesCheckbox, {
          key: id.join(' | '),
          id: id,
          name: changedName,
          changes: entityRecordChangesByRecord[changedKind][changedName][changedKey],
          checked: checkedById.get(id),
          setCheckedById: setCheckedById
        });
      });
    });
  }), (0, _element.createElement)(_components.Button, {
    isPrimary: true,
    disabled: checkedById.size === 0,
    onClick: saveCheckedEntities,
    className: "editor-entities-saved-states__save-button"
  }, (0, _i18n.__)('Save')));
}
//# sourceMappingURL=index.js.map